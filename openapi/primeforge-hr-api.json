{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Application is running"
          }
        },
        "summary": "Get application status",
        "tags": [
          "Health"
        ]
      }
    },
    "/auth/status": {
      "get": {
        "operationId": "AppController_getAuthStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Authentication status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "tenantId": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get authentication status",
        "tags": [
          "Health"
        ]
      }
    },
    "/auth/health": {
      "get": {
        "operationId": "AppController_getAuthHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Authentication health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get authentication health status",
        "tags": [
          "Health"
        ]
      }
    },
    "/auth/user-info": {
      "get": {
        "operationId": "AppController_getUserInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "tenantId": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "fullContext": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get current user information using decorators",
        "tags": [
          "Health"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "AppController_getSystemHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "System health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "healthy",
                        "unhealthy",
                        "degraded"
                      ]
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "services": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "object"
                        },
                        "redis": {
                          "type": "object"
                        },
                        "rabbitmq": {
                          "type": "object"
                        }
                      }
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "healthy": {
                          "type": "number"
                        },
                        "unhealthy": {
                          "type": "number"
                        },
                        "degraded": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Comprehensive system health check",
        "tags": [
          "Health"
        ]
      }
    },
    "/health/live": {
      "get": {
        "operationId": "AppController_getLivenessProbe",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is alive",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is not alive"
          }
        },
        "summary": "Liveness probe for Kubernetes",
        "tags": [
          "Health"
        ]
      }
    },
    "/health/ready": {
      "get": {
        "operationId": "AppController_getReadinessProbe",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is ready",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is not ready"
          }
        },
        "summary": "Readiness probe for Kubernetes",
        "tags": [
          "Health"
        ]
      }
    },
    "/health/{service}": {
      "get": {
        "operationId": "AppController_getServiceHealth",
        "parameters": [
          {
            "name": "service",
            "required": true,
            "in": "path",
            "description": "Service name",
            "schema": {
              "enum": [
                "database",
                "redis",
                "rabbitmq"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "healthy",
                        "unhealthy",
                        "degraded"
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "responseTime": {
                      "type": "number"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Individual service health check",
        "tags": [
          "Health"
        ]
      }
    },
    "/audit": {
      "get": {
        "operationId": "AuditController_queryAuditLogs",
        "parameters": [
          {
            "name": "user_id",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "action",
            "required": false,
            "in": "query",
            "description": "Filter by action",
            "schema": {
              "type": "string",
              "enum": [
                "CREATE",
                "UPDATE",
                "DELETE",
                "VIEW",
                "EXPORT",
                "LOGIN",
                "LOGOUT",
                "APPROVE",
                "REJECT",
                "ASSIGN",
                "UNASSIGN"
              ]
            }
          },
          {
            "name": "resource_type",
            "required": false,
            "in": "query",
            "description": "Filter by resource type",
            "schema": {
              "example": "Employee",
              "type": "string"
            }
          },
          {
            "name": "resource_id",
            "required": false,
            "in": "query",
            "description": "Filter by resource ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "required": false,
            "in": "query",
            "description": "Start date for filtering",
            "schema": {
              "example": "2024-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": false,
            "in": "query",
            "description": "End date for filtering",
            "schema": {
              "example": "2024-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Query audit logs",
        "tags": [
          "Audit"
        ]
      }
    },
    "/audit/resource/{resourceType}/{resourceId}": {
      "get": {
        "operationId": "AuditController_getResourceAuditTrail",
        "parameters": [
          {
            "name": "resourceType",
            "required": true,
            "in": "path",
            "description": "Type of resource",
            "schema": {
              "example": "Employee",
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "description": "ID of the resource",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource audit trail retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get audit trail for a specific resource",
        "tags": [
          "Audit"
        ]
      }
    },
    "/audit/user/{userId}": {
      "get": {
        "operationId": "AuditController_getUserActivity",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "ID of the user",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User activity logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get activity logs for a specific user",
        "tags": [
          "Audit"
        ]
      }
    },
    "/audit/compliance-report": {
      "get": {
        "operationId": "AuditController_generateComplianceReport",
        "parameters": [
          {
            "name": "start_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Compliance report generated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Generate compliance report",
        "tags": [
          "Audit"
        ]
      }
    },
    "/reports/generate": {
      "post": {
        "operationId": "ReportsController_generateReport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateReportDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Report generated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate a new report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/download/{reportId}": {
      "get": {
        "operationId": "ReportsController_downloadReport",
        "parameters": [
          {
            "name": "reportId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report file"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Download a generated report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/history": {
      "get": {
        "operationId": "ReportsController_getReportHistory",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "employee_list",
              "type": "string",
              "enum": [
                "employee_list",
                "employee_detail",
                "payroll_summary",
                "payroll_detail",
                "leave_summary",
                "leave_balance",
                "attendance_report",
                "department_summary",
                "audit_log",
                "compliance_report",
                "performance_review",
                "headcount_report",
                "turnover_report",
                "training_report"
              ]
            }
          },
          {
            "name": "format",
            "required": false,
            "in": "query",
            "schema": {
              "example": "pdf",
              "type": "string",
              "enum": [
                "pdf",
                "excel",
                "csv",
                "json"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "example": "completed",
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "completed",
                "failed"
              ]
            }
          },
          {
            "name": "start_date",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of generated reports"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get report generation history",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/schedules": {
      "post": {
        "operationId": "ReportsController_createSchedule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReportScheduleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Schedule created successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new report schedule",
        "tags": [
          "Reports"
        ]
      },
      "get": {
        "operationId": "ReportsController_getSchedules",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of schedules"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all report schedules",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/schedules/{scheduleId}": {
      "get": {
        "operationId": "ReportsController_getSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule details"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific schedule",
        "tags": [
          "Reports"
        ]
      },
      "put": {
        "operationId": "ReportsController_updateSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReportScheduleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schedule updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a report schedule",
        "tags": [
          "Reports"
        ]
      },
      "delete": {
        "operationId": "ReportsController_deleteSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a report schedule",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/schedules/{scheduleId}/run": {
      "post": {
        "operationId": "ReportsController_runScheduledReport",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report generated and sent"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Run a scheduled report immediately",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/employee-list": {
      "get": {
        "operationId": "ReportsController_getEmployeeListReport",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee list report"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate employee list report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/payroll-summary": {
      "get": {
        "operationId": "ReportsController_getPayrollSummaryReport",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "year",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payroll summary report"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate payroll summary report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/attendance": {
      "get": {
        "operationId": "ReportsController_getAttendanceReport",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "department_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance report"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate attendance report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/reports/leave-balance": {
      "get": {
        "operationId": "ReportsController_getLeaveBalanceReport",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "department_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave balance report"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate leave balance report",
        "tags": [
          "Reports"
        ]
      }
    },
    "/companies": {
      "post": {
        "operationId": "CompanyController_createCompany",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Company with this number already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new company",
        "tags": [
          "Companies"
        ]
      },
      "get": {
        "operationId": "CompanyController_findAllCompanies",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by (name, companyNumber, type, status, created, updated)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for company name, number, director, or email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (starts from 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "includeStats",
            "required": false,
            "in": "query",
            "description": "Include department and employee statistics",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Companies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CompanyResponseDto"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/PaginatedCompanyResponseDto"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all companies with optional pagination",
        "tags": [
          "Companies"
        ]
      }
    },
    "/companies/{id}": {
      "get": {
        "operationId": "CompanyController_findCompanyById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get company by ID",
        "tags": [
          "Companies"
        ]
      },
      "put": {
        "operationId": "CompanyController_updateCompany",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Company not found"
          },
          "409": {
            "description": "Company with this number already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update company",
        "tags": [
          "Companies"
        ]
      },
      "delete": {
        "operationId": "CompanyController_deleteCompany",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Company deleted successfully"
          },
          "404": {
            "description": "Company not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete company",
        "tags": [
          "Companies"
        ]
      }
    },
    "/companies/by-number/{companyNumber}": {
      "get": {
        "operationId": "CompanyController_findCompanyByNumber",
        "parameters": [
          {
            "name": "companyNumber",
            "required": true,
            "in": "path",
            "description": "Company registration number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get company by company number",
        "tags": [
          "Companies"
        ]
      }
    },
    "/companies/{id}/stats": {
      "get": {
        "operationId": "CompanyController_getCompanyStats",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "departmentCount": {
                      "type": "number"
                    },
                    "employeeCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Company not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get company statistics",
        "tags": [
          "Companies"
        ]
      }
    },
    "/departments": {
      "post": {
        "operationId": "DepartmentController_createDepartment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepartmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Department created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new department",
        "tags": [
          "Departments"
        ]
      },
      "get": {
        "operationId": "DepartmentController_findAllDepartments",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by (name, function, created, updated)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for department name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (starts from 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "includeRelations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Departments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DepartmentResponseDto"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/PaginatedDepartmentResponseDto"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all departments with optional pagination",
        "tags": [
          "Departments"
        ]
      }
    },
    "/departments/hierarchy/{companyId}": {
      "get": {
        "operationId": "DepartmentController_getDepartmentHierarchy",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Department hierarchy retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get department hierarchy for a company",
        "tags": [
          "Departments"
        ]
      }
    },
    "/departments/{id}": {
      "get": {
        "operationId": "DepartmentController_findDepartmentById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "includeRelations",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Department retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get department by ID",
        "tags": [
          "Departments"
        ]
      },
      "put": {
        "operationId": "DepartmentController_updateDepartment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDepartmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Department updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update department",
        "tags": [
          "Departments"
        ]
      },
      "delete": {
        "operationId": "DepartmentController_deleteDepartment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Department deleted successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete department",
        "tags": [
          "Departments"
        ]
      }
    },
    "/jobs": {
      "post": {
        "operationId": "JobController_createJob",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateJobDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new job",
        "tags": [
          "Jobs"
        ]
      },
      "get": {
        "operationId": "JobController_findAllJobs",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by (name, level, status, type, minSalary, maxSalary)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for job name, SOC code, salary grade, or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (starts from 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "description": "Filter jobs by company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Jobs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/JobResponseDto"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/PaginatedJobResponseDto"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all jobs with optional pagination",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/jobs/{id}": {
      "get": {
        "operationId": "JobController_findJobById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Job not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get job by ID",
        "tags": [
          "Jobs"
        ]
      },
      "put": {
        "operationId": "JobController_updateJob",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Job not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update job",
        "tags": [
          "Jobs"
        ]
      },
      "delete": {
        "operationId": "JobController_deleteJob",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Job deleted successfully"
          },
          "404": {
            "description": "Job not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete job",
        "tags": [
          "Jobs"
        ]
      }
    },
    "/employees": {
      "post": {
        "operationId": "EmployeeController_createEmployee",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployeeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employee created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Employee with this employee number or national insurance number already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new employee",
        "tags": [
          "employees"
        ]
      },
      "get": {
        "operationId": "EmployeeController_findAllEmployees",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by (firstName, lastName, employeeNumber, email, status, created, updated)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (starts from 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "include_terminated",
            "required": false,
            "in": "query",
            "description": "Include terminated employees",
            "schema": {}
          },
          {
            "name": "department_id",
            "required": false,
            "in": "query",
            "description": "Filter by department ID",
            "schema": {}
          },
          {
            "name": "employment_status",
            "required": false,
            "in": "query",
            "description": "Filter by employment status",
            "schema": {}
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name or employee number",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Employees retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmployeeResponseDto"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/PaginatedEmployeeResponseDto"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all employees with optional search filters and pagination",
        "tags": [
          "employees"
        ]
      }
    },
    "/employees/stats/by-department": {
      "get": {
        "operationId": "EmployeeController_getEmployeeStatsByDepartment",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Employee statistics by department",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "department_id": {
                        "type": "string"
                      },
                      "department_name": {
                        "type": "string"
                      },
                      "employee_count": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee statistics by department",
        "tags": [
          "employees"
        ]
      }
    },
    "/employees/stats/employment-status": {
      "get": {
        "operationId": "EmployeeController_getEmploymentStatusSummary",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Employee count by employment status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "count": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee count by employment status",
        "tags": [
          "employees"
        ]
      }
    },
    "/employees/{id}": {
      "get": {
        "operationId": "EmployeeController_findEmployeeById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get an employee by ID",
        "tags": [
          "employees"
        ]
      },
      "patch": {
        "operationId": "EmployeeController_updateEmployee",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          },
          "409": {
            "description": "Employee with this employee number or national insurance number already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update an employee",
        "tags": [
          "employees"
        ]
      },
      "delete": {
        "description": "Permanently deletes an employee. Only allowed for employees without assignments.",
        "operationId": "EmployeeController_deleteEmployee",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Employee deleted successfully"
          },
          "404": {
            "description": "Employee not found"
          },
          "409": {
            "description": "Cannot delete employee with existing assignments"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete an employee (hard delete)",
        "tags": [
          "employees"
        ]
      }
    },
    "/employees/{id}/details": {
      "get": {
        "operationId": "EmployeeController_findEmployeeByIdWithDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee details with assignments and managed departments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDetailResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee details with relations",
        "tags": [
          "employees"
        ]
      }
    },
    "/employees/number/{employeeNumber}": {
      "get": {
        "operationId": "EmployeeController_findEmployeeByNumber",
        "parameters": [
          {
            "name": "employeeNumber",
            "required": true,
            "in": "path",
            "description": "Employee number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get an employee by employee number",
        "tags": [
          "employees"
        ]
      }
    },
    "/employees/{id}/terminate": {
      "post": {
        "operationId": "EmployeeController_terminateEmployee",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "terminationDate",
            "required": false,
            "in": "query",
            "description": "Termination date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee terminated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Terminate an employee (soft delete)",
        "tags": [
          "employees"
        ]
      }
    },
    "/assignments": {
      "post": {
        "operationId": "AssignmentController_createAssignment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssignmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assignment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee, job, or department not found"
          },
          "409": {
            "description": "Employee already has an overlapping assignment"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new assignment",
        "tags": [
          "assignments"
        ]
      },
      "get": {
        "operationId": "AssignmentController_findAllAssignments",
        "parameters": [
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "department_id",
            "required": false,
            "in": "query",
            "description": "Filter by department ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "job_id",
            "required": false,
            "in": "query",
            "description": "Filter by job ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "include_ended",
            "required": false,
            "in": "query",
            "description": "Include ended assignments",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "start_date_from",
            "required": false,
            "in": "query",
            "description": "Filter by start date from",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "start_date_to",
            "required": false,
            "in": "query",
            "description": "Filter by start date to",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of assignments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all assignments with optional search filters",
        "tags": [
          "assignments"
        ]
      }
    },
    "/assignments/stats": {
      "get": {
        "operationId": "AssignmentController_getAssignmentStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Assignment statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "active": {
                      "type": "number"
                    },
                    "ended": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get assignment statistics",
        "tags": [
          "assignments"
        ]
      }
    },
    "/assignments/employee/{employeeId}": {
      "get": {
        "operationId": "AssignmentController_getCurrentAssignmentsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current assignments for the employee",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get current assignments for an employee",
        "tags": [
          "assignments"
        ]
      }
    },
    "/assignments/employee/{employeeId}/history": {
      "get": {
        "operationId": "AssignmentController_getAssignmentHistoryByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment history for the employee",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get assignment history for an employee",
        "tags": [
          "assignments"
        ]
      }
    },
    "/assignments/department/{departmentId}": {
      "get": {
        "operationId": "AssignmentController_getAssignmentsByDepartment",
        "parameters": [
          {
            "name": "departmentId",
            "required": true,
            "in": "path",
            "description": "Department ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_ended",
            "required": false,
            "in": "query",
            "description": "Include ended assignments",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignments in the department",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get assignments by department",
        "tags": [
          "assignments"
        ]
      }
    },
    "/assignments/{id}": {
      "get": {
        "operationId": "AssignmentController_findAssignmentById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Assignment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Assignment not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get an assignment by ID",
        "tags": [
          "assignments"
        ]
      },
      "patch": {
        "operationId": "AssignmentController_updateAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Assignment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssignmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assignment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Assignment not found"
          },
          "409": {
            "description": "Assignment conflicts with existing assignment"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update an assignment",
        "tags": [
          "assignments"
        ]
      },
      "delete": {
        "description": "Permanently deletes an assignment record",
        "operationId": "AssignmentController_deleteAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Assignment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Assignment deleted successfully"
          },
          "404": {
            "description": "Assignment not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete an assignment",
        "tags": [
          "assignments"
        ]
      }
    },
    "/assignments/{id}/details": {
      "get": {
        "operationId": "AssignmentController_findAssignmentByIdWithDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Assignment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment details with employee, job, and department information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentWithRelationsDto"
                }
              }
            }
          },
          "404": {
            "description": "Assignment not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get assignment details with relations",
        "tags": [
          "assignments"
        ]
      }
    },
    "/assignments/{id}/end": {
      "post": {
        "operationId": "AssignmentController_endAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Assignment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment ended successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Assignment not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "End an assignment",
        "tags": [
          "assignments"
        ]
      }
    },
    "/rate-groups": {
      "post": {
        "operationId": "RateGroupController_createRateGroup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rate group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateGroupResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Rate group with this code already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new rate group",
        "tags": [
          "rate-groups"
        ]
      },
      "get": {
        "operationId": "RateGroupController_findAllRateGroups",
        "parameters": [
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unit",
            "required": false,
            "in": "query",
            "description": "Filter by unit",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jurisdiction",
            "required": false,
            "in": "query",
            "description": "Filter by jurisdiction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in code and title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of rate groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RateGroupResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all rate groups with optional search filters",
        "tags": [
          "rate-groups"
        ]
      }
    },
    "/rate-groups/stats": {
      "get": {
        "operationId": "RateGroupController_getRateGroupStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Rate group statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "byCategory": {
                      "type": "object"
                    },
                    "byJurisdiction": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get rate group statistics",
        "tags": [
          "rate-groups"
        ]
      }
    },
    "/rate-groups/categories": {
      "get": {
        "operationId": "RateGroupController_getRateCategories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of rate categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all available rate categories",
        "tags": [
          "rate-groups"
        ]
      }
    },
    "/rate-groups/by-category/{category}": {
      "get": {
        "operationId": "RateGroupController_getRateGroupsByCategory",
        "parameters": [
          {
            "name": "category",
            "required": true,
            "in": "path",
            "description": "Rate category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate groups in the category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RateGroupResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get rate groups by category",
        "tags": [
          "rate-groups"
        ]
      }
    },
    "/rate-groups/{id}": {
      "get": {
        "operationId": "RateGroupController_findRateGroupById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate group details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateGroupResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate group not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get a rate group by ID",
        "tags": [
          "rate-groups"
        ]
      },
      "patch": {
        "operationId": "RateGroupController_updateRateGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate group updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateGroupResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate group not found"
          },
          "409": {
            "description": "Rate group with this code already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a rate group",
        "tags": [
          "rate-groups"
        ]
      },
      "delete": {
        "operationId": "RateGroupController_deleteRateGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rate group deleted successfully"
          },
          "404": {
            "description": "Rate group not found"
          },
          "409": {
            "description": "Cannot delete rate group with existing entries"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a rate group",
        "tags": [
          "rate-groups"
        ]
      }
    },
    "/rate-groups/{id}/entries": {
      "get": {
        "operationId": "RateGroupController_getRateEntriesForGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entries for the group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all rate entries for a rate group",
        "tags": [
          "rate-groups"
        ]
      }
    },
    "/rate-entries": {
      "post": {
        "operationId": "RateEntryController_createRateEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRateEntryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rate entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate group not found"
          },
          "409": {
            "description": "Rate entry with these details already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new rate entry",
        "tags": [
          "rate-entries"
        ]
      },
      "get": {
        "operationId": "RateEntryController_findAllRateEntries",
        "parameters": [
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Filter by rate group ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "effectiveOn",
            "required": false,
            "in": "query",
            "description": "Filter by effective date",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "startsFrom",
            "required": false,
            "in": "query",
            "description": "Filter by start date from",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "startsTo",
            "required": false,
            "in": "query",
            "description": "Filter by start date to",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "paramsFilter",
            "required": false,
            "in": "query",
            "description": "Filter by parameters (JSON object)",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of rate entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RateEntryResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all rate entries with optional search filters",
        "tags": [
          "rate-entries"
        ]
      }
    },
    "/rate-entries/stats": {
      "get": {
        "operationId": "RateEntryController_getRateEntryStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Rate entry statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "active": {
                      "type": "number"
                    },
                    "expired": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get rate entry statistics",
        "tags": [
          "rate-entries"
        ]
      }
    },
    "/rate-entries/group/{groupId}/active": {
      "get": {
        "operationId": "RateEntryController_getActiveRateEntriesByGroup",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveDate",
            "required": false,
            "in": "query",
            "description": "Effective date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active rate entries for the group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RateEntryResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get active rate entries for a rate group",
        "tags": [
          "rate-entries"
        ]
      }
    },
    "/rate-entries/group/{groupId}/latest": {
      "get": {
        "operationId": "RateEntryController_getLatestRateEntry",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "required": false,
            "in": "query",
            "description": "Parameters filter (JSON string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveDate",
            "required": false,
            "in": "query",
            "description": "Effective date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest rate entry for the group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "No rate entry found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get latest rate entry for a group with optional parameters",
        "tags": [
          "rate-entries"
        ]
      }
    },
    "/rate-entries/{id}": {
      "get": {
        "operationId": "RateEntryController_findRateEntryById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Entry ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entry details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate entry not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get a rate entry by ID",
        "tags": [
          "rate-entries"
        ]
      },
      "patch": {
        "operationId": "RateEntryController_updateRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Entry ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRateEntryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate entry not found"
          },
          "409": {
            "description": "Rate entry with these details already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a rate entry",
        "tags": [
          "rate-entries"
        ]
      },
      "delete": {
        "description": "Permanently deletes a rate entry record",
        "operationId": "RateEntryController_deleteRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Entry ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rate entry deleted successfully"
          },
          "404": {
            "description": "Rate entry not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a rate entry",
        "tags": [
          "rate-entries"
        ]
      }
    },
    "/rate-entries/{id}/details": {
      "get": {
        "operationId": "RateEntryController_findRateEntryByIdWithGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Entry ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entry details with group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryWithGroupDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate entry not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get rate entry details with group information",
        "tags": [
          "rate-entries"
        ]
      }
    },
    "/rate-entries/{id}/close": {
      "post": {
        "operationId": "RateEntryController_closeRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Entry ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entry closed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate entry not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Close a rate entry (set end date)",
        "tags": [
          "rate-entries"
        ]
      }
    },
    "/shift-templates": {
      "post": {
        "operationId": "ShiftTemplateController_createShiftTemplate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShiftTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shift template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftTemplateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Shift template with this name already exists for this company"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new shift template",
        "tags": [
          "Shift Templates"
        ]
      },
      "get": {
        "operationId": "ShiftTemplateController_findAllShiftTemplates",
        "parameters": [
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "description": "Filter by company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shift templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShiftTemplateResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all shift templates",
        "tags": [
          "Shift Templates"
        ]
      }
    },
    "/shift-templates/{id}": {
      "get": {
        "operationId": "ShiftTemplateController_findShiftTemplateById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Shift template ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shift template retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftTemplateResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Shift template not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get shift template by ID",
        "tags": [
          "Shift Templates"
        ]
      },
      "put": {
        "operationId": "ShiftTemplateController_updateShiftTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Shift template ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShiftTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shift template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftTemplateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Shift template not found"
          },
          "409": {
            "description": "Shift template with this name already exists for this company"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a shift template",
        "tags": [
          "Shift Templates"
        ]
      },
      "delete": {
        "operationId": "ShiftTemplateController_deleteShiftTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Shift template ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Shift template deleted successfully"
          },
          "404": {
            "description": "Shift template not found"
          },
          "409": {
            "description": "Cannot delete shift template that is being used by scheduled shifts"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a shift template",
        "tags": [
          "Shift Templates"
        ]
      }
    },
    "/shift-templates/{id}/stats": {
      "get": {
        "operationId": "ShiftTemplateController_getShiftTemplateStats",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Shift template ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shift template statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scheduledShiftsCount": {
                      "type": "number"
                    },
                    "totalHours": {
                      "type": "number"
                    },
                    "breakHours": {
                      "type": "number"
                    },
                    "workingHours": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Shift template not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get shift template statistics",
        "tags": [
          "Shift Templates"
        ]
      }
    },
    "/leave-types": {
      "post": {
        "operationId": "LeaveTypeController_createLeaveType",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeaveTypeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Leave type created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveTypeResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "403": {
            "description": "Cannot create leave type for different tenant"
          },
          "409": {
            "description": "Leave type with this code already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new leave type",
        "tags": [
          "Leave Types"
        ]
      },
      "get": {
        "operationId": "LeaveTypeController_findAllLeaveTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Leave types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaveTypeResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all leave types",
        "tags": [
          "Leave Types"
        ]
      }
    },
    "/leave-types/{id}": {
      "get": {
        "operationId": "LeaveTypeController_findLeaveTypeById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Leave type ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave type retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveTypeResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "You do not have access to this leave type"
          },
          "404": {
            "description": "Leave type not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get leave type by ID",
        "tags": [
          "Leave Types"
        ]
      },
      "put": {
        "operationId": "LeaveTypeController_updateLeaveType",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Leave type ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeaveTypeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Leave type updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveTypeResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "403": {
            "description": "Cannot update leave type for different tenant"
          },
          "404": {
            "description": "Leave type not found"
          },
          "409": {
            "description": "Leave type with this code already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a leave type",
        "tags": [
          "Leave Types"
        ]
      },
      "delete": {
        "operationId": "LeaveTypeController_deleteLeaveType",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Leave type ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Leave type deleted successfully"
          },
          "403": {
            "description": "Cannot delete leave type that is in use"
          },
          "404": {
            "description": "Leave type not found"
          },
          "409": {
            "description": "Cannot delete leave type that is being used by leave requests"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a leave type",
        "tags": [
          "Leave Types"
        ]
      }
    },
    "/leave-types/by-code/{code}": {
      "get": {
        "operationId": "LeaveTypeController_findLeaveTypeByCode",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "path",
            "description": "Leave type code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave type retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveTypeResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Leave type not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get leave type by code",
        "tags": [
          "Leave Types"
        ]
      }
    },
    "/leave-types/{id}/stats": {
      "get": {
        "operationId": "LeaveTypeController_getLeaveTypeStats",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Leave type ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave type statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "leaveRequestsCount": {
                      "type": "number"
                    },
                    "totalDaysRequested": {
                      "type": "number"
                    },
                    "approvedDaysCount": {
                      "type": "number"
                    },
                    "pendingDaysCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "You do not have access to this leave type"
          },
          "404": {
            "description": "Leave type not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get leave type statistics",
        "tags": [
          "Leave Types"
        ]
      }
    },
    "/leave-requests": {
      "post": {
        "operationId": "LeaveRequestController_createLeaveRequest",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeaveRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Leave request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or leave type not found"
          },
          "409": {
            "description": "Overlapping leave request"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new leave request",
        "tags": [
          "Leave Requests"
        ]
      },
      "get": {
        "operationId": "LeaveRequestController_findAllLeaveRequests",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": [
                "PENDING",
                "APPROVED",
                "REJECTED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaveRequestResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all leave requests with optional filters",
        "tags": [
          "Leave Requests"
        ]
      }
    },
    "/leave-requests/employee/{employeeId}": {
      "get": {
        "operationId": "LeaveRequestController_findLeaveRequestsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaveRequestResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get leave requests by employee ID",
        "tags": [
          "Leave Requests"
        ]
      }
    },
    "/leave-requests/employee/{employeeId}/stats": {
      "get": {
        "operationId": "LeaveRequestController_getEmployeeLeaveStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for statistics (default: current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalRequests": {
                      "type": "number"
                    },
                    "pendingRequests": {
                      "type": "number"
                    },
                    "approvedRequests": {
                      "type": "number"
                    },
                    "rejectedRequests": {
                      "type": "number"
                    },
                    "totalApprovedHours": {
                      "type": "number"
                    },
                    "totalPendingHours": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get leave statistics for an employee",
        "tags": [
          "Leave Requests"
        ]
      }
    },
    "/leave-requests/{id}": {
      "get": {
        "operationId": "LeaveRequestController_findLeaveRequestById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave request retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a leave request by ID",
        "tags": [
          "Leave Requests"
        ]
      },
      "patch": {
        "operationId": "LeaveRequestController_updateLeaveRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeaveRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Leave request updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a leave request (only in PENDING status)",
        "tags": [
          "Leave Requests"
        ]
      },
      "delete": {
        "operationId": "LeaveRequestController_deleteLeaveRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Leave request deleted successfully"
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a leave request (only in PENDING status)",
        "tags": [
          "Leave Requests"
        ]
      }
    },
    "/leave-requests/{id}/approve": {
      "patch": {
        "operationId": "LeaveRequestController_approveLeaveRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveLeaveRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Leave request approval status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve or reject a leave request",
        "tags": [
          "Leave Requests"
        ]
      }
    },
    "/leave-requests/{id}/cancel": {
      "patch": {
        "operationId": "LeaveRequestController_cancelLeaveRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave request cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel a leave request",
        "tags": [
          "Leave Requests"
        ]
      }
    },
    "/leave-requests/admin/test": {
      "get": {
        "operationId": "LeaveRequestController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for leave request module",
        "tags": [
          "Leave Requests"
        ]
      }
    },
    "/scheduled-shifts": {
      "post": {
        "operationId": "ScheduledShiftController_createScheduledShift",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduledShiftDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Scheduled shift created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or shift template not found"
          },
          "409": {
            "description": "Shift already exists for this date"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new scheduled shift",
        "tags": [
          "Scheduled Shifts"
        ]
      },
      "get": {
        "operationId": "ScheduledShiftController_findAllScheduledShifts",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shiftTemplateId",
            "required": false,
            "in": "query",
            "description": "Filter by shift template ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled shifts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all scheduled shifts with optional filters",
        "tags": [
          "Scheduled Shifts"
        ]
      }
    },
    "/scheduled-shifts/bulk": {
      "post": {
        "operationId": "ScheduledShiftController_bulkCreateScheduledShifts",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Scheduled shifts created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or shift template not found"
          },
          "409": {
            "description": "Some shifts already exist"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Bulk create scheduled shifts for multiple dates",
        "tags": [
          "Scheduled Shifts"
        ]
      }
    },
    "/scheduled-shifts/employee/{employeeId}": {
      "get": {
        "operationId": "ScheduledShiftController_findScheduledShiftsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled shifts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get scheduled shifts by employee ID",
        "tags": [
          "Scheduled Shifts"
        ]
      }
    },
    "/scheduled-shifts/stats": {
      "get": {
        "operationId": "ScheduledShiftController_getScheduledShiftStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled shift statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalShifts": {
                      "type": "number"
                    },
                    "totalHours": {
                      "type": "number"
                    },
                    "averageHoursPerShift": {
                      "type": "number"
                    },
                    "employeeCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get scheduled shift statistics",
        "tags": [
          "Scheduled Shifts"
        ]
      }
    },
    "/scheduled-shifts/{id}": {
      "get": {
        "operationId": "ScheduledShiftController_findScheduledShiftById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled shift retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Scheduled shift not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a scheduled shift by ID",
        "tags": [
          "Scheduled Shifts"
        ]
      },
      "patch": {
        "operationId": "ScheduledShiftController_updateScheduledShift",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduledShiftDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Scheduled shift updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Scheduled shift not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a scheduled shift",
        "tags": [
          "Scheduled Shifts"
        ]
      },
      "delete": {
        "operationId": "ScheduledShiftController_deleteScheduledShift",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Scheduled shift deleted successfully"
          },
          "404": {
            "description": "Scheduled shift not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a scheduled shift",
        "tags": [
          "Scheduled Shifts"
        ]
      }
    },
    "/scheduled-shifts/admin/test": {
      "get": {
        "operationId": "ScheduledShiftController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for scheduled shift module",
        "tags": [
          "Scheduled Shifts"
        ]
      }
    },
    "/overtime-requests": {
      "post": {
        "operationId": "OvertimeRequestController_createOvertimeRequest",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOvertimeRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Overtime request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee not found"
          },
          "409": {
            "description": "Overlapping overtime request"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new overtime request",
        "tags": [
          "Overtime Requests"
        ]
      },
      "get": {
        "operationId": "OvertimeRequestController_findAllOvertimeRequests",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": [
                "PENDING",
                "APPROVED",
                "REJECTED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all overtime requests with optional filters",
        "tags": [
          "Overtime Requests"
        ]
      }
    },
    "/overtime-requests/employee/{employeeId}": {
      "get": {
        "operationId": "OvertimeRequestController_findOvertimeRequestsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get overtime requests by employee ID",
        "tags": [
          "Overtime Requests"
        ]
      }
    },
    "/overtime-requests/employee/{employeeId}/stats": {
      "get": {
        "operationId": "OvertimeRequestController_getEmployeeOvertimeStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for statistics (default: current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalRequests": {
                      "type": "number"
                    },
                    "pendingRequests": {
                      "type": "number"
                    },
                    "approvedRequests": {
                      "type": "number"
                    },
                    "rejectedRequests": {
                      "type": "number"
                    },
                    "totalApprovedHours": {
                      "type": "number"
                    },
                    "totalPendingHours": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get overtime statistics for an employee",
        "tags": [
          "Overtime Requests"
        ]
      }
    },
    "/overtime-requests/stats": {
      "get": {
        "operationId": "OvertimeRequestController_getOvertimeStats",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalRequests": {
                      "type": "number"
                    },
                    "totalApprovedHours": {
                      "type": "number"
                    },
                    "averageHoursPerRequest": {
                      "type": "number"
                    },
                    "employeeCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get general overtime statistics",
        "tags": [
          "Overtime Requests"
        ]
      }
    },
    "/overtime-requests/{id}": {
      "get": {
        "operationId": "OvertimeRequestController_findOvertimeRequestById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime request retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Overtime request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get an overtime request by ID",
        "tags": [
          "Overtime Requests"
        ]
      },
      "patch": {
        "operationId": "OvertimeRequestController_updateOvertimeRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOvertimeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Overtime request updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Overtime request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an overtime request (only in PENDING status)",
        "tags": [
          "Overtime Requests"
        ]
      },
      "delete": {
        "operationId": "OvertimeRequestController_deleteOvertimeRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Overtime request deleted successfully"
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Overtime request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an overtime request (only in PENDING status)",
        "tags": [
          "Overtime Requests"
        ]
      }
    },
    "/overtime-requests/{id}/approve": {
      "patch": {
        "operationId": "OvertimeRequestController_approveOvertimeRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveOvertimeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Overtime request approval status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Overtime request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve or reject an overtime request",
        "tags": [
          "Overtime Requests"
        ]
      }
    },
    "/overtime-requests/{id}/cancel": {
      "patch": {
        "operationId": "OvertimeRequestController_cancelOvertimeRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime request cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Overtime request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel an overtime request",
        "tags": [
          "Overtime Requests"
        ]
      }
    },
    "/overtime-requests/admin/test": {
      "get": {
        "operationId": "OvertimeRequestController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for overtime request module",
        "tags": [
          "Overtime Requests"
        ]
      }
    },
    "/attendance-records": {
      "post": {
        "operationId": "AttendanceRecordController_createAttendanceRecord",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAttendanceRecordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attendance record created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or scheduled shift not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new attendance record",
        "tags": [
          "Attendance Records"
        ]
      },
      "get": {
        "operationId": "AttendanceRecordController_findAllAttendanceRecords",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance records retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all attendance records with optional filters",
        "tags": [
          "Attendance Records"
        ]
      }
    },
    "/attendance-records/clock-in": {
      "post": {
        "operationId": "AttendanceRecordController_clockIn",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClockInDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employee clocked in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or scheduled shift not found"
          },
          "409": {
            "description": "Employee already clocked in"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clock in an employee",
        "tags": [
          "Attendance Records"
        ]
      }
    },
    "/attendance-records/{id}/clock-out": {
      "patch": {
        "operationId": "AttendanceRecordController_clockOut",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClockOutDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee clocked out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Attendance record not found"
          },
          "409": {
            "description": "Employee already clocked out"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clock out an employee",
        "tags": [
          "Attendance Records"
        ]
      }
    },
    "/attendance-records/employee/{employeeId}": {
      "get": {
        "operationId": "AttendanceRecordController_findAttendanceRecordsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance records retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get attendance records by employee ID",
        "tags": [
          "Attendance Records"
        ]
      }
    },
    "/attendance-records/{id}": {
      "get": {
        "operationId": "AttendanceRecordController_findAttendanceRecordById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance record retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Attendance record not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get an attendance record by ID",
        "tags": [
          "Attendance Records"
        ]
      },
      "patch": {
        "operationId": "AttendanceRecordController_updateAttendanceRecord",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAttendanceRecordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attendance record updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Attendance record not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an attendance record",
        "tags": [
          "Attendance Records"
        ]
      },
      "delete": {
        "operationId": "AttendanceRecordController_deleteAttendanceRecord",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attendance record deleted successfully"
          },
          "404": {
            "description": "Attendance record not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an attendance record",
        "tags": [
          "Attendance Records"
        ]
      }
    },
    "/attendance-records/admin/test": {
      "get": {
        "operationId": "AttendanceRecordController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for attendance record module",
        "tags": [
          "Attendance Records"
        ]
      }
    },
    "/timesheets": {
      "post": {
        "operationId": "TimesheetController_createTimesheet",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTimesheetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Timesheet created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee not found"
          },
          "409": {
            "description": "Overlapping timesheet exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new timesheet",
        "tags": [
          "Timesheets"
        ]
      },
      "get": {
        "operationId": "TimesheetController_findAllTimesheets",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": [
                "OPEN",
                "SUBMITTED",
                "APPROVED",
                "LOCKED"
              ],
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimesheetResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all timesheets with optional filters",
        "tags": [
          "Timesheets"
        ]
      }
    },
    "/timesheets/generate": {
      "post": {
        "operationId": "TimesheetController_generateTimesheet",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateTimesheetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Timesheet generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee not found"
          },
          "409": {
            "description": "Timesheet already exists for this period"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate a timesheet from attendance records",
        "tags": [
          "Timesheets"
        ]
      }
    },
    "/timesheets/employee/{employeeId}": {
      "get": {
        "operationId": "TimesheetController_findTimesheetsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": [
                "OPEN",
                "SUBMITTED",
                "APPROVED",
                "LOCKED"
              ],
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Filter by year",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimesheetResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get timesheets by employee ID",
        "tags": [
          "Timesheets"
        ]
      }
    },
    "/timesheets/employee/{employeeId}/stats": {
      "get": {
        "operationId": "TimesheetController_getEmployeeTimesheetStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for statistics (default: current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheet statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalTimesheets": {
                      "type": "number"
                    },
                    "draftTimesheets": {
                      "type": "number"
                    },
                    "submittedTimesheets": {
                      "type": "number"
                    },
                    "approvedTimesheets": {
                      "type": "number"
                    },
                    "rejectedTimesheets": {
                      "type": "number"
                    },
                    "totalApprovedHours": {
                      "type": "number"
                    },
                    "totalOvertimeHours": {
                      "type": "number"
                    },
                    "averageHoursPerTimesheet": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get timesheet statistics for an employee",
        "tags": [
          "Timesheets"
        ]
      }
    },
    "/timesheets/{id}": {
      "get": {
        "operationId": "TimesheetController_findTimesheetById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheet retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Timesheet not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a timesheet by ID",
        "tags": [
          "Timesheets"
        ]
      },
      "patch": {
        "operationId": "TimesheetController_updateTimesheet",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTimesheetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timesheet updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Timesheet not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a timesheet (only in DRAFT status)",
        "tags": [
          "Timesheets"
        ]
      },
      "delete": {
        "operationId": "TimesheetController_deleteTimesheet",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Timesheet deleted successfully"
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Timesheet not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a timesheet (only in DRAFT status)",
        "tags": [
          "Timesheets"
        ]
      }
    },
    "/timesheets/{id}/submit": {
      "patch": {
        "operationId": "TimesheetController_submitTimesheet",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitTimesheetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timesheet submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Timesheet not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit a timesheet for approval",
        "tags": [
          "Timesheets"
        ]
      }
    },
    "/timesheets/{id}/approve": {
      "patch": {
        "operationId": "TimesheetController_approveTimesheet",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveTimesheetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timesheet approval status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Timesheet not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve or reject a timesheet",
        "tags": [
          "Timesheets"
        ]
      }
    },
    "/timesheets/admin/test": {
      "get": {
        "operationId": "TimesheetController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for timesheet module",
        "tags": [
          "Timesheets"
        ]
      }
    },
    "/pay-schedules": {
      "post": {
        "operationId": "PayScheduleController_createPaySchedule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayScheduleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pay schedule created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Pay schedule name already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new pay schedule",
        "tags": [
          "Pay Schedules"
        ]
      },
      "get": {
        "operationId": "PayScheduleController_findAllPaySchedules",
        "parameters": [
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "description": "Filter to show only active pay schedules (no end date or future end date)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay schedules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayScheduleResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all pay schedules with optional filters",
        "tags": [
          "Pay Schedules"
        ]
      }
    },
    "/pay-schedules/active": {
      "get": {
        "operationId": "PayScheduleController_findActivePaySchedules",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active pay schedules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayScheduleResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all active pay schedules",
        "tags": [
          "Pay Schedules"
        ]
      }
    },
    "/pay-schedules/frequency/{frequency}": {
      "get": {
        "operationId": "PayScheduleController_findPaySchedulesByFrequency",
        "parameters": [
          {
            "name": "frequency",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "description": "Filter to show only active pay schedules",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay schedules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayScheduleResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay schedules by frequency",
        "tags": [
          "Pay Schedules"
        ]
      }
    },
    "/pay-schedules/stats": {
      "get": {
        "operationId": "PayScheduleController_getPayScheduleStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Pay schedule statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalSchedules": {
                      "type": "number"
                    },
                    "activeSchedules": {
                      "type": "number"
                    },
                    "inactiveSchedules": {
                      "type": "number"
                    },
                    "frequencyBreakdown": {
                      "type": "object",
                      "properties": {
                        "WEEKLY": {
                          "type": "number"
                        },
                        "BIWEEKLY": {
                          "type": "number"
                        },
                        "MONTHLY": {
                          "type": "number"
                        },
                        "QUARTERLY": {
                          "type": "number"
                        },
                        "ANNUALLY": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay schedule statistics",
        "tags": [
          "Pay Schedules"
        ]
      }
    },
    "/pay-schedules/name/{name}": {
      "get": {
        "operationId": "PayScheduleController_findPayScheduleByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay schedule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayScheduleResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay schedule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a pay schedule by name",
        "tags": [
          "Pay Schedules"
        ]
      }
    },
    "/pay-schedules/{id}": {
      "get": {
        "operationId": "PayScheduleController_findPayScheduleById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay schedule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayScheduleResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay schedule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a pay schedule by ID",
        "tags": [
          "Pay Schedules"
        ]
      },
      "patch": {
        "operationId": "PayScheduleController_updatePaySchedule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePayScheduleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pay schedule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Pay schedule not found"
          },
          "409": {
            "description": "Pay schedule name already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a pay schedule",
        "tags": [
          "Pay Schedules"
        ]
      },
      "delete": {
        "operationId": "PayScheduleController_deletePaySchedule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pay schedule deleted successfully"
          },
          "400": {
            "description": "Pay schedule is referenced by pay runs"
          },
          "404": {
            "description": "Pay schedule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a pay schedule",
        "tags": [
          "Pay Schedules"
        ]
      }
    },
    "/pay-schedules/{id}/calculate-next-pay-date": {
      "get": {
        "operationId": "PayScheduleController_calculateNextPayDate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Next pay date calculated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentPayDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "nextPayDate": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Pay schedule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Calculate next pay date for a pay schedule",
        "tags": [
          "Pay Schedules"
        ]
      }
    },
    "/pay-schedules/admin/test": {
      "get": {
        "operationId": "PayScheduleController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for pay schedule module",
        "tags": [
          "Pay Schedules"
        ]
      }
    },
    "/pay-runs": {
      "post": {
        "operationId": "PayRunController_createPayRun",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayRunDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pay run created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Pay schedule not found"
          },
          "409": {
            "description": "Overlapping pay run exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new pay run",
        "tags": [
          "Pay Runs"
        ]
      },
      "get": {
        "operationId": "PayRunController_findAllPayRuns",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by pay run status",
            "schema": {
              "enum": [
                "DRAFT",
                "PROCESSING",
                "APPROVED",
                "SUBMITTED",
                "FILED",
                "CLOSED"
              ],
              "type": "string"
            }
          },
          {
            "name": "payScheduleId",
            "required": false,
            "in": "query",
            "description": "Filter by pay schedule ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by pay period start date (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by pay period end date (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay runs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayRunResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all pay runs with optional filters",
        "tags": [
          "Pay Runs"
        ]
      }
    },
    "/pay-runs/status/{status}": {
      "get": {
        "operationId": "PayRunController_findPayRunsByStatus",
        "parameters": [
          {
            "name": "status",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay runs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayRunResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay runs by status",
        "tags": [
          "Pay Runs"
        ]
      }
    },
    "/pay-runs/stats": {
      "get": {
        "operationId": "PayRunController_getPayRunStats",
        "parameters": [
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for statistics (defaults to current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay run statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalPayRuns": {
                      "type": "number"
                    },
                    "draftPayRuns": {
                      "type": "number"
                    },
                    "processingPayRuns": {
                      "type": "number"
                    },
                    "completedPayRuns": {
                      "type": "number"
                    },
                    "failedPayRuns": {
                      "type": "number"
                    },
                    "cancelledPayRuns": {
                      "type": "number"
                    },
                    "totalGrossPay": {
                      "type": "number"
                    },
                    "totalNetPay": {
                      "type": "number"
                    },
                    "totalEmployeesPaid": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay run statistics",
        "tags": [
          "Pay Runs"
        ]
      }
    },
    "/pay-runs/{id}": {
      "get": {
        "operationId": "PayRunController_findPayRunById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay run retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a pay run by ID",
        "tags": [
          "Pay Runs"
        ]
      },
      "patch": {
        "operationId": "PayRunController_updatePayRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePayRunDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pay run updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or pay run not in DRAFT status"
          },
          "404": {
            "description": "Pay run or pay schedule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a pay run (only allowed in DRAFT status)",
        "tags": [
          "Pay Runs"
        ]
      },
      "delete": {
        "operationId": "PayRunController_deletePayRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pay run deleted successfully"
          },
          "400": {
            "description": "Pay run not in DRAFT or CANCELLED status, or has payslips"
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a pay run (only allowed in DRAFT or CANCELLED status)",
        "tags": [
          "Pay Runs"
        ]
      }
    },
    "/pay-runs/{id}/process": {
      "patch": {
        "operationId": "PayRunController_processPayRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessPayRunDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pay run processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Pay run not in DRAFT status"
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Process a pay run (change status from DRAFT to PROCESSING)",
        "tags": [
          "Pay Runs"
        ]
      }
    },
    "/pay-runs/{id}/approve": {
      "patch": {
        "operationId": "PayRunController_approvePayRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovePayRunDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pay run approval processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Pay run not in PROCESSING status"
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve, fail, or cancel a pay run",
        "tags": [
          "Pay Runs"
        ]
      }
    },
    "/pay-runs/{id}/cancel": {
      "patch": {
        "operationId": "PayRunController_cancelPayRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay run cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Pay run not in DRAFT or PROCESSING status"
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel a pay run",
        "tags": [
          "Pay Runs"
        ]
      }
    },
    "/pay-runs/{id}/update-totals": {
      "patch": {
        "operationId": "PayRunController_updatePayRunTotals",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay run totals updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update pay run totals based on payslips",
        "tags": [
          "Pay Runs"
        ]
      }
    },
    "/pay-runs/admin/test": {
      "get": {
        "operationId": "PayRunController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for pay run module",
        "tags": [
          "Pay Runs"
        ]
      }
    },
    "/payslips": {
      "post": {
        "operationId": "PayslipController_createPayslip",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayslipDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payslip created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Pay run or employee not found"
          },
          "409": {
            "description": "Payslip already exists for this employee and pay run"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new payslip",
        "tags": [
          "Payslips"
        ]
      },
      "get": {
        "operationId": "PayslipController_findAllPayslips",
        "parameters": [
          {
            "name": "payRunId",
            "required": false,
            "in": "query",
            "description": "Filter by pay run ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payslips retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayslipResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all payslips with optional filters",
        "tags": [
          "Payslips"
        ]
      }
    },
    "/payslips/bulk": {
      "post": {
        "operationId": "PayslipController_bulkCreatePayslips",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreatePayslipsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Bulk payslips created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "number"
                    },
                    "skipped": {
                      "type": "number"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Bulk create payslips for a pay run",
        "tags": [
          "Payslips"
        ]
      }
    },
    "/payslips/stats": {
      "get": {
        "operationId": "PayslipController_getPayslipStats",
        "parameters": [
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for statistics (defaults to current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payslip statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalPayslips": {
                      "type": "number"
                    },
                    "totalGrossPay": {
                      "type": "number"
                    },
                    "totalNetPay": {
                      "type": "number"
                    },
                    "averageGrossPay": {
                      "type": "number"
                    },
                    "averageNetPay": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get payslip statistics",
        "tags": [
          "Payslips"
        ]
      }
    },
    "/payslips/{id}": {
      "get": {
        "operationId": "PayslipController_findPayslipById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payslip retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Payslip not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a payslip by ID",
        "tags": [
          "Payslips"
        ]
      },
      "patch": {
        "operationId": "PayslipController_updatePayslip",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePayslipDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payslip updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or payslip not in DRAFT status"
          },
          "404": {
            "description": "Payslip or pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a payslip (only allowed in DRAFT status)",
        "tags": [
          "Payslips"
        ]
      },
      "delete": {
        "operationId": "PayslipController_deletePayslip",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Payslip deleted successfully"
          },
          "400": {
            "description": "Payslip not in DRAFT status"
          },
          "404": {
            "description": "Payslip not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a payslip (only allowed in DRAFT status)",
        "tags": [
          "Payslips"
        ]
      }
    },
    "/payslips/{id}/calculate": {
      "patch": {
        "operationId": "PayslipController_calculatePayslip",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalculatePayslipDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payslip calculated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Payslip not in DRAFT status"
          },
          "404": {
            "description": "Payslip not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Calculate payslip amounts (change status from DRAFT to CALCULATED)",
        "tags": [
          "Payslips"
        ]
      }
    },
    "/payslips/admin/test": {
      "get": {
        "operationId": "PayslipController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for payslip module",
        "tags": [
          "Payslips"
        ]
      }
    },
    "/pay-elements": {
      "post": {
        "operationId": "PayElementController_createPayElement",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayElementDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pay element created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayElementResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Pay element with this code already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new pay element",
        "tags": [
          "Pay Elements"
        ]
      },
      "get": {
        "operationId": "PayElementController_findAllPayElements",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by pay element type",
            "schema": {
              "enum": [
                "EARNING",
                "DEDUCTION",
                "BENEFIT"
              ],
              "type": "string"
            }
          },
          {
            "name": "taxable",
            "required": false,
            "in": "query",
            "description": "Filter by taxable status",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay elements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayElementResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all pay elements with optional filters",
        "tags": [
          "Pay Elements"
        ]
      }
    },
    "/pay-elements/defaults": {
      "post": {
        "operationId": "PayElementController_createDefaultPayElements",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Default pay elements created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayElementResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create default pay elements for tenant setup",
        "tags": [
          "Pay Elements"
        ]
      }
    },
    "/pay-elements/type/{type}": {
      "get": {
        "operationId": "PayElementController_findPayElementsByType",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay elements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayElementResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay elements by type",
        "tags": [
          "Pay Elements"
        ]
      }
    },
    "/pay-elements/stats": {
      "get": {
        "operationId": "PayElementController_getPayElementStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Pay element statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalPayElements": {
                      "type": "number"
                    },
                    "earningElements": {
                      "type": "number"
                    },
                    "deductionElements": {
                      "type": "number"
                    },
                    "benefitElements": {
                      "type": "number"
                    },
                    "taxableElements": {
                      "type": "number"
                    },
                    "nonTaxableElements": {
                      "type": "number"
                    },
                    "pensionableElements": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay element statistics",
        "tags": [
          "Pay Elements"
        ]
      }
    },
    "/pay-elements/code/{code}": {
      "get": {
        "operationId": "PayElementController_findPayElementByCode",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay element retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayElementResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay element not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay element by code",
        "tags": [
          "Pay Elements"
        ]
      }
    },
    "/pay-elements/{id}": {
      "get": {
        "operationId": "PayElementController_findPayElementById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay element retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayElementResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay element not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay element by ID",
        "tags": [
          "Pay Elements"
        ]
      },
      "patch": {
        "operationId": "PayElementController_updatePayElement",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePayElementDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pay element updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayElementResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Pay element not found"
          },
          "409": {
            "description": "Pay element with this code already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a pay element",
        "tags": [
          "Pay Elements"
        ]
      },
      "delete": {
        "operationId": "PayElementController_deletePayElement",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pay element deleted successfully"
          },
          "400": {
            "description": "Pay element is in use"
          },
          "404": {
            "description": "Pay element not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a pay element",
        "tags": [
          "Pay Elements"
        ]
      }
    },
    "/pay-elements/admin/test": {
      "get": {
        "operationId": "PayElementController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Test successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "module": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Admin test endpoint for pay elements",
        "tags": [
          "Pay Elements"
        ]
      }
    },
    "/employee-pay-assignments": {
      "post": {
        "operationId": "EmployeePayAssignmentController_createEmployeePayAssignment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployeePayAssignmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employee pay assignment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or pay element not found"
          },
          "409": {
            "description": "Overlapping assignment already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new employee pay assignment",
        "tags": [
          "Employee Pay Assignments"
        ]
      },
      "get": {
        "operationId": "EmployeePayAssignmentController_findAllEmployeePayAssignments",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          },
          {
            "name": "payElementId",
            "required": false,
            "in": "query",
            "description": "Filter by pay element ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          },
          {
            "name": "frequency",
            "required": false,
            "in": "query",
            "description": "Filter by pay frequency",
            "schema": {
              "example": "MONTHLY",
              "type": "string",
              "enum": [
                "WEEKLY",
                "BIWEEKLY",
                "MONTHLY",
                "YEARLY",
                "HOURLY"
              ]
            }
          },
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "description": "Show only active assignments",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee pay assignments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
                      },
                      "description": "Non-paginated response (when page/limit not provided)"
                    },
                    {
                      "$ref": "#/components/schemas/PaginatedEmployeePayAssignmentResponseDto",
                      "description": "Paginated response (when page/limit provided)"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get employee pay assignments with optional filters and pagination",
        "tags": [
          "Employee Pay Assignments"
        ]
      }
    },
    "/employee-pay-assignments/employee/{employeeId}/active": {
      "get": {
        "operationId": "EmployeePayAssignmentController_findActiveAssignmentsForEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asOfDate",
            "required": false,
            "in": "query",
            "description": "Check assignments as of this date (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active assignments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get active assignments for an employee",
        "tags": [
          "Employee Pay Assignments"
        ]
      }
    },
    "/employee-pay-assignments/stats": {
      "get": {
        "operationId": "EmployeePayAssignmentController_getEmployeePayAssignmentStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Assignment statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalAssignments": {
                      "type": "number"
                    },
                    "activeAssignments": {
                      "type": "number"
                    },
                    "terminatedAssignments": {
                      "type": "number"
                    },
                    "frequencyBreakdown": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "number"
                      }
                    },
                    "averageAssignmentAmount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get employee pay assignment statistics",
        "tags": [
          "Employee Pay Assignments"
        ]
      }
    },
    "/employee-pay-assignments/{id}": {
      "get": {
        "operationId": "EmployeePayAssignmentController_findEmployeePayAssignmentById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee pay assignment retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee pay assignment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get employee pay assignment by ID",
        "tags": [
          "Employee Pay Assignments"
        ]
      },
      "patch": {
        "operationId": "EmployeePayAssignmentController_updateEmployeePayAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeePayAssignmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee pay assignment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee pay assignment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an employee pay assignment",
        "tags": [
          "Employee Pay Assignments"
        ]
      },
      "delete": {
        "operationId": "EmployeePayAssignmentController_deleteEmployeePayAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Employee pay assignment deleted successfully"
          },
          "400": {
            "description": "Assignment is in use and cannot be deleted"
          },
          "404": {
            "description": "Employee pay assignment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an employee pay assignment",
        "tags": [
          "Employee Pay Assignments"
        ]
      }
    },
    "/employee-pay-assignments/{id}/terminate": {
      "post": {
        "operationId": "EmployeePayAssignmentController_terminateEmployeePayAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TerminateAssignmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee pay assignment terminated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Assignment already terminated"
          },
          "404": {
            "description": "Employee pay assignment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Terminate an employee pay assignment",
        "tags": [
          "Employee Pay Assignments"
        ]
      }
    },
    "/employee-pay-assignments/admin/test": {
      "get": {
        "operationId": "EmployeePayAssignmentController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Test successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "module": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Admin test endpoint for employee pay assignments",
        "tags": [
          "Employee Pay Assignments"
        ]
      }
    },
    "/enums": {
      "get": {
        "operationId": "EnumsController_getAllEnums",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Enums"
        ]
      }
    },
    "/enums/{name}": {
      "get": {
        "operationId": "EnumsController_getEnumByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Enums"
        ]
      }
    },
    "/admin/rate-groups": {
      "get": {
        "operationId": "AdminController_getRateGroups",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Rate category filter",
            "schema": {
              "type": "string",
              "enum": [
                "NMW",
                "SSP",
                "SMP",
                "SPP",
                "ShPP",
                "SPBP",
                "TAX_BAND",
                "NI_THRESHOLD",
                "NI_RATE",
                "PENSION_AE",
                "LEVY",
                "HOLIDAY_DAYS",
                "WORKING_TIME_MAX"
              ]
            }
          },
          {
            "name": "jurisdiction",
            "required": false,
            "in": "query",
            "description": "Jurisdiction filter",
            "schema": {
              "type": "string",
              "enum": [
                "UK",
                "ENGLAND",
                "WALES",
                "SCOTLAND",
                "N_IRELAND"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "NMW",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedRateGroupResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all rate groups",
        "tags": [
          "Admin"
        ]
      },
      "post": {
        "operationId": "AdminController_createRateGroup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateRateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rate group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateGroupResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create rate group",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/rate-groups/{id}": {
      "get": {
        "operationId": "AdminController_getRateGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate group retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateGroupResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get rate group by ID",
        "tags": [
          "Admin"
        ]
      },
      "put": {
        "operationId": "AdminController_updateRateGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateRateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate group updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateGroupResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update rate group",
        "tags": [
          "Admin"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteRateGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rate group deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete rate group",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/rate-groups/import": {
      "post": {
        "operationId": "AdminController_importRateGroups",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportRateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate groups imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Import rate groups from Excel/CSV file",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/rate-groups/export/{format}": {
      "get": {
        "operationId": "AdminController_exportRateGroups",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Rate category filter",
            "schema": {
              "type": "string",
              "enum": [
                "NMW",
                "SSP",
                "SMP",
                "SPP",
                "ShPP",
                "SPBP",
                "TAX_BAND",
                "NI_THRESHOLD",
                "NI_RATE",
                "PENSION_AE",
                "LEVY",
                "HOLIDAY_DAYS",
                "WORKING_TIME_MAX"
              ]
            }
          },
          {
            "name": "jurisdiction",
            "required": false,
            "in": "query",
            "description": "Jurisdiction filter",
            "schema": {
              "type": "string",
              "enum": [
                "UK",
                "ENGLAND",
                "WALES",
                "SCOTLAND",
                "N_IRELAND"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "NMW",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate groups exported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Export rate groups to Excel/CSV",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/rate-groups/template/{format}": {
      "get": {
        "operationId": "AdminController_downloadRateGroupTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template downloaded successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Download rate group import template",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/rate-entries": {
      "get": {
        "operationId": "AdminController_getRateEntries",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Rate group ID filter",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "startsAt",
            "required": false,
            "in": "query",
            "description": "Effective from date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-04-01",
              "type": "string"
            }
          },
          {
            "name": "endsAt",
            "required": false,
            "in": "query",
            "description": "Effective to date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-03-31",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedRateEntryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all rate entries",
        "tags": [
          "Admin"
        ]
      },
      "post": {
        "operationId": "AdminController_createRateEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateRateEntryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rate entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateEntryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create rate entry",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/rate-entries/{id}": {
      "get": {
        "operationId": "AdminController_getRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entry retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateEntryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get rate entry by ID",
        "tags": [
          "Admin"
        ]
      },
      "put": {
        "operationId": "AdminController_updateRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateRateEntryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateEntryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update rate entry",
        "tags": [
          "Admin"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rate entry deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete rate entry",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/rate-entries/import": {
      "post": {
        "operationId": "AdminController_importRateEntries",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportRateEntryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate entries imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Import rate entries from Excel/CSV file",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/rate-entries/export/{format}": {
      "get": {
        "operationId": "AdminController_exportRateEntries",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Rate group ID filter",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "startsAt",
            "required": false,
            "in": "query",
            "description": "Effective from date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-04-01",
              "type": "string"
            }
          },
          {
            "name": "endsAt",
            "required": false,
            "in": "query",
            "description": "Effective to date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-03-31",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entries exported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Export rate entries to Excel/CSV",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/rate-entries/template/{format}": {
      "get": {
        "operationId": "AdminController_downloadRateEntryTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template downloaded successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Download rate entry import template",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/public-holidays": {
      "get": {
        "operationId": "AdminController_getPublicHolidays",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "region",
            "required": false,
            "in": "query",
            "description": "Region filter",
            "schema": {
              "example": "England & Wales",
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year filter",
            "schema": {
              "example": 2025,
              "type": "number"
            }
          },
          {
            "name": "date",
            "required": false,
            "in": "query",
            "description": "Date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-12-25",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Public holidays retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedPublicHolidayResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all public holidays",
        "tags": [
          "Admin"
        ]
      },
      "post": {
        "operationId": "AdminController_createPublicHoliday",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreatePublicHolidayDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Public holiday created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPublicHolidayResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create public holiday",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/public-holidays/{id}": {
      "get": {
        "operationId": "AdminController_getPublicHoliday",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Public holiday retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPublicHolidayResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get public holiday by ID",
        "tags": [
          "Admin"
        ]
      },
      "put": {
        "operationId": "AdminController_updatePublicHoliday",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdatePublicHolidayDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Public holiday updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPublicHolidayResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update public holiday",
        "tags": [
          "Admin"
        ]
      },
      "delete": {
        "operationId": "AdminController_deletePublicHoliday",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Public holiday deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete public holiday",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/public-holidays/import": {
      "post": {
        "operationId": "AdminController_importPublicHolidays",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportPublicHolidayDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Public holidays imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Import public holidays from Excel/CSV file",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/public-holidays/export/{format}": {
      "get": {
        "operationId": "AdminController_exportPublicHolidays",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "region",
            "required": false,
            "in": "query",
            "description": "Region filter",
            "schema": {
              "example": "England & Wales",
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year filter",
            "schema": {
              "example": 2025,
              "type": "number"
            }
          },
          {
            "name": "date",
            "required": false,
            "in": "query",
            "description": "Date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-12-25",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Public holidays exported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Export public holidays to Excel/CSV",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/public-holidays/template/{format}": {
      "get": {
        "operationId": "AdminController_downloadPublicHolidayTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template downloaded successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Download public holiday import template",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/statutory-working-hour-rules": {
      "get": {
        "operationId": "AdminController_getStatutoryWorkingHourRules",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory working hour rules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedStatutoryWorkingHourRuleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all statutory working hour rules",
        "tags": [
          "Admin"
        ]
      },
      "post": {
        "operationId": "AdminController_createStatutoryWorkingHourRule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateStatutoryWorkingHourRuleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Statutory working hour rule created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryWorkingHourRuleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create statutory working hour rule",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/statutory-working-hour-rules/{id}": {
      "get": {
        "operationId": "AdminController_getStatutoryWorkingHourRule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory working hour rule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryWorkingHourRuleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get statutory working hour rule by ID",
        "tags": [
          "Admin"
        ]
      },
      "put": {
        "operationId": "AdminController_updateStatutoryWorkingHourRule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateStatutoryWorkingHourRuleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Statutory working hour rule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryWorkingHourRuleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update statutory working hour rule",
        "tags": [
          "Admin"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteStatutoryWorkingHourRule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Statutory working hour rule deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete statutory working hour rule",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/statutory-working-hour-rules/import": {
      "post": {
        "operationId": "AdminController_importStatutoryWorkingHourRules",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportStatutoryWorkingHourRuleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Statutory working hour rules imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Import statutory working hour rules from Excel/CSV file",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/statutory-working-hour-rules/export/{format}": {
      "get": {
        "operationId": "AdminController_exportStatutoryWorkingHourRules",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory working hour rules exported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Export statutory working hour rules to Excel/CSV",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/statutory-working-hour-rules/template/{format}": {
      "get": {
        "operationId": "AdminController_downloadStatutoryWorkingHourRuleTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template downloaded successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Download statutory working hour rule import template",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/statutory-pay-rates": {
      "get": {
        "operationId": "AdminController_getStatutoryPayRates",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Code filter",
            "schema": {
              "example": "OVERTIME_1_5X",
              "type": "string"
            }
          },
          {
            "name": "effective_from",
            "required": false,
            "in": "query",
            "description": "Effective from date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-04-01",
              "type": "string"
            }
          },
          {
            "name": "effective_to",
            "required": false,
            "in": "query",
            "description": "Effective to date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-03-31",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory pay rates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedStatutoryPayRateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all statutory pay rates",
        "tags": [
          "Admin"
        ]
      },
      "post": {
        "operationId": "AdminController_createStatutoryPayRate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateStatutoryPayRateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Statutory pay rate created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryPayRateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create statutory pay rate",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/statutory-pay-rates/{id}": {
      "get": {
        "operationId": "AdminController_getStatutoryPayRate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory pay rate retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryPayRateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get statutory pay rate by ID",
        "tags": [
          "Admin"
        ]
      },
      "put": {
        "operationId": "AdminController_updateStatutoryPayRate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateStatutoryPayRateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Statutory pay rate updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryPayRateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update statutory pay rate",
        "tags": [
          "Admin"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteStatutoryPayRate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Statutory pay rate deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete statutory pay rate",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/statutory-pay-rates/import": {
      "post": {
        "operationId": "AdminController_importStatutoryPayRates",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportStatutoryPayRateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Statutory pay rates imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Import statutory pay rates from Excel/CSV file",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/statutory-pay-rates/export/{format}": {
      "get": {
        "operationId": "AdminController_exportStatutoryPayRates",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Code filter",
            "schema": {
              "example": "OVERTIME_1_5X",
              "type": "string"
            }
          },
          {
            "name": "effective_from",
            "required": false,
            "in": "query",
            "description": "Effective from date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-04-01",
              "type": "string"
            }
          },
          {
            "name": "effective_to",
            "required": false,
            "in": "query",
            "description": "Effective to date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-03-31",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory pay rates exported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Export statutory pay rates to Excel/CSV",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/statutory-pay-rates/template/{format}": {
      "get": {
        "operationId": "AdminController_downloadStatutoryPayRateTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template downloaded successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Download statutory pay rate import template",
        "tags": [
          "Admin"
        ]
      }
    },
    "/ess/profile": {
      "get": {
        "description": "Retrieve the authenticated employee's profile information for self-service access",
        "operationId": "ESSProfileController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Employee profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeProfileDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "403": {
            "description": "ESS access denied - employee not active or ESS not enabled"
          },
          "404": {
            "description": "Employee profile not found or ESS not enabled"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee profile",
        "tags": [
          "ESS - Employee Profile"
        ]
      },
      "patch": {
        "description": "Update the authenticated employee's personal information. Only certain fields can be updated via self-service.",
        "operationId": "ESSProfileController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Personal information fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonalInfoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeProfileDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data provided (e.g., invalid phone number, sort code format)"
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "403": {
            "description": "ESS access denied - employee not active or ESS not enabled"
          },
          "404": {
            "description": "Employee profile not found or ESS not enabled"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update employee profile",
        "tags": [
          "ESS - Employee Profile"
        ]
      }
    },
    "/ess/payslips": {
      "get": {
        "description": "Retrieve the authenticated employee's payslip history with optional filtering by year/month",
        "operationId": "ESSPayslipController_getPayslips",
        "parameters": [
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Filter by year",
            "schema": {
              "example": 2024,
              "type": "number"
            }
          },
          {
            "name": "month",
            "required": false,
            "in": "query",
            "description": "Filter by month (1-12)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of payslips to return",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payslips retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayslipSummaryDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee payslips",
        "tags": [
          "ESS - Payslips"
        ]
      }
    },
    "/ess/payslips/year-to-date": {
      "get": {
        "description": "Get the authenticated employee's year-to-date payroll summary including total gross pay, tax, and NI contributions",
        "operationId": "ESSPayslipController_getYearToDateSummary",
        "parameters": [
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for summary (defaults to current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Year-to-date summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/YearToDateSummaryDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get year-to-date summary",
        "tags": [
          "ESS - Payslips"
        ]
      }
    },
    "/ess/payslips/{id}/download": {
      "get": {
        "description": "Download a specific payslip as a PDF document. Only accessible by the payslip owner.",
        "operationId": "ESSPayslipController_downloadPayslip",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Payslip ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payslip PDF downloaded successfully",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "403": {
            "description": "Access denied - payslip does not belong to authenticated employee"
          },
          "404": {
            "description": "Payslip not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Download payslip PDF",
        "tags": [
          "ESS - Payslips"
        ]
      }
    },
    "/ess/leave-requests": {
      "post": {
        "description": "Submit a new leave request. The system will check leave balance and conflicts before creating the request.",
        "operationId": "ESSLeaveRequestController_submitLeaveRequest",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Leave request details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeaveRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Leave request submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data (insufficient balance, conflicts, etc.)"
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "404": {
            "description": "Leave type not found or employee ESS not enabled"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Submit leave request",
        "tags": [
          "ESS - Leave Requests"
        ]
      },
      "get": {
        "description": "Retrieve all leave requests for the authenticated employee, ordered by most recent first",
        "operationId": "ESSLeaveRequestController_getMyLeaveRequests",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Leave requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaveRequestResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee leave requests",
        "tags": [
          "ESS - Leave Requests"
        ]
      }
    },
    "/ess/leave-requests/balance": {
      "get": {
        "description": "Get the authenticated employee's leave balance for all leave types, including used, remaining, and pending days",
        "operationId": "ESSLeaveRequestController_getLeaveBalance",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Leave balance retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaveBalanceDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get leave balance",
        "tags": [
          "ESS - Leave Requests"
        ]
      }
    },
    "/ess/leave-requests/{id}": {
      "delete": {
        "description": "Cancel a pending leave request. Only requests with PENDING status can be cancelled.",
        "operationId": "ESSLeaveRequestController_cancelLeaveRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Leave request ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave request cancelled successfully"
          },
          "400": {
            "description": "Cannot cancel leave request (not in pending status)"
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Cancel leave request",
        "tags": [
          "ESS - Leave Requests"
        ]
      }
    },
    "/ess/documents/upload": {
      "post": {
        "description": "Upload a personal document such as passport, visa, certificate, etc. Maximum file size is 10MB.",
        "operationId": "ESSDocumentController_uploadDocument",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Document upload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Document file (PDF, JPG, PNG)"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "passport",
                      "visa",
                      "certificate",
                      "contract",
                      "other"
                    ],
                    "description": "Document type"
                  },
                  "name": {
                    "type": "string",
                    "description": "Document name"
                  },
                  "expiryDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Document expiry date (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDocumentDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or document data"
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "413": {
            "description": "File size exceeds maximum allowed (10MB)"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Upload employee document",
        "tags": [
          "ESS - Documents"
        ]
      }
    },
    "/ess/documents": {
      "get": {
        "description": "Retrieve all documents uploaded by the authenticated employee",
        "operationId": "ESSDocumentController_getMyDocuments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Documents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeDocumentDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee documents",
        "tags": [
          "ESS - Documents"
        ]
      }
    },
    "/ess/documents/{id}": {
      "delete": {
        "description": "Delete a document uploaded by the authenticated employee",
        "operationId": "ESSDocumentController_deleteDocument",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Document ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document deleted successfully"
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "404": {
            "description": "Document not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete employee document",
        "tags": [
          "ESS - Documents"
        ]
      }
    },
    "/recruitment/job-postings": {
      "post": {
        "operationId": "JobPostingController_createJobPosting",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateJobPostingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job posting created successfully"
          },
          "400": {
            "description": "Invalid request data"
          },
          "404": {
            "description": "Related resource not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      },
      "get": {
        "operationId": "JobPostingController_getJobPostings",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by posting status",
            "schema": {
              "enum": [
                "DRAFT",
                "ACTIVE",
                "PAUSED",
                "CLOSED",
                "CANCELLED",
                "ARCHIVED"
              ],
              "type": "string"
            }
          },
          {
            "name": "hiring_manager_id",
            "required": false,
            "in": "query",
            "description": "Filter by hiring manager ID",
            "schema": {
              "example": "uuid",
              "type": "string"
            }
          },
          {
            "name": "department_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid",
              "type": "string"
            }
          },
          {
            "name": "location",
            "required": false,
            "in": "query",
            "description": "Filter by location (partial match)",
            "schema": {
              "example": "London",
              "type": "string"
            }
          },
          {
            "name": "remote_work_allowed",
            "required": false,
            "in": "query",
            "description": "Filter by remote work availability",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "internal_only",
            "required": false,
            "in": "query",
            "description": "Filter for internal only postings",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of items to skip",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job postings retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get list of job postings with filters",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/job-postings/{id}": {
      "put": {
        "operationId": "JobPostingController_updateJobPosting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobPostingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job posting updated successfully"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an existing job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      },
      "get": {
        "operationId": "JobPostingController_getJobPostingById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job posting retrieved successfully"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific job posting by ID",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/job-postings/{id}/publish": {
      "post": {
        "operationId": "JobPostingController_publishJobPosting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job posting published successfully"
          },
          "400": {
            "description": "Only draft job postings can be published"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Publish a draft job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/job-postings/{id}/close": {
      "post": {
        "operationId": "JobPostingController_closeJobPosting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job posting closed successfully"
          },
          "400": {
            "description": "Only active job postings can be closed"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Close an active job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/job-postings/{id}/reopen": {
      "post": {
        "operationId": "JobPostingController_reopenJobPosting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job posting reopened successfully"
          },
          "400": {
            "description": "Only closed job postings can be reopened"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reopen a closed job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/job-postings/{id}/archive": {
      "post": {
        "operationId": "JobPostingController_archiveJobPosting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job posting archived successfully"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Archive a job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/candidates": {
      "post": {
        "operationId": "CandidateController_createCandidate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCandidateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Candidate created successfully"
          },
          "400": {
            "description": "Candidate with this email already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new candidate profile",
        "tags": [
          "Recruitment - Candidates"
        ]
      },
      "get": {
        "operationId": "CandidateController_getCandidates",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by candidate status",
            "schema": {
              "enum": [
                "APPLIED",
                "SCREENING",
                "INTERVIEW_SCHEDULED",
                "INTERVIEWED",
                "OFFERED",
                "HIRED",
                "REJECTED",
                "WITHDRAWN"
              ],
              "type": "string"
            }
          },
          {
            "name": "source",
            "required": false,
            "in": "query",
            "description": "Filter by candidate source",
            "schema": {
              "type": "string",
              "enum": [
                "WEBSITE",
                "REFERRAL",
                "LINKEDIN",
                "AGENCY",
                "JOB_BOARD",
                "DIRECT_APPLICATION",
                "OTHER"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name, email, or current employer",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "right_to_work_uk",
            "required": false,
            "in": "query",
            "description": "Filter by UK right to work status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "visa_required",
            "required": false,
            "in": "query",
            "description": "Filter by visa requirement",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of items to skip",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get list of candidates with filters",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/candidates/{id}": {
      "get": {
        "operationId": "CandidateController_getCandidateById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate retrieved successfully"
          },
          "404": {
            "description": "Candidate not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific candidate by ID",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/candidates/{candidateId}/applications": {
      "post": {
        "operationId": "CandidateController_submitApplication",
        "parameters": [
          {
            "name": "candidateId",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Application submitted successfully"
          },
          "400": {
            "description": "Application already exists or invalid data"
          },
          "404": {
            "description": "Candidate or job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit a job application for a candidate",
        "tags": [
          "Recruitment - Candidates"
        ]
      },
      "get": {
        "operationId": "CandidateController_getCandidateApplications",
        "parameters": [
          {
            "name": "candidateId",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Applications retrieved successfully"
          },
          "404": {
            "description": "Candidate not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all applications for a candidate",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/candidates/{candidateId}/status": {
      "put": {
        "operationId": "CandidateController_updateCandidateStatus",
        "parameters": [
          {
            "name": "candidateId",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate status updated successfully"
          },
          "404": {
            "description": "Candidate not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update candidate status",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/candidates/{candidateId}/interviews": {
      "get": {
        "operationId": "CandidateController_getCandidateInterviews",
        "parameters": [
          {
            "name": "candidateId",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Interviews retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all interviews for a candidate",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/candidates/{candidateId}/offers": {
      "get": {
        "operationId": "CandidateController_getCandidateOffers",
        "parameters": [
          {
            "name": "candidateId",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offers retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all offers for a candidate",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/interviews": {
      "post": {
        "operationId": "InterviewController_scheduleInterview",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInterviewDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Interview scheduled successfully"
          },
          "400": {
            "description": "Invalid request data or interviewers not found"
          },
          "404": {
            "description": "Application not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Schedule a new interview",
        "tags": [
          "Recruitment - Interviews"
        ]
      },
      "get": {
        "operationId": "InterviewController_getInterviews",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by interview status",
            "schema": {
              "enum": [
                "SCHEDULED",
                "COMPLETED",
                "CANCELLED",
                "NO_SHOW",
                "RESCHEDULED"
              ],
              "type": "string"
            }
          },
          {
            "name": "date",
            "required": false,
            "in": "query",
            "description": "Filter by interview date (YYYY-MM-DD)",
            "schema": {
              "format": "date",
              "example": "2024-01-15",
              "type": "string"
            }
          },
          {
            "name": "interviewer_id",
            "required": false,
            "in": "query",
            "description": "Filter by interviewer ID",
            "schema": {
              "example": "uuid",
              "type": "string"
            }
          },
          {
            "name": "candidate_id",
            "required": false,
            "in": "query",
            "description": "Filter by candidate ID",
            "schema": {
              "example": "uuid",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of items to skip",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of interviews retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get list of interviews with filters",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/my-interviews": {
      "get": {
        "operationId": "InterviewController_getMyInterviews",
        "parameters": [
          {
            "name": "date",
            "required": false,
            "in": "query",
            "description": "Filter by interview date (YYYY-MM-DD)",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by interview status",
            "schema": {
              "enum": [
                "SCHEDULED",
                "COMPLETED",
                "CANCELLED",
                "NO_SHOW",
                "RESCHEDULED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of assigned interviews retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get interviews assigned to the current user",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/{id}/feedback": {
      "post": {
        "operationId": "InterviewController_submitFeedback",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Interview ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitInterviewFeedbackDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback submitted successfully"
          },
          "400": {
            "description": "Feedback already submitted or invalid data"
          },
          "403": {
            "description": "You are not assigned to this interview"
          },
          "404": {
            "description": "Interview not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit interview feedback",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/{id}/reschedule": {
      "put": {
        "operationId": "InterviewController_rescheduleInterview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Interview ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Interview rescheduled successfully"
          },
          "404": {
            "description": "Interview not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reschedule an interview",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/{id}/cancel": {
      "put": {
        "operationId": "InterviewController_cancelInterview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Interview ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Interview cancelled successfully"
          },
          "404": {
            "description": "Interview not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel an interview",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/upcoming": {
      "get": {
        "operationId": "InterviewController_getUpcomingInterviews",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of upcoming interviews retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get upcoming interviews for the next 7 days",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/feedback-pending": {
      "get": {
        "operationId": "InterviewController_getInterviewsPendingFeedback",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of interviews pending feedback retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get interviews pending feedback from current user",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/offers": {
      "post": {
        "operationId": "OfferController_createOffer",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOfferDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Offer created successfully"
          },
          "400": {
            "description": "Active offer already exists for this application"
          },
          "404": {
            "description": "Application not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new job offer",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/send": {
      "post": {
        "operationId": "OfferController_sendOffer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offer sent successfully"
          },
          "400": {
            "description": "Only draft offers can be sent"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send a draft offer to candidate",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/accept": {
      "post": {
        "operationId": "OfferController_acceptOffer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptOfferDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Offer accepted successfully"
          },
          "400": {
            "description": "Only sent offers can be accepted"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Accept a job offer",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/decline": {
      "post": {
        "operationId": "OfferController_declineOffer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineOfferDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Offer declined successfully"
          },
          "400": {
            "description": "Only sent offers can be declined"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Decline a job offer",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/withdraw": {
      "post": {
        "operationId": "OfferController_withdrawOffer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offer withdrawn successfully"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Withdraw a job offer",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/extend": {
      "put": {
        "operationId": "OfferController_extendOfferExpiry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offer expiry extended successfully"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Extend offer expiry date",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/negotiate": {
      "put": {
        "operationId": "OfferController_negotiateOffer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offer updated successfully"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update offer terms during negotiation",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/pending": {
      "get": {
        "operationId": "OfferController_getPendingOffers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of pending offers retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all pending offers",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/expiring-soon": {
      "get": {
        "operationId": "OfferController_getExpiringOffers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of expiring offers retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get offers expiring in next 7 days",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/performance/cycles": {
      "post": {
        "operationId": "PerformanceCycleController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePerformanceCycleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Performance cycle created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new performance cycle",
        "tags": [
          "Performance Cycles"
        ]
      },
      "get": {
        "operationId": "PerformanceCycleController_findAll",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "PLANNING",
                "ACTIVE",
                "REVIEW_PERIOD",
                "CALIBRATION",
                "COMPLETED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "cycle_type",
            "required": false,
            "in": "query",
            "description": "Filter by cycle type",
            "schema": {
              "type": "string",
              "enum": [
                "ANNUAL",
                "SEMI_ANNUAL",
                "QUARTERLY",
                "MONTHLY"
              ]
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Filter by year",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of performance cycles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all performance cycles",
        "tags": [
          "Performance Cycles"
        ]
      }
    },
    "/performance/cycles/current": {
      "get": {
        "operationId": "PerformanceCycleController_getCurrentCycle",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current active performance cycle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current active performance cycle",
        "tags": [
          "Performance Cycles"
        ]
      }
    },
    "/performance/cycles/{id}": {
      "get": {
        "operationId": "PerformanceCycleController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance cycle details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get performance cycle by ID",
        "tags": [
          "Performance Cycles"
        ]
      },
      "patch": {
        "operationId": "PerformanceCycleController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePerformanceCycleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance cycle updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update performance cycle",
        "tags": [
          "Performance Cycles"
        ]
      },
      "delete": {
        "operationId": "PerformanceCycleController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance cycle cancelled successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete (cancel) performance cycle",
        "tags": [
          "Performance Cycles"
        ]
      }
    },
    "/performance/cycles/{id}/activate": {
      "post": {
        "operationId": "PerformanceCycleController_activate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance cycle activated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Activate a performance cycle",
        "tags": [
          "Performance Cycles"
        ]
      }
    },
    "/performance/goals/employee/{employeeId}": {
      "post": {
        "operationId": "PerformanceGoalController_create",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePerformanceGoalDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Performance goal created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new performance goal for an employee",
        "tags": [
          "Performance Goals"
        ]
      }
    },
    "/performance/goals": {
      "get": {
        "operationId": "PerformanceGoalController_findAll",
        "parameters": [
          {
            "name": "cycle_id",
            "required": false,
            "in": "query",
            "description": "Filter by cycle ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "ACTIVE",
                "IN_PROGRESS",
                "COMPLETED",
                "CANCELLED",
                "OVERDUE"
              ]
            }
          },
          {
            "name": "goal_category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string",
              "enum": [
                "STRATEGIC",
                "OPERATIONAL",
                "PERSONAL_DEVELOPMENT",
                "BEHAVIORAL"
              ]
            }
          },
          {
            "name": "priority",
            "required": false,
            "in": "query",
            "description": "Filter by priority",
            "schema": {
              "type": "string",
              "enum": [
                "HIGH",
                "MEDIUM",
                "LOW"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of performance goals",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all performance goals",
        "tags": [
          "Performance Goals"
        ]
      }
    },
    "/performance/goals/employee/{employeeId}/cycle/{cycleId}/summary": {
      "get": {
        "operationId": "PerformanceGoalController_getEmployeeGoalSummary",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee goal summary"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get employee goal summary for a cycle",
        "tags": [
          "Performance Goals"
        ]
      }
    },
    "/performance/goals/{id}": {
      "get": {
        "operationId": "PerformanceGoalController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance goal details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get performance goal by ID",
        "tags": [
          "Performance Goals"
        ]
      },
      "patch": {
        "operationId": "PerformanceGoalController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePerformanceGoalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance goal updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update performance goal",
        "tags": [
          "Performance Goals"
        ]
      },
      "delete": {
        "operationId": "PerformanceGoalController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance goal cancelled successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete (cancel) performance goal",
        "tags": [
          "Performance Goals"
        ]
      }
    },
    "/performance/goals/{id}/progress": {
      "put": {
        "operationId": "PerformanceGoalController_updateProgress",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoalUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Goal progress updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update goal progress",
        "tags": [
          "Performance Goals"
        ]
      }
    },
    "/performance/goals/employee/{employeeId}/cycle/{cycleId}/activate": {
      "post": {
        "operationId": "PerformanceGoalController_activateGoals",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Goals activated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Activate all draft goals for an employee in a cycle",
        "tags": [
          "Performance Goals"
        ]
      }
    },
    "/performance/feedback": {
      "post": {
        "operationId": "ContinuousFeedbackController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContinuousFeedbackDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContinuousFeedbackResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create continuous feedback",
        "tags": [
          "Continuous Feedback"
        ]
      },
      "get": {
        "operationId": "ContinuousFeedbackController_findAll",
        "parameters": [
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feedback_giver_id",
            "required": false,
            "in": "query",
            "description": "Filter by feedback giver ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feedback_type",
            "required": false,
            "in": "query",
            "description": "Filter by feedback type",
            "schema": {
              "type": "string",
              "enum": [
                "PRAISE",
                "CONSTRUCTIVE",
                "COACHING",
                "GOAL_PROGRESS"
              ]
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "required": false,
            "in": "query",
            "description": "Filter by visibility",
            "schema": {
              "type": "string",
              "enum": [
                "PRIVATE",
                "MANAGER",
                "TEAM",
                "PUBLIC"
              ]
            }
          },
          {
            "name": "acknowledged",
            "required": false,
            "in": "query",
            "description": "Filter by acknowledged status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_anonymous",
            "required": false,
            "in": "query",
            "description": "Include anonymous feedback",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of continuous feedback",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContinuousFeedbackResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all continuous feedback",
        "tags": [
          "Continuous Feedback"
        ]
      }
    },
    "/performance/feedback/employee/{employeeId}/summary": {
      "get": {
        "operationId": "ContinuousFeedbackController_getFeedbackSummary",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee feedback summary"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get feedback summary for an employee",
        "tags": [
          "Continuous Feedback"
        ]
      }
    },
    "/performance/feedback/{id}": {
      "get": {
        "operationId": "ContinuousFeedbackController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feedback details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContinuousFeedbackResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get continuous feedback by ID",
        "tags": [
          "Continuous Feedback"
        ]
      },
      "delete": {
        "operationId": "ContinuousFeedbackController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feedback deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete continuous feedback",
        "tags": [
          "Continuous Feedback"
        ]
      }
    },
    "/performance/feedback/{id}/acknowledge": {
      "post": {
        "operationId": "ContinuousFeedbackController_acknowledge",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcknowledgeFeedbackDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback acknowledged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContinuousFeedbackResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Acknowledge feedback",
        "tags": [
          "Continuous Feedback"
        ]
      }
    },
    "/performance/reviews/employee/{employeeId}": {
      "post": {
        "operationId": "PerformanceReviewController_create",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePerformanceReviewDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Performance review created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create performance review for an employee",
        "tags": [
          "Performance Reviews"
        ]
      }
    },
    "/performance/reviews": {
      "get": {
        "operationId": "PerformanceReviewController_findAll",
        "parameters": [
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycle_id",
            "required": false,
            "in": "query",
            "description": "Filter by cycle ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewer_id",
            "required": false,
            "in": "query",
            "description": "Filter by reviewer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "review_type",
            "required": false,
            "in": "query",
            "description": "Filter by review type",
            "schema": {
              "type": "string",
              "enum": [
                "SELF",
                "MANAGER",
                "PEER",
                "SUBORDINATE",
                "CUSTOMER"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "IN_PROGRESS",
                "SUBMITTED",
                "COMPLETED",
                "APPROVED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of performance reviews",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all performance reviews",
        "tags": [
          "Performance Reviews"
        ]
      }
    },
    "/performance/reviews/employee/{employeeId}/cycle/{cycleId}/summary": {
      "get": {
        "operationId": "PerformanceReviewController_getReviewSummary",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review summary"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get review summary for an employee in a cycle",
        "tags": [
          "Performance Reviews"
        ]
      }
    },
    "/performance/reviews/{id}": {
      "get": {
        "operationId": "PerformanceReviewController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance review details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get performance review by ID",
        "tags": [
          "Performance Reviews"
        ]
      },
      "put": {
        "operationId": "PerformanceReviewController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePerformanceReviewDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance review updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update performance review",
        "tags": [
          "Performance Reviews"
        ]
      }
    },
    "/performance/reviews/{id}/responses": {
      "post": {
        "operationId": "PerformanceReviewController_submitResponses",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitReviewResponsesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review responses submitted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit review responses",
        "tags": [
          "Performance Reviews"
        ]
      }
    },
    "/performance/reviews/{id}/submit": {
      "post": {
        "operationId": "PerformanceReviewController_submitReview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance review submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit performance review for approval",
        "tags": [
          "Performance Reviews"
        ]
      }
    },
    "/performance/reviews/{id}/approve": {
      "post": {
        "operationId": "PerformanceReviewController_approveReview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance review approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve performance review",
        "tags": [
          "Performance Reviews"
        ]
      }
    },
    "/performance/360-feedback/sessions": {
      "post": {
        "operationId": "Feedback360Controller_createSession",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeedback360SessionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "360 feedback session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feedback360SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new 360 feedback session",
        "tags": [
          "360 Feedback"
        ]
      },
      "get": {
        "operationId": "Feedback360Controller_findAllSessions",
        "parameters": [
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycle_id",
            "required": false,
            "in": "query",
            "description": "Filter by cycle ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "SETUP",
                "NOMINATION",
                "FEEDBACK_COLLECTION",
                "COMPLETED"
              ]
            }
          },
          {
            "name": "as_reviewer",
            "required": false,
            "in": "query",
            "description": "Include sessions where user is a reviewer",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of 360 feedback sessions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feedback360SessionResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all 360 feedback sessions",
        "tags": [
          "360 Feedback"
        ]
      }
    },
    "/performance/360-feedback/sessions/{id}": {
      "get": {
        "operationId": "Feedback360Controller_findOneSession",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "360 feedback session details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feedback360SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get 360 feedback session by ID",
        "tags": [
          "360 Feedback"
        ]
      },
      "put": {
        "operationId": "Feedback360Controller_updateSession",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeedback360SessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "360 feedback session updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feedback360SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update 360 feedback session",
        "tags": [
          "360 Feedback"
        ]
      }
    },
    "/performance/360-feedback/sessions/{id}/activate": {
      "post": {
        "operationId": "Feedback360Controller_activateSession",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "360 feedback session activated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feedback360SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Activate a 360 feedback session",
        "tags": [
          "360 Feedback"
        ]
      }
    },
    "/performance/360-feedback/sessions/{id}/submit-feedback": {
      "post": {
        "operationId": "Feedback360Controller_submitFeedback",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitFeedback360ResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback submitted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit feedback for a 360 feedback session",
        "tags": [
          "360 Feedback"
        ]
      }
    },
    "/performance/360-feedback/sessions/{id}/summary": {
      "get": {
        "operationId": "Feedback360Controller_getSessionSummary",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "360 feedback session summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feedback360SummaryDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get 360 feedback session summary",
        "tags": [
          "360 Feedback"
        ]
      }
    },
    "/performance/improvement-plans": {
      "post": {
        "operationId": "PerformanceImprovementPlanController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePerformanceImprovementPlanDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Performance Improvement Plan created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new Performance Improvement Plan",
        "tags": [
          "Performance Improvement Plans"
        ]
      },
      "get": {
        "operationId": "PerformanceImprovementPlanController_findAll",
        "parameters": [
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "COMPLETED",
                "EXTENDED",
                "TERMINATED"
              ]
            }
          },
          {
            "name": "include_completed",
            "required": false,
            "in": "query",
            "description": "Include completed plans",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of Performance Improvement Plans",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all Performance Improvement Plans",
        "tags": [
          "Performance Improvement Plans"
        ]
      }
    },
    "/performance/improvement-plans/employee/{employeeId}/summary": {
      "get": {
        "operationId": "PerformanceImprovementPlanController_getPIPSummary",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee PIP summary"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get PIP summary for an employee",
        "tags": [
          "Performance Improvement Plans"
        ]
      }
    },
    "/performance/improvement-plans/{id}": {
      "get": {
        "operationId": "PerformanceImprovementPlanController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance Improvement Plan details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Performance Improvement Plan by ID",
        "tags": [
          "Performance Improvement Plans"
        ]
      },
      "put": {
        "operationId": "PerformanceImprovementPlanController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePerformanceImprovementPlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance Improvement Plan updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update Performance Improvement Plan",
        "tags": [
          "Performance Improvement Plans"
        ]
      }
    },
    "/performance/improvement-plans/{id}/acknowledge": {
      "post": {
        "operationId": "PerformanceImprovementPlanController_acknowledgeByEmployee",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PIP acknowledged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Employee acknowledges the PIP",
        "tags": [
          "Performance Improvement Plans"
        ]
      }
    },
    "/performance/improvement-plans/{id}/complete": {
      "post": {
        "operationId": "PerformanceImprovementPlanController_completePIP",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PIP completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Complete a Performance Improvement Plan",
        "tags": [
          "Performance Improvement Plans"
        ]
      }
    }
  },
  "info": {
    "title": "PrimeForge HR API",
    "description": "\nThe PrimeForge HR Service provides comprehensive human resources management capabilities for the PrimeForge platform.\n\n## Features\n- Employee management\n- Organization structure management\n- HR rates and payroll calculations\n- Department and job management\n- People administration\n- Company hierarchy management\n\n## Authentication\nMost endpoints require JWT authentication. Include the access token in the Authorization header:\n`Authorization: Bearer <your_access_token>`\n\n## Rate Limiting\n- General endpoints: 100 requests per minute per user\n- Admin endpoints: 50 requests per minute per admin user\n\n## Multi-tenancy\nThis service supports multi-tenancy. The tenant context is automatically extracted from the JWT token.\n    ",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Organization Management",
      "description": "Company, department, and job management"
    },
    {
      "name": "People Administration",
      "description": "Employee and assignment management"
    },
    {
      "name": "HR Rates",
      "description": "Rate groups and rate entries management"
    },
    {
      "name": "Health",
      "description": "Health check and monitoring endpoints"
    }
  ],
  "servers": [
    {
      "url": "http://0.0.0.0:4030",
      "description": "Development Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "JWT-auth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Enter JWT token",
        "in": "header"
      }
    },
    "schemas": {
      "AuditLogResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_email": {
            "type": "string"
          },
          "action": {
            "type": "string",
            "enum": [
              "CREATE",
              "UPDATE",
              "DELETE",
              "VIEW",
              "EXPORT",
              "LOGIN",
              "LOGOUT",
              "APPROVE",
              "REJECT",
              "ASSIGN",
              "UNASSIGN"
            ]
          },
          "resource_type": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "resource_name": {
            "type": "string"
          },
          "old_values": {
            "type": "object"
          },
          "new_values": {
            "type": "object"
          },
          "changes": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "error_message": {
            "type": "string"
          },
          "performed_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "user_id",
          "user_email",
          "action",
          "resource_type",
          "success",
          "performed_at"
        ]
      },
      "ReportSortDto": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "example": "created_at"
          },
          "order": {
            "type": "string",
            "example": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          }
        },
        "required": [
          "field",
          "order"
        ]
      },
      "CompanyInfoDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "logo": {
            "type": "string",
            "example": "https://example.com/logo.png"
          },
          "address": {
            "type": "string",
            "example": "123 Business St, London, UK"
          },
          "registration_number": {
            "type": "string",
            "example": "12345678"
          },
          "vat_number": {
            "type": "string",
            "example": "GB123456789"
          }
        },
        "required": [
          "name"
        ]
      },
      "GenerateReportDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "employee_list",
            "enum": [
              "employee_list",
              "employee_detail",
              "payroll_summary",
              "payroll_detail",
              "leave_summary",
              "leave_balance",
              "attendance_report",
              "department_summary",
              "audit_log",
              "compliance_report",
              "performance_review",
              "headcount_report",
              "turnover_report",
              "training_report"
            ],
            "description": "Type of report to generate"
          },
          "format": {
            "type": "string",
            "example": "pdf",
            "enum": [
              "pdf",
              "excel",
              "csv",
              "json"
            ],
            "description": "Output format for the report"
          },
          "title": {
            "type": "string",
            "example": "Monthly Employee Report"
          },
          "description": {
            "type": "string",
            "example": "Employee report for December 2024"
          },
          "filters": {
            "type": "object",
            "example": {
              "department_id": "uuid",
              "status": "active"
            },
            "description": "Filters to apply to the report data"
          },
          "sort": {
            "$ref": "#/components/schemas/ReportSortDto"
          },
          "includeCharts": {
            "type": "boolean",
            "example": true
          },
          "includeSummary": {
            "type": "boolean",
            "example": true
          },
          "includeTimestamp": {
            "type": "boolean",
            "example": true
          },
          "companyInfo": {
            "$ref": "#/components/schemas/CompanyInfoDto"
          }
        },
        "required": [
          "type",
          "format"
        ]
      },
      "CreateReportScheduleDto": {
        "type": "object",
        "properties": {
          "report_type": {
            "type": "string",
            "example": "payroll_summary",
            "enum": [
              "employee_list",
              "employee_detail",
              "payroll_summary",
              "payroll_detail",
              "leave_summary",
              "leave_balance",
              "attendance_report",
              "department_summary",
              "audit_log",
              "compliance_report",
              "performance_review",
              "headcount_report",
              "turnover_report",
              "training_report"
            ]
          },
          "report_options": {
            "$ref": "#/components/schemas/GenerateReportDto"
          },
          "schedule": {
            "type": "string",
            "example": "0 9 * * MON",
            "description": "Cron expression for schedule"
          },
          "recipients": {
            "example": [
              "hr@example.com",
              "manager@example.com"
            ],
            "description": "Email addresses to send the report to",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "report_type",
          "report_options",
          "schedule",
          "recipients"
        ]
      },
      "UpdateReportScheduleDto": {
        "type": "object",
        "properties": {
          "report_options": {
            "$ref": "#/components/schemas/GenerateReportDto"
          },
          "schedule": {
            "type": "string",
            "example": "0 9 * * MON",
            "description": "Cron expression for schedule"
          },
          "recipients": {
            "example": [
              "hr@example.com"
            ],
            "description": "Email addresses to send the report to",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "CreateCompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company name",
            "example": "Acme Corporation Ltd"
          },
          "company_number": {
            "type": "string",
            "description": "Company registration number",
            "example": "12345678"
          },
          "company_type": {
            "type": "string",
            "description": "Company type",
            "enum": [
              "LIMITED",
              "PLC",
              "LLP",
              "SOLE_TRADER",
              "CHARITY"
            ],
            "default": "LIMITED"
          },
          "company_status": {
            "type": "string",
            "description": "Company status",
            "enum": [
              "ACTIVE",
              "DISSOLVED",
              "LIQUIDATION",
              "DORMANT"
            ],
            "default": "ACTIVE"
          },
          "incorporation_date": {
            "type": "string",
            "description": "Incorporation date",
            "example": "2020-01-01"
          },
          "registered_office_address": {
            "type": "string",
            "description": "Registered office address"
          },
          "company_director": {
            "type": "string",
            "description": "Company director name"
          },
          "company_secretary": {
            "type": "string",
            "description": "Company secretary name"
          },
          "shareholders": {
            "type": "object",
            "description": "Shareholders information as JSON"
          },
          "utr_number": {
            "type": "string",
            "description": "UTR number"
          },
          "vat_number": {
            "type": "string",
            "description": "VAT number"
          },
          "paye_reference": {
            "type": "string",
            "description": "PAYE reference"
          },
          "account_office_reference": {
            "type": "string",
            "description": "Account office reference"
          },
          "sic_code": {
            "type": "string",
            "description": "SIC code"
          },
          "website": {
            "type": "string",
            "description": "Company website URL"
          },
          "email": {
            "type": "string",
            "description": "Company email address"
          },
          "phone": {
            "type": "string",
            "description": "Company phone number"
          }
        },
        "required": [
          "name",
          "company_number"
        ]
      },
      "CompanyResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Company ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "name": {
            "type": "string",
            "description": "Company name"
          },
          "company_number": {
            "type": "string",
            "description": "Company registration number"
          },
          "company_type": {
            "type": "string",
            "description": "Company type",
            "enum": [
              "LIMITED",
              "PLC",
              "LLP",
              "SOLE_TRADER",
              "CHARITY"
            ]
          },
          "company_status": {
            "type": "string",
            "description": "Company status",
            "enum": [
              "ACTIVE",
              "DISSOLVED",
              "LIQUIDATION",
              "DORMANT"
            ]
          },
          "incorporation_date": {
            "type": "object",
            "description": "Incorporation date"
          },
          "registered_office_address": {
            "type": "object",
            "description": "Registered office address"
          },
          "company_director": {
            "type": "object",
            "description": "Company director name"
          },
          "company_secretary": {
            "type": "object",
            "description": "Company secretary name"
          },
          "shareholders": {
            "type": "object",
            "description": "Shareholders information"
          },
          "utr_number": {
            "type": "object",
            "description": "UTR number"
          },
          "vat_number": {
            "type": "object",
            "description": "VAT number"
          },
          "paye_reference": {
            "type": "object",
            "description": "PAYE reference"
          },
          "account_office_reference": {
            "type": "object",
            "description": "Account office reference"
          },
          "sic_code": {
            "type": "object",
            "description": "SIC code"
          },
          "website": {
            "type": "object",
            "description": "Company website URL"
          },
          "email": {
            "type": "object",
            "description": "Company email address"
          },
          "phone": {
            "type": "object",
            "description": "Company phone number"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "company_number",
          "company_type",
          "company_status",
          "updated_at",
          "created_at"
        ]
      },
      "UpdateCompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company name"
          },
          "company_type": {
            "type": "string",
            "description": "Company type",
            "enum": [
              "LIMITED",
              "PLC",
              "LLP",
              "SOLE_TRADER",
              "CHARITY"
            ]
          },
          "company_status": {
            "type": "string",
            "description": "Company status",
            "enum": [
              "ACTIVE",
              "DISSOLVED",
              "LIQUIDATION",
              "DORMANT"
            ]
          },
          "incorporation_date": {
            "type": "string",
            "description": "Incorporation date"
          },
          "registered_office_address": {
            "type": "string",
            "description": "Registered office address"
          },
          "company_director": {
            "type": "string",
            "description": "Company director name"
          },
          "company_secretary": {
            "type": "string",
            "description": "Company secretary name"
          },
          "shareholders": {
            "type": "object",
            "description": "Shareholders information as JSON"
          },
          "utr_number": {
            "type": "string",
            "description": "UTR number"
          },
          "vat_number": {
            "type": "string",
            "description": "VAT number"
          },
          "paye_reference": {
            "type": "string",
            "description": "PAYE reference"
          },
          "account_office_reference": {
            "type": "string",
            "description": "Account office reference"
          },
          "sic_code": {
            "type": "string",
            "description": "SIC code"
          },
          "website": {
            "type": "string",
            "description": "Company website URL"
          },
          "email": {
            "type": "string",
            "description": "Company email address"
          },
          "phone": {
            "type": "string",
            "description": "Company phone number"
          }
        }
      },
      "CreateDepartmentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Department name",
            "example": "Software Development"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "format": "uuid"
          },
          "department_function": {
            "type": "string",
            "description": "Department function",
            "enum": [
              "EXECUTIVE_MANAGEMENT",
              "HR",
              "FINANCE",
              "ACCOUNTING",
              "PAYROLL",
              "LEGAL",
              "COMPLIANCE",
              "RISK_MANAGEMENT",
              "SALES",
              "BUSINESS_DEVELOPMENT",
              "MARKETING",
              "DIGITAL_MARKETING",
              "PRODUCT_MANAGEMENT",
              "OPERATIONS",
              "CUSTOMER_SUPPORT",
              "CUSTOMER_SUCCESS",
              "PUBLIC_RELATIONS",
              "R_D",
              "IT",
              "SOFTWARE_DEVELOPMENT",
              "DATA_SCIENCE",
              "CYBERSECURITY",
              "TECHNICAL_SUPPORT",
              "PROCUREMENT",
              "SUPPLY_CHAIN_MANAGEMENT",
              "LOGISTICS",
              "WAREHOUSE",
              "MANUFACTURING",
              "QUALITY_ASSURANCE",
              "HEALTH_AND_SAFETY",
              "FACILITIES_MANAGEMENT",
              "TRAINING_AND_DEVELOPMENT",
              "CORPORATE_STRATEGY",
              "INVESTOR_RELATIONS",
              "CORPORATE_SOCIAL_RESPONSIBILITY",
              "OTHER"
            ],
            "example": "SOFTWARE_DEVELOPMENT"
          },
          "head_of_department_id": {
            "type": "string",
            "description": "Head of department employee ID",
            "format": "uuid"
          },
          "parent_department_id": {
            "type": "string",
            "description": "Parent department ID",
            "format": "uuid"
          }
        },
        "required": [
          "name",
          "company_id",
          "department_function"
        ]
      },
      "DepartmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Department ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "name": {
            "type": "string",
            "description": "Department name"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID"
          },
          "department_function": {
            "type": "string",
            "description": "Department function",
            "enum": [
              "EXECUTIVE_MANAGEMENT",
              "HR",
              "FINANCE",
              "ACCOUNTING",
              "PAYROLL",
              "LEGAL",
              "COMPLIANCE",
              "RISK_MANAGEMENT",
              "SALES",
              "BUSINESS_DEVELOPMENT",
              "MARKETING",
              "DIGITAL_MARKETING",
              "PRODUCT_MANAGEMENT",
              "OPERATIONS",
              "CUSTOMER_SUPPORT",
              "CUSTOMER_SUCCESS",
              "PUBLIC_RELATIONS",
              "R_D",
              "IT",
              "SOFTWARE_DEVELOPMENT",
              "DATA_SCIENCE",
              "CYBERSECURITY",
              "TECHNICAL_SUPPORT",
              "PROCUREMENT",
              "SUPPLY_CHAIN_MANAGEMENT",
              "LOGISTICS",
              "WAREHOUSE",
              "MANUFACTURING",
              "QUALITY_ASSURANCE",
              "HEALTH_AND_SAFETY",
              "FACILITIES_MANAGEMENT",
              "TRAINING_AND_DEVELOPMENT",
              "CORPORATE_STRATEGY",
              "INVESTOR_RELATIONS",
              "CORPORATE_SOCIAL_RESPONSIBILITY",
              "OTHER"
            ]
          },
          "head_of_department_id": {
            "type": "object",
            "description": "Head of department employee ID"
          },
          "parent_department_id": {
            "type": "object",
            "description": "Parent department ID"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "company_id",
          "department_function",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateDepartmentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Department name"
          },
          "department_function": {
            "type": "string",
            "description": "Department function",
            "enum": [
              "EXECUTIVE_MANAGEMENT",
              "HR",
              "FINANCE",
              "ACCOUNTING",
              "PAYROLL",
              "LEGAL",
              "COMPLIANCE",
              "RISK_MANAGEMENT",
              "SALES",
              "BUSINESS_DEVELOPMENT",
              "MARKETING",
              "DIGITAL_MARKETING",
              "PRODUCT_MANAGEMENT",
              "OPERATIONS",
              "CUSTOMER_SUPPORT",
              "CUSTOMER_SUCCESS",
              "PUBLIC_RELATIONS",
              "R_D",
              "IT",
              "SOFTWARE_DEVELOPMENT",
              "DATA_SCIENCE",
              "CYBERSECURITY",
              "TECHNICAL_SUPPORT",
              "PROCUREMENT",
              "SUPPLY_CHAIN_MANAGEMENT",
              "LOGISTICS",
              "WAREHOUSE",
              "MANUFACTURING",
              "QUALITY_ASSURANCE",
              "HEALTH_AND_SAFETY",
              "FACILITIES_MANAGEMENT",
              "TRAINING_AND_DEVELOPMENT",
              "CORPORATE_STRATEGY",
              "INVESTOR_RELATIONS",
              "CORPORATE_SOCIAL_RESPONSIBILITY",
              "OTHER"
            ]
          },
          "head_of_department_id": {
            "type": "string",
            "description": "Head of department employee ID",
            "format": "uuid"
          },
          "parent_department_id": {
            "type": "string",
            "description": "Parent department ID",
            "format": "uuid"
          }
        }
      },
      "CreateJobDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Job title"
          },
          "soc_2020_code": {
            "type": "string",
            "description": "SOC 2020 code"
          },
          "employment_type": {
            "type": "string",
            "description": "Employment type",
            "enum": [
              "PERMANENT",
              "TEMPORARY",
              "CONTRACT",
              "INTERNSHIP",
              "PART_TIME",
              "ZERO_HOUR",
              "OTHER"
            ],
            "default": "PERMANENT"
          },
          "job_level": {
            "type": "string",
            "description": "Job level",
            "enum": [
              "ENTRY",
              "JUNIOR",
              "MID",
              "SENIOR",
              "LEAD",
              "MANAGER",
              "DIRECTOR",
              "EXECUTIVE",
              "OTHER"
            ],
            "default": "ENTRY"
          },
          "salary_grade": {
            "type": "string",
            "description": "Salary grade"
          },
          "minimum_salary": {
            "type": "number",
            "description": "Minimum salary",
            "example": 30000,
            "minimum": 0
          },
          "maximum_salary": {
            "type": "number",
            "description": "Maximum salary",
            "example": 60000,
            "minimum": 0
          },
          "salary_currency": {
            "type": "string",
            "description": "Salary currency",
            "default": "GBP"
          },
          "pay_frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ],
            "default": "MONTHLY"
          },
          "work_pattern": {
            "type": "string",
            "description": "Work pattern",
            "enum": [
              "FULL_TIME",
              "PART_TIME",
              "FLEXIBLE",
              "OTHER"
            ],
            "default": "FULL_TIME"
          },
          "work_location": {
            "type": "string",
            "description": "Work location",
            "enum": [
              "ON_SITE",
              "REMOTE",
              "HYBRID",
              "OTHER"
            ],
            "default": "ON_SITE"
          },
          "weekly_hours": {
            "type": "number",
            "description": "Weekly hours",
            "example": 37.5,
            "default": 37.5,
            "minimum": 0
          },
          "job_description": {
            "type": "string",
            "description": "Job description"
          },
          "job_responsibilities": {
            "type": "string",
            "description": "Job responsibilities"
          },
          "job_requirements": {
            "type": "string",
            "description": "Job requirements"
          },
          "job_benefits": {
            "type": "string",
            "description": "Job benefits"
          },
          "job_status": {
            "type": "string",
            "description": "Job status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "FROZEN",
              "DISCONTINUED"
            ],
            "default": "ACTIVE"
          }
        },
        "required": [
          "company_id",
          "name"
        ]
      },
      "JobResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Job ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID"
          },
          "name": {
            "type": "string",
            "description": "Job title"
          },
          "soc_2020_code": {
            "type": "object",
            "description": "SOC 2020 code"
          },
          "employment_type": {
            "type": "string",
            "description": "Employment type",
            "enum": [
              "PERMANENT",
              "TEMPORARY",
              "CONTRACT",
              "INTERNSHIP",
              "PART_TIME",
              "ZERO_HOUR",
              "OTHER"
            ]
          },
          "job_level": {
            "type": "string",
            "description": "Job level",
            "enum": [
              "ENTRY",
              "JUNIOR",
              "MID",
              "SENIOR",
              "LEAD",
              "MANAGER",
              "DIRECTOR",
              "EXECUTIVE",
              "OTHER"
            ]
          },
          "salary_grade": {
            "type": "object",
            "description": "Salary grade"
          },
          "minimum_salary": {
            "type": "object",
            "description": "Minimum salary"
          },
          "maximum_salary": {
            "type": "object",
            "description": "Maximum salary"
          },
          "salary_currency": {
            "type": "object",
            "description": "Salary currency"
          },
          "pay_frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ]
          },
          "work_pattern": {
            "type": "string",
            "description": "Work pattern",
            "enum": [
              "FULL_TIME",
              "PART_TIME",
              "FLEXIBLE",
              "OTHER"
            ]
          },
          "work_location": {
            "type": "string",
            "description": "Work location",
            "enum": [
              "ON_SITE",
              "REMOTE",
              "HYBRID",
              "OTHER"
            ]
          },
          "weekly_hours": {
            "type": "object",
            "description": "Weekly hours"
          },
          "job_description": {
            "type": "object",
            "description": "Job description"
          },
          "job_responsibilities": {
            "type": "object",
            "description": "Job responsibilities"
          },
          "job_requirements": {
            "type": "object",
            "description": "Job requirements"
          },
          "job_benefits": {
            "type": "object",
            "description": "Job benefits"
          },
          "job_status": {
            "type": "string",
            "description": "Job status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "FROZEN",
              "DISCONTINUED"
            ]
          }
        },
        "required": [
          "id",
          "tenant_id",
          "company_id",
          "name",
          "employment_type",
          "job_level",
          "pay_frequency",
          "work_pattern",
          "work_location",
          "job_status"
        ]
      },
      "UpdateJobDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Job title"
          },
          "soc_2020_code": {
            "type": "string",
            "description": "SOC 2020 code"
          },
          "employment_type": {
            "type": "string",
            "description": "Employment type",
            "enum": [
              "PERMANENT",
              "TEMPORARY",
              "CONTRACT",
              "INTERNSHIP",
              "PART_TIME",
              "ZERO_HOUR",
              "OTHER"
            ]
          },
          "job_level": {
            "type": "string",
            "description": "Job level",
            "enum": [
              "ENTRY",
              "JUNIOR",
              "MID",
              "SENIOR",
              "LEAD",
              "MANAGER",
              "DIRECTOR",
              "EXECUTIVE",
              "OTHER"
            ]
          },
          "salary_grade": {
            "type": "string",
            "description": "Salary grade"
          },
          "minimum_salary": {
            "type": "number",
            "description": "Minimum salary",
            "minimum": 0
          },
          "maximum_salary": {
            "type": "number",
            "description": "Maximum salary",
            "minimum": 0
          },
          "salary_currency": {
            "type": "string",
            "description": "Salary currency"
          },
          "pay_frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ]
          },
          "work_pattern": {
            "type": "string",
            "description": "Work pattern",
            "enum": [
              "FULL_TIME",
              "PART_TIME",
              "FLEXIBLE",
              "OTHER"
            ]
          },
          "work_location": {
            "type": "string",
            "description": "Work location",
            "enum": [
              "ON_SITE",
              "REMOTE",
              "HYBRID",
              "OTHER"
            ]
          },
          "weekly_hours": {
            "type": "number",
            "description": "Weekly hours",
            "minimum": 0
          },
          "job_description": {
            "type": "string",
            "description": "Job description"
          },
          "job_responsibilities": {
            "type": "string",
            "description": "Job responsibilities"
          },
          "job_requirements": {
            "type": "string",
            "description": "Job requirements"
          },
          "job_benefits": {
            "type": "string",
            "description": "Job benefits"
          },
          "job_status": {
            "type": "string",
            "description": "Job status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "FROZEN",
              "DISCONTINUED"
            ]
          }
        }
      },
      "CreateEmployeeDto": {
        "type": "object",
        "properties": {
          "employee_no": {
            "type": "string",
            "description": "Employee number",
            "example": "EMP001"
          },
          "first_name": {
            "type": "string",
            "description": "First name"
          },
          "last_name": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "national_insurance_no": {
            "type": "string",
            "description": "National Insurance number"
          },
          "address": {
            "type": "string",
            "description": "Address"
          },
          "hire_date": {
            "type": "string",
            "description": "Hire date",
            "example": "2024-01-01"
          },
          "title": {
            "type": "string",
            "description": "Title (Mr/Mrs/Dr/etc)"
          },
          "preferred_name": {
            "type": "string",
            "description": "Preferred name"
          },
          "avatar": {
            "type": "string",
            "description": "Avatar URL"
          },
          "phone": {
            "type": "string",
            "description": "Phone number"
          },
          "dob": {
            "type": "string",
            "description": "Date of birth",
            "example": "1990-01-01"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "OTHER",
              "PREFER_NOT_TO_SAY"
            ]
          },
          "right_to_work_status": {
            "type": "string",
            "enum": [
              "VERIFIED",
              "PENDING",
              "EXPIRED",
              "FAILED",
              "NOT_PROVIDED"
            ]
          },
          "employment_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PROBATION",
              "LEAVE_PAID",
              "LEAVE_UNPAID",
              "SUSPENDED",
              "NOTICE_PERIOD",
              "RESIGNED",
              "TERMINATED",
              "RETIRED",
              "CONTRACT_ENDED",
              "INACTIVE"
            ],
            "default": "ACTIVE"
          },
          "contract_type": {
            "type": "string",
            "enum": [
              "PERMANENT",
              "FIXED_TERM",
              "ZERO_HOURS",
              "APPRENTICE",
              "CONTRACTOR"
            ]
          },
          "contract_start_date": {
            "type": "string",
            "description": "Contract start date"
          },
          "contract_end_date": {
            "type": "string",
            "description": "Contract end date"
          },
          "working_hours": {
            "type": "string",
            "description": "Working hours per week",
            "example": "37.5"
          },
          "salary_type": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "MONTHLY",
              "WEEKLY",
              "BIWEEKLY",
              "DAILY",
              "HOURLY",
              "COMMISSION",
              "PROJECT_BASED"
            ]
          },
          "salary_amount": {
            "type": "string",
            "description": "Salary amount",
            "example": "50000.00"
          },
          "tax_code": {
            "type": "string",
            "description": "Tax code",
            "example": "1257L"
          },
          "nic_table_letter": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "C",
              "H",
              "J",
              "M",
              "Z"
            ],
            "default": "A"
          },
          "user_id": {
            "type": "string",
            "description": "User ID from auth system",
            "format": "uuid"
          }
        },
        "required": [
          "employee_no",
          "first_name",
          "last_name",
          "email",
          "national_insurance_no",
          "address",
          "hire_date"
        ]
      },
      "EmployeeResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Employee ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_no": {
            "type": "string",
            "description": "Employee number"
          },
          "title": {
            "type": "object",
            "description": "Title"
          },
          "first_name": {
            "type": "string",
            "description": "First name"
          },
          "preferred_name": {
            "type": "object",
            "description": "Preferred name"
          },
          "last_name": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "avatar": {
            "type": "object",
            "description": "Avatar URL"
          },
          "phone": {
            "type": "object",
            "description": "Phone number"
          },
          "dob": {
            "type": "object",
            "description": "Date of birth"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "OTHER",
              "PREFER_NOT_TO_SAY"
            ]
          },
          "national_insurance_no": {
            "type": "string",
            "description": "National Insurance number"
          },
          "right_to_work_status": {
            "type": "string",
            "enum": [
              "VERIFIED",
              "PENDING",
              "EXPIRED",
              "FAILED",
              "NOT_PROVIDED"
            ]
          },
          "address": {
            "type": "string",
            "description": "Address"
          },
          "hire_date": {
            "format": "date-time",
            "type": "string",
            "description": "Hire date"
          },
          "termination_date": {
            "type": "object",
            "description": "Termination date"
          },
          "employment_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PROBATION",
              "LEAVE_PAID",
              "LEAVE_UNPAID",
              "SUSPENDED",
              "NOTICE_PERIOD",
              "RESIGNED",
              "TERMINATED",
              "RETIRED",
              "CONTRACT_ENDED",
              "INACTIVE"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_no",
          "first_name",
          "last_name",
          "email",
          "national_insurance_no",
          "address",
          "hire_date",
          "employment_status",
          "created_at",
          "updated_at"
        ]
      },
      "EmployeeDetailResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Employee ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_no": {
            "type": "string",
            "description": "Employee number"
          },
          "title": {
            "type": "object",
            "description": "Title"
          },
          "first_name": {
            "type": "string",
            "description": "First name"
          },
          "preferred_name": {
            "type": "object",
            "description": "Preferred name"
          },
          "last_name": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "avatar": {
            "type": "object",
            "description": "Avatar URL"
          },
          "phone": {
            "type": "object",
            "description": "Phone number"
          },
          "dob": {
            "type": "object",
            "description": "Date of birth"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "OTHER",
              "PREFER_NOT_TO_SAY"
            ]
          },
          "national_insurance_no": {
            "type": "string",
            "description": "National Insurance number"
          },
          "right_to_work_status": {
            "type": "string",
            "enum": [
              "VERIFIED",
              "PENDING",
              "EXPIRED",
              "FAILED",
              "NOT_PROVIDED"
            ]
          },
          "address": {
            "type": "string",
            "description": "Address"
          },
          "hire_date": {
            "format": "date-time",
            "type": "string",
            "description": "Hire date"
          },
          "termination_date": {
            "type": "object",
            "description": "Termination date"
          },
          "employment_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PROBATION",
              "LEAVE_PAID",
              "LEAVE_UNPAID",
              "SUSPENDED",
              "NOTICE_PERIOD",
              "RESIGNED",
              "TERMINATED",
              "RETIRED",
              "CONTRACT_ENDED",
              "INACTIVE"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "contract_type": {
            "type": "string",
            "enum": [
              "PERMANENT",
              "FIXED_TERM",
              "ZERO_HOURS",
              "APPRENTICE",
              "CONTRACTOR"
            ]
          },
          "contract_start_date": {
            "type": "object",
            "description": "Contract start date"
          },
          "contract_end_date": {
            "type": "object",
            "description": "Contract end date"
          },
          "working_hours": {
            "type": "object",
            "description": "Working hours per week"
          },
          "salary_type": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "MONTHLY",
              "WEEKLY",
              "BIWEEKLY",
              "DAILY",
              "HOURLY",
              "COMMISSION",
              "PROJECT_BASED"
            ]
          },
          "salary_amount": {
            "type": "object",
            "description": "Salary amount"
          },
          "tax_code": {
            "type": "object",
            "description": "Tax code"
          },
          "nic_table_letter": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "C",
              "H",
              "J",
              "M",
              "Z"
            ]
          },
          "assignments": {
            "description": "Current assignments",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "manage_departments": {
            "description": "Departments managed by this employee",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_no",
          "first_name",
          "last_name",
          "email",
          "national_insurance_no",
          "address",
          "hire_date",
          "employment_status",
          "created_at",
          "updated_at",
          "nic_table_letter"
        ]
      },
      "UpdateEmployeeDto": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First name"
          },
          "last_name": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "phone": {
            "type": "string",
            "description": "Phone number"
          },
          "address": {
            "type": "string",
            "description": "Address"
          },
          "employment_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PROBATION",
              "LEAVE_PAID",
              "LEAVE_UNPAID",
              "SUSPENDED",
              "NOTICE_PERIOD",
              "RESIGNED",
              "TERMINATED",
              "RETIRED",
              "CONTRACT_ENDED",
              "INACTIVE"
            ]
          },
          "termination_date": {
            "type": "string",
            "description": "Termination date"
          },
          "contract_type": {
            "type": "string",
            "enum": [
              "PERMANENT",
              "FIXED_TERM",
              "ZERO_HOURS",
              "APPRENTICE",
              "CONTRACTOR"
            ]
          },
          "contract_end_date": {
            "type": "string",
            "description": "Contract end date"
          },
          "working_hours": {
            "type": "string",
            "description": "Working hours per week"
          },
          "salary_amount": {
            "type": "string",
            "description": "Salary amount"
          },
          "tax_code": {
            "type": "string",
            "description": "Tax code"
          }
        }
      },
      "CreateAssignmentDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "format": "uuid"
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "format": "uuid"
          },
          "department_id": {
            "type": "string",
            "description": "Department ID",
            "format": "uuid"
          },
          "start_date": {
            "type": "string",
            "description": "Assignment start date",
            "example": "2024-01-01"
          },
          "end_date": {
            "type": "string",
            "description": "Assignment end date",
            "example": "2024-12-31"
          }
        },
        "required": [
          "employee_id",
          "job_id",
          "department_id",
          "start_date"
        ]
      },
      "AssignmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assignment ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "job_id": {
            "type": "string",
            "description": "Job ID"
          },
          "department_id": {
            "type": "string",
            "description": "Department ID"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Assignment start date"
          },
          "end_date": {
            "type": "object",
            "description": "Assignment end date"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "job_id",
          "department_id",
          "start_date",
          "created_at",
          "updated_at"
        ]
      },
      "AssignmentWithRelationsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assignment ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "job_id": {
            "type": "string",
            "description": "Job ID"
          },
          "department_id": {
            "type": "string",
            "description": "Department ID"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Assignment start date"
          },
          "end_date": {
            "type": "object",
            "description": "Assignment end date"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee details"
          },
          "job": {
            "type": "object",
            "description": "Job details"
          },
          "department": {
            "type": "object",
            "description": "Department details"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "job_id",
          "department_id",
          "start_date",
          "created_at",
          "updated_at",
          "employee",
          "job",
          "department"
        ]
      },
      "UpdateAssignmentDto": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "format": "uuid"
          },
          "department_id": {
            "type": "string",
            "description": "Department ID",
            "format": "uuid"
          },
          "end_date": {
            "type": "string",
            "description": "Assignment end date",
            "example": "2024-12-31"
          }
        }
      },
      "CreateRateGroupDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Rate group code"
          },
          "title": {
            "type": "string",
            "description": "Rate group title"
          },
          "category": {
            "type": "string",
            "enum": [
              "NMW",
              "SSP",
              "SMP",
              "SPP",
              "ShPP",
              "SPBP",
              "TAX_BAND",
              "NI_THRESHOLD",
              "NI_RATE",
              "PENSION_AE",
              "LEVY",
              "HOLIDAY_DAYS",
              "WORKING_TIME_MAX"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ]
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ],
            "default": "UK"
          }
        },
        "required": [
          "code",
          "title",
          "category",
          "unit"
        ]
      },
      "RateGroupResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rate group ID"
          },
          "code": {
            "type": "string",
            "description": "Rate group code"
          },
          "title": {
            "type": "string",
            "description": "Rate group title"
          },
          "category": {
            "type": "string",
            "enum": [
              "NMW",
              "SSP",
              "SMP",
              "SPP",
              "ShPP",
              "SPBP",
              "TAX_BAND",
              "NI_THRESHOLD",
              "NI_RATE",
              "PENSION_AE",
              "LEVY",
              "HOLIDAY_DAYS",
              "WORKING_TIME_MAX"
            ]
          },
          "description": {
            "type": "object",
            "description": "Description"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ]
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          }
        },
        "required": [
          "id",
          "code",
          "title",
          "category",
          "unit",
          "jurisdiction",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateRateGroupDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Rate group title"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ]
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ]
          }
        }
      },
      "CreateRateEntryDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Rate Group ID",
            "format": "uuid"
          },
          "startsAt": {
            "type": "string",
            "description": "Effective start date",
            "example": "2024-01-01"
          },
          "endsAt": {
            "type": "string",
            "description": "Effective end date",
            "example": "2024-12-31"
          },
          "params": {
            "type": "object",
            "description": "Flexible dimension parameters (JSON)",
            "example": "{\"ageBand\":\"21-22\",\"taxYear\":\"2025/26\"}"
          },
          "valueDecimal": {
            "type": "string",
            "description": "Rate value (decimal)",
            "example": "10.42"
          },
          "valueText": {
            "type": "string",
            "description": "Rate value (text)",
            "example": "90% of AWE"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation",
            "example": "NMW Act 1998 – s.1"
          },
          "url": {
            "type": "string",
            "description": "Reference URL",
            "example": "https://gov.uk/national-minimum-wage"
          }
        },
        "required": [
          "groupId",
          "startsAt",
          "citation",
          "url"
        ]
      },
      "RateEntryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rate Entry ID"
          },
          "groupId": {
            "type": "string",
            "description": "Rate Group ID"
          },
          "startsAt": {
            "format": "date-time",
            "type": "string",
            "description": "Effective start date"
          },
          "endsAt": {
            "type": "object",
            "description": "Effective end date"
          },
          "params": {
            "type": "object",
            "description": "Flexible dimension parameters (JSON)"
          },
          "valueDecimal": {
            "type": "object",
            "description": "Rate value (decimal)"
          },
          "valueText": {
            "type": "object",
            "description": "Rate value (text)"
          },
          "notes": {
            "type": "object",
            "description": "Additional notes"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation"
          },
          "url": {
            "type": "string",
            "description": "Reference URL"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          }
        },
        "required": [
          "id",
          "groupId",
          "startsAt",
          "citation",
          "url",
          "created_at"
        ]
      },
      "Object": {
        "type": "object",
        "properties": {}
      },
      "RateEntryWithGroupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rate Entry ID"
          },
          "groupId": {
            "type": "string",
            "description": "Rate Group ID"
          },
          "startsAt": {
            "format": "date-time",
            "type": "string",
            "description": "Effective start date"
          },
          "endsAt": {
            "type": "object",
            "description": "Effective end date"
          },
          "params": {
            "type": "object",
            "description": "Flexible dimension parameters (JSON)"
          },
          "valueDecimal": {
            "type": "object",
            "description": "Rate value (decimal)"
          },
          "valueText": {
            "type": "object",
            "description": "Rate value (text)"
          },
          "notes": {
            "type": "object",
            "description": "Additional notes"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation"
          },
          "url": {
            "type": "string",
            "description": "Reference URL"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "group": {
            "type": "object",
            "description": "Rate Group details"
          }
        },
        "required": [
          "id",
          "groupId",
          "startsAt",
          "citation",
          "url",
          "created_at",
          "group"
        ]
      },
      "UpdateRateEntryDto": {
        "type": "object",
        "properties": {
          "endsAt": {
            "type": "string",
            "description": "Effective end date",
            "example": "2024-12-31"
          },
          "params": {
            "type": "object",
            "description": "Flexible dimension parameters (JSON)",
            "example": "{\"ageBand\":\"21-22\",\"taxYear\":\"2025/26\"}"
          },
          "valueDecimal": {
            "type": "string",
            "description": "Rate value (decimal)",
            "example": "10.42"
          },
          "valueText": {
            "type": "string",
            "description": "Rate value (text)",
            "example": "90% of AWE"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation"
          },
          "url": {
            "type": "string",
            "description": "Reference URL"
          }
        }
      },
      "CreateShiftTemplateDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Template name",
            "example": "Early Shift",
            "minLength": 1,
            "maxLength": 255
          },
          "start_minutes": {
            "type": "number",
            "description": "Shift start time as minutes from 00:00",
            "example": 540,
            "minimum": 0,
            "maximum": 1440
          },
          "end_minutes": {
            "type": "number",
            "description": "Shift end time as minutes from 00:00 (wrap > 1440 for overnight)",
            "example": 1020,
            "minimum": 0,
            "maximum": 2880
          },
          "break_minutes": {
            "type": "number",
            "description": "Paid/unpaid break length in minutes",
            "example": 30,
            "default": 0
          },
          "weekly_pattern": {
            "type": "string",
            "description": "Weekly pattern in ISO-8601 RRULE or cron-like string",
            "example": "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR"
          },
          "is_night_shift": {
            "type": "boolean",
            "description": "Whether this is a night shift",
            "example": false,
            "default": false
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Standard office hours"
          }
        },
        "required": [
          "company_id",
          "name",
          "start_minutes",
          "end_minutes"
        ]
      },
      "ShiftTemplateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Shift template ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID"
          },
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "start_minutes": {
            "type": "number",
            "description": "Shift start time as minutes from 00:00"
          },
          "end_minutes": {
            "type": "number",
            "description": "Shift end time as minutes from 00:00"
          },
          "break_minutes": {
            "type": "number",
            "description": "Paid/unpaid break length in minutes"
          },
          "weekly_pattern": {
            "type": "object",
            "description": "Weekly pattern in ISO-8601 RRULE or cron-like string"
          },
          "is_night_shift": {
            "type": "boolean",
            "description": "Whether this is a night shift"
          },
          "notes": {
            "type": "object",
            "description": "Additional notes"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "company_id",
          "name",
          "start_minutes",
          "end_minutes",
          "break_minutes",
          "is_night_shift",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateShiftTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name",
            "example": "Early Shift",
            "minLength": 1,
            "maxLength": 255
          },
          "start_minutes": {
            "type": "number",
            "description": "Shift start time as minutes from 00:00",
            "example": 540,
            "minimum": 0,
            "maximum": 1440
          },
          "end_minutes": {
            "type": "number",
            "description": "Shift end time as minutes from 00:00 (wrap > 1440 for overnight)",
            "example": 1020,
            "minimum": 0,
            "maximum": 2880
          },
          "break_minutes": {
            "type": "number",
            "description": "Paid/unpaid break length in minutes",
            "example": 30
          },
          "weekly_pattern": {
            "type": "string",
            "description": "Weekly pattern in ISO-8601 RRULE or cron-like string",
            "example": "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR"
          },
          "is_night_shift": {
            "type": "boolean",
            "description": "Whether this is a night shift",
            "example": false
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Standard office hours"
          }
        }
      },
      "CreateLeaveTypeDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Short code for the leave type",
            "example": "ANNUAL",
            "minLength": 1,
            "maxLength": 50
          },
          "name": {
            "type": "string",
            "description": "Human-readable name",
            "example": "Annual Leave",
            "minLength": 1,
            "maxLength": 255
          },
          "statutory": {
            "type": "boolean",
            "description": "Whether the leave is statutory under UK law",
            "example": true,
            "default": false
          },
          "max_days_per_year": {
            "type": "number",
            "description": "Maximum entitlement in days per leave year",
            "example": 28,
            "minimum": 0
          },
          "accrual_based": {
            "type": "boolean",
            "description": "Whether entitlement accrues over time",
            "example": true,
            "default": false
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the leave is normally paid",
            "example": true,
            "default": true
          },
          "hr_rate_code": {
            "type": "string",
            "description": "Reference into HR_RATE table for pay calculation",
            "example": "SSP",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "Description of the leave type",
            "example": "UK statutory annual leave entitlement",
            "maxLength": 1000
          },
          "template_id": {
            "type": "string",
            "description": "Reference to the template it was created from",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "custom_rules": {
            "type": "object",
            "description": "Custom rules specific to this tenant",
            "example": {
              "min_notice_days": 7,
              "max_consecutive_days": 14
            },
            "default": {}
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the leave type is active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "LeaveTypeResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "template_id": {
            "type": "object",
            "description": "Reference to the template it was created from",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Short code for the leave type",
            "example": "ANNUAL"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name",
            "example": "Annual Leave"
          },
          "statutory": {
            "type": "boolean",
            "description": "Whether the leave is statutory under UK law",
            "example": true
          },
          "max_days_per_year": {
            "type": "object",
            "description": "Maximum entitlement in days per leave year",
            "example": 28,
            "nullable": true
          },
          "accrual_based": {
            "type": "boolean",
            "description": "Whether entitlement accrues over time",
            "example": true
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the leave is normally paid",
            "example": true
          },
          "hr_rate_code": {
            "type": "object",
            "description": "Reference into HR_RATE table for pay calculation",
            "example": "SSP",
            "nullable": true
          },
          "description": {
            "type": "object",
            "description": "Description of the leave type",
            "example": "UK statutory annual leave entitlement",
            "nullable": true
          },
          "custom_rules": {
            "type": "object",
            "description": "Custom rules specific to this tenant",
            "example": {}
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the leave type is active",
            "example": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "created_by_id": {
            "type": "object",
            "description": "ID of user who created the record",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "nullable": true
          },
          "updated_by_id": {
            "type": "object",
            "description": "ID of user who last updated the record",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "nullable": true
          },
          "created_by": {
            "type": "object",
            "description": "Email of user who created the record",
            "example": "admin@example.com",
            "nullable": true
          },
          "updated_by": {
            "type": "object",
            "description": "Email of user who last updated the record",
            "example": "admin@example.com",
            "nullable": true
          }
        },
        "required": [
          "id",
          "tenant_id",
          "code",
          "name",
          "statutory",
          "accrual_based",
          "paid",
          "custom_rules",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateLeaveTypeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human-readable name",
            "example": "Annual Leave",
            "minLength": 1,
            "maxLength": 255
          },
          "statutory": {
            "type": "boolean",
            "description": "Whether the leave is statutory under UK law",
            "example": true
          },
          "max_days_per_year": {
            "type": "number",
            "description": "Maximum entitlement in days per leave year",
            "example": 28,
            "minimum": 0
          },
          "accrual_based": {
            "type": "boolean",
            "description": "Whether entitlement accrues over time",
            "example": true
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the leave is normally paid",
            "example": true
          },
          "hr_rate_code": {
            "type": "string",
            "description": "Reference into HR_RATE table for pay calculation",
            "example": "SSP",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "Description of the leave type",
            "example": "UK statutory annual leave entitlement",
            "maxLength": 1000
          },
          "custom_rules": {
            "type": "object",
            "description": "Custom rules specific to this tenant",
            "example": {
              "min_notice_days": 7,
              "max_consecutive_days": 14
            }
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the leave type is active",
            "example": true
          }
        }
      },
      "CreateLeaveRequestDto": {
        "type": "object",
        "properties": {
          "leave_type_id": {
            "type": "string",
            "example": "uuid"
          },
          "start_date": {
            "type": "string",
            "example": "2024-03-15"
          },
          "end_date": {
            "type": "string",
            "example": "2024-03-17"
          },
          "duration_hours": {
            "type": "number",
            "example": 24
          },
          "comments": {
            "type": "string",
            "example": "Family vacation"
          }
        },
        "required": [
          "leave_type_id",
          "start_date",
          "end_date",
          "duration_hours"
        ]
      },
      "LeaveRequestResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "leave_type": {
            "type": "string",
            "example": "Annual Leave"
          },
          "start_date": {
            "type": "string",
            "example": "2024-03-15"
          },
          "end_date": {
            "type": "string",
            "example": "2024-03-17"
          },
          "duration_hours": {
            "type": "number",
            "example": 24
          },
          "status": {
            "type": "string",
            "example": "PENDING"
          },
          "comments": {
            "type": "string",
            "example": "Family vacation"
          },
          "submitted_at": {
            "type": "string",
            "example": "2024-03-10T09:00:00Z"
          },
          "approved_at": {
            "type": "string",
            "example": "2024-03-11T14:30:00Z"
          }
        },
        "required": [
          "id",
          "leave_type",
          "start_date",
          "end_date",
          "duration_hours",
          "status",
          "comments",
          "submitted_at",
          "approved_at"
        ]
      },
      "UpdateLeaveRequestDto": {
        "type": "object",
        "properties": {
          "start_datetime": {
            "type": "string",
            "description": "Leave start date and time",
            "example": "2024-01-15T09:00:00.000Z"
          },
          "end_datetime": {
            "type": "string",
            "description": "Leave end date and time",
            "example": "2024-01-19T17:00:00.000Z"
          },
          "duration_hours": {
            "type": "number",
            "description": "Duration in hours",
            "example": 40,
            "minimum": 0.1
          },
          "comments": {
            "type": "string",
            "description": "Comments for the leave request",
            "example": "Family vacation"
          }
        }
      },
      "ApproveLeaveRequestDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Approval status",
            "enum": [
              "APPROVED",
              "REJECTED"
            ],
            "example": "APPROVED"
          },
          "comments": {
            "type": "string",
            "description": "Approval comments",
            "example": "Approved for the requested dates"
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateScheduledShiftDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "shift_template_id": {
            "type": "string",
            "description": "Shift template ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "start_datetime": {
            "type": "string",
            "description": "Shift start datetime",
            "example": "2024-01-15T09:00:00.000Z"
          },
          "end_datetime": {
            "type": "string",
            "description": "Shift end datetime",
            "example": "2024-01-15T17:00:00.000Z"
          },
          "status": {
            "type": "string",
            "description": "Shift status",
            "enum": [
              "PLANNED",
              "CONFIRMED",
              "COMPLETED",
              "CANCELLED"
            ],
            "default": "PLANNED"
          },
          "remarks": {
            "type": "string",
            "description": "Special remarks for this shift",
            "example": "Training session at 2 PM"
          }
        },
        "required": [
          "employee_id",
          "shift_template_id",
          "start_datetime",
          "end_datetime"
        ]
      },
      "ScheduledShiftResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Scheduled shift ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "shift_template_id": {
            "type": "string",
            "description": "Shift template ID"
          },
          "start_datetime": {
            "format": "date-time",
            "type": "string",
            "description": "Shift start datetime"
          },
          "end_datetime": {
            "format": "date-time",
            "type": "string",
            "description": "Shift end datetime"
          },
          "status": {
            "type": "string",
            "description": "Shift status",
            "enum": [
              "PLANNED",
              "CONFIRMED",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "remarks": {
            "type": "object",
            "description": "Special remarks"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          },
          "shift_template": {
            "type": "object",
            "description": "Shift template information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "shift_template_id",
          "start_datetime",
          "end_datetime",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateScheduledShiftDto": {
        "type": "object",
        "properties": {
          "start_datetime": {
            "type": "string",
            "description": "Shift start datetime",
            "example": "2024-01-15T09:00:00.000Z"
          },
          "end_datetime": {
            "type": "string",
            "description": "Shift end datetime",
            "example": "2024-01-15T17:00:00.000Z"
          },
          "status": {
            "type": "string",
            "description": "Shift status",
            "enum": [
              "PLANNED",
              "CONFIRMED",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "remarks": {
            "type": "string",
            "description": "Special remarks for this shift",
            "example": "Training session at 2 PM"
          }
        }
      },
      "CreateOvertimeRequestDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "start_datetime": {
            "type": "string",
            "description": "Overtime start date and time",
            "example": "2024-01-15T18:00:00.000Z"
          },
          "end_datetime": {
            "type": "string",
            "description": "Overtime end date and time",
            "example": "2024-01-15T20:00:00.000Z"
          },
          "hours": {
            "type": "number",
            "description": "Overtime hours",
            "example": 2,
            "minimum": 0.1
          },
          "reason": {
            "type": "string",
            "description": "Reason for overtime",
            "example": "Project deadline"
          }
        },
        "required": [
          "employee_id",
          "start_datetime",
          "end_datetime",
          "hours"
        ]
      },
      "OvertimeRequestResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Overtime request ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "start_datetime": {
            "format": "date-time",
            "type": "string",
            "description": "Overtime start date and time"
          },
          "end_datetime": {
            "format": "date-time",
            "type": "string",
            "description": "Overtime end date and time"
          },
          "hours": {
            "type": "number",
            "description": "Overtime hours"
          },
          "status": {
            "type": "string",
            "description": "Overtime request status",
            "enum": [
              "PENDING",
              "APPROVED",
              "REJECTED",
              "CANCELLED"
            ]
          },
          "approver_id": {
            "type": "object",
            "description": "Approver user ID"
          },
          "approved_at": {
            "type": "object",
            "description": "Approval timestamp"
          },
          "reason": {
            "type": "object",
            "description": "Reason for overtime"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "start_datetime",
          "end_datetime",
          "hours",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateOvertimeRequestDto": {
        "type": "object",
        "properties": {
          "start_datetime": {
            "type": "string",
            "description": "Overtime start date and time",
            "example": "2024-01-15T18:00:00.000Z"
          },
          "end_datetime": {
            "type": "string",
            "description": "Overtime end date and time",
            "example": "2024-01-15T20:00:00.000Z"
          },
          "hours": {
            "type": "number",
            "description": "Overtime hours",
            "example": 2,
            "minimum": 0.1
          },
          "reason": {
            "type": "string",
            "description": "Reason for overtime",
            "example": "Project deadline"
          }
        }
      },
      "ApproveOvertimeRequestDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Approval status",
            "enum": [
              "APPROVED",
              "REJECTED"
            ],
            "example": "APPROVED"
          },
          "comments": {
            "type": "string",
            "description": "Approval comments",
            "example": "Approved for overtime work"
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateAttendanceRecordDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "shift_id": {
            "type": "string",
            "description": "Scheduled shift ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "clock_in": {
            "type": "string",
            "description": "Clock in time",
            "example": "2024-01-15T09:00:00.000Z"
          },
          "clock_out": {
            "type": "string",
            "description": "Clock out time",
            "example": "2024-01-15T17:00:00.000Z"
          },
          "source": {
            "type": "string",
            "description": "Attendance source",
            "enum": [
              "MOBILE",
              "TERMINAL",
              "WEB",
              "MANUAL",
              "OTHER"
            ],
            "default": "TERMINAL"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude for location tracking",
            "example": 51.5074
          },
          "longitude": {
            "type": "number",
            "description": "Longitude for location tracking",
            "example": -0.1278
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the record is flagged for review",
            "example": false
          }
        },
        "required": [
          "employee_id",
          "clock_in"
        ]
      },
      "AttendanceRecordResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Attendance record ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "shift_id": {
            "type": "object",
            "description": "Scheduled shift ID"
          },
          "clock_in": {
            "format": "date-time",
            "type": "string",
            "description": "Clock in time"
          },
          "clock_out": {
            "type": "object",
            "description": "Clock out time"
          },
          "source": {
            "type": "string",
            "description": "Attendance source",
            "enum": [
              "MOBILE",
              "TERMINAL",
              "WEB",
              "MANUAL",
              "OTHER"
            ]
          },
          "latitude": {
            "type": "object",
            "description": "Latitude for location tracking"
          },
          "longitude": {
            "type": "object",
            "description": "Longitude for location tracking"
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the record is flagged for review"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          },
          "scheduled_shift": {
            "type": "object",
            "description": "Scheduled shift information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "clock_in",
          "source",
          "flagged",
          "created_at",
          "updated_at"
        ]
      },
      "ClockInDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "shift_id": {
            "type": "string",
            "description": "Scheduled shift ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "source": {
            "type": "string",
            "description": "Attendance source",
            "enum": [
              "MOBILE",
              "TERMINAL",
              "WEB",
              "MANUAL",
              "OTHER"
            ],
            "default": "TERMINAL"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude for location tracking",
            "example": 51.5074
          },
          "longitude": {
            "type": "number",
            "description": "Longitude for location tracking",
            "example": -0.1278
          }
        },
        "required": [
          "employee_id"
        ]
      },
      "ClockOutDto": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude for location tracking",
            "example": 51.5074
          },
          "longitude": {
            "type": "number",
            "description": "Longitude for location tracking",
            "example": -0.1278
          }
        }
      },
      "UpdateAttendanceRecordDto": {
        "type": "object",
        "properties": {
          "clock_in": {
            "type": "string",
            "description": "Clock in time",
            "example": "2024-01-15T09:00:00.000Z"
          },
          "clock_out": {
            "type": "string",
            "description": "Clock out time",
            "example": "2024-01-15T17:00:00.000Z"
          },
          "source": {
            "type": "string",
            "description": "Attendance source",
            "enum": [
              "MOBILE",
              "TERMINAL",
              "WEB",
              "MANUAL",
              "OTHER"
            ]
          },
          "latitude": {
            "type": "number",
            "description": "Latitude for location tracking",
            "example": 51.5074
          },
          "longitude": {
            "type": "number",
            "description": "Longitude for location tracking",
            "example": -0.1278
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the record is flagged for review",
            "example": false
          }
        }
      },
      "CreateTimesheetDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "period_start": {
            "type": "string",
            "description": "Period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Period end date",
            "example": "2024-01-07T23:59:59.000Z"
          },
          "total_work_hours": {
            "type": "number",
            "description": "Total work hours",
            "example": 40,
            "minimum": 0
          },
          "total_overtime_hours": {
            "type": "number",
            "description": "Total overtime hours",
            "example": 5,
            "minimum": 0
          },
          "total_leave_hours": {
            "type": "number",
            "description": "Total leave hours",
            "example": 8,
            "minimum": 0
          },
          "status": {
            "type": "string",
            "description": "Timesheet status",
            "enum": [
              "OPEN",
              "SUBMITTED",
              "APPROVED",
              "LOCKED"
            ],
            "default": "OPEN"
          }
        },
        "required": [
          "employee_id",
          "period_start",
          "period_end",
          "total_work_hours",
          "total_overtime_hours",
          "total_leave_hours"
        ]
      },
      "TimesheetResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Timesheet ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "period_start": {
            "format": "date-time",
            "type": "string",
            "description": "Period start date"
          },
          "period_end": {
            "format": "date-time",
            "type": "string",
            "description": "Period end date"
          },
          "total_work_hours": {
            "type": "number",
            "description": "Total work hours"
          },
          "total_overtime_hours": {
            "type": "number",
            "description": "Total overtime hours"
          },
          "total_leave_hours": {
            "type": "number",
            "description": "Total leave hours"
          },
          "status": {
            "type": "string",
            "description": "Timesheet status",
            "enum": [
              "OPEN",
              "SUBMITTED",
              "APPROVED",
              "LOCKED"
            ]
          },
          "locked_at": {
            "type": "object",
            "description": "Lock timestamp"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "period_start",
          "period_end",
          "total_work_hours",
          "total_overtime_hours",
          "total_leave_hours",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "GenerateTimesheetDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "period_start": {
            "type": "string",
            "description": "Period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Period end date",
            "example": "2024-01-07T23:59:59.000Z"
          }
        },
        "required": [
          "employee_id",
          "period_start",
          "period_end"
        ]
      },
      "UpdateTimesheetDto": {
        "type": "object",
        "properties": {
          "period_start": {
            "type": "string",
            "description": "Period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Period end date",
            "example": "2024-01-07T23:59:59.000Z"
          },
          "total_work_hours": {
            "type": "number",
            "description": "Total work hours",
            "example": 40,
            "minimum": 0
          },
          "total_overtime_hours": {
            "type": "number",
            "description": "Total overtime hours",
            "example": 5,
            "minimum": 0
          },
          "total_leave_hours": {
            "type": "number",
            "description": "Total leave hours",
            "example": 8,
            "minimum": 0
          },
          "status": {
            "type": "string",
            "description": "Timesheet status",
            "enum": [
              "OPEN",
              "SUBMITTED",
              "APPROVED",
              "LOCKED"
            ]
          }
        }
      },
      "SubmitTimesheetDto": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Comments for submission",
            "example": "Ready for approval"
          }
        }
      },
      "ApproveTimesheetDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Approval status",
            "enum": [
              "APPROVED",
              "LOCKED"
            ],
            "example": "APPROVED"
          },
          "comments": {
            "type": "string",
            "description": "Approval comments",
            "example": "Approved for payroll processing"
          }
        },
        "required": [
          "status"
        ]
      },
      "CreatePayScheduleDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Pay schedule name",
            "example": "Monthly Payroll",
            "minLength": 1,
            "maxLength": 255
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ],
            "example": "MONTHLY"
          },
          "pay_day": {
            "type": "number",
            "description": "Pay day of month (for monthly/yearly frequencies)",
            "example": 25,
            "minimum": 1,
            "maximum": 31
          },
          "week_day": {
            "type": "number",
            "description": "Pay day of week (for weekly/biweekly frequencies)",
            "example": 5,
            "minimum": 1,
            "maximum": 7
          },
          "start_date": {
            "type": "string",
            "description": "Schedule start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Schedule end date",
            "example": "2024-12-31T23:59:59.000Z"
          }
        },
        "required": [
          "company_id",
          "name",
          "frequency",
          "start_date"
        ]
      },
      "PayScheduleResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pay schedule ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID"
          },
          "name": {
            "type": "string",
            "description": "Pay schedule name"
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ]
          },
          "pay_day": {
            "type": "object",
            "description": "Pay day of month"
          },
          "week_day": {
            "type": "object",
            "description": "Pay day of week"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Schedule start date"
          },
          "end_date": {
            "type": "object",
            "description": "Schedule end date"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "company": {
            "type": "object",
            "description": "Company information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "company_id",
          "name",
          "frequency",
          "start_date",
          "created_at",
          "updated_at"
        ]
      },
      "UpdatePayScheduleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pay schedule name",
            "example": "Monthly Payroll",
            "minLength": 1,
            "maxLength": 255
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ]
          },
          "pay_day": {
            "type": "number",
            "description": "Pay day of month (for monthly/yearly frequencies)",
            "example": 25,
            "minimum": 1,
            "maximum": 31
          },
          "week_day": {
            "type": "number",
            "description": "Pay day of week (for weekly/biweekly frequencies)",
            "example": 5,
            "minimum": 1,
            "maximum": 7
          },
          "start_date": {
            "type": "string",
            "description": "Schedule start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Schedule end date",
            "example": "2024-12-31T23:59:59.000Z"
          }
        }
      },
      "CreatePayRunDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "pay_schedule_id": {
            "type": "string",
            "description": "Pay schedule ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Pay run name",
            "example": "January 2024 Monthly Payroll",
            "maxLength": 255
          },
          "period_start": {
            "type": "string",
            "description": "Pay period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Pay period end date",
            "example": "2024-01-31T23:59:59.000Z"
          },
          "pay_date": {
            "type": "string",
            "description": "Pay date",
            "example": "2024-02-05T00:00:00.000Z"
          },
          "status": {
            "type": "string",
            "description": "Pay run status",
            "enum": [
              "DRAFT",
              "PROCESSING",
              "APPROVED",
              "SUBMITTED",
              "FILED",
              "CLOSED"
            ],
            "default": "DRAFT"
          },
          "description": {
            "type": "string",
            "description": "Pay run description",
            "example": "Monthly payroll for January 2024",
            "maxLength": 1000
          }
        },
        "required": [
          "company_id",
          "pay_schedule_id",
          "name",
          "period_start",
          "period_end",
          "pay_date"
        ]
      },
      "PayRunResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pay run ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID"
          },
          "pay_schedule_id": {
            "type": "string",
            "description": "Pay schedule ID"
          },
          "name": {
            "type": "string",
            "description": "Pay run name"
          },
          "period_start": {
            "format": "date-time",
            "type": "string",
            "description": "Pay period start date"
          },
          "period_end": {
            "format": "date-time",
            "type": "string",
            "description": "Pay period end date"
          },
          "pay_date": {
            "format": "date-time",
            "type": "string",
            "description": "Pay date"
          },
          "status": {
            "type": "string",
            "description": "Pay run status",
            "enum": [
              "DRAFT",
              "PROCESSING",
              "APPROVED",
              "SUBMITTED",
              "FILED",
              "CLOSED"
            ]
          },
          "hmrc_submission_id": {
            "type": "object",
            "description": "HMRC submission ID"
          },
          "submitted_at": {
            "type": "object",
            "description": "HMRC submission timestamp"
          },
          "description": {
            "type": "object",
            "description": "Pay run description"
          },
          "total_gross_amount": {
            "type": "number",
            "description": "Total gross amount"
          },
          "total_net_amount": {
            "type": "number",
            "description": "Total net amount"
          },
          "total_deductions_amount": {
            "type": "number",
            "description": "Total deductions amount"
          },
          "employee_count": {
            "type": "number",
            "description": "Number of employees"
          },
          "processed_at": {
            "type": "object",
            "description": "Processing timestamp"
          },
          "approved_at": {
            "type": "object",
            "description": "Approved timestamp"
          },
          "approved_by_id": {
            "type": "object",
            "description": "Approver user ID"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "pay_schedule": {
            "type": "object",
            "description": "Pay schedule information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "company_id",
          "pay_schedule_id",
          "name",
          "period_start",
          "period_end",
          "pay_date",
          "status",
          "total_gross_amount",
          "total_net_amount",
          "total_deductions_amount",
          "employee_count",
          "created_at",
          "updated_at"
        ]
      },
      "UpdatePayRunDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pay run name",
            "example": "January 2024 Monthly Payroll - Updated",
            "maxLength": 255
          },
          "period_start": {
            "type": "string",
            "description": "Pay period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Pay period end date",
            "example": "2024-01-31T23:59:59.000Z"
          },
          "pay_date": {
            "type": "string",
            "description": "Pay date",
            "example": "2024-02-05T00:00:00.000Z"
          },
          "status": {
            "type": "string",
            "description": "Pay run status",
            "enum": [
              "DRAFT",
              "PROCESSING",
              "APPROVED",
              "SUBMITTED",
              "FILED",
              "CLOSED"
            ]
          },
          "description": {
            "type": "string",
            "description": "Pay run description",
            "example": "Updated monthly payroll description",
            "maxLength": 1000
          }
        }
      },
      "ProcessPayRunDto": {
        "type": "object",
        "properties": {
          "force_process": {
            "type": "boolean",
            "description": "Force processing even if validation fails",
            "example": false,
            "default": false
          },
          "processed_notes": {
            "type": "string",
            "description": "Processing comments",
            "example": "Approved for processing",
            "maxLength": 500
          }
        }
      },
      "ApprovePayRunDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Approval status",
            "enum": [
              "DRAFT",
              "PROCESSING",
              "APPROVED",
              "SUBMITTED",
              "FILED",
              "CLOSED"
            ],
            "example": "APPROVED"
          },
          "approved_notes": {
            "type": "string",
            "description": "Approval comments",
            "example": "Approved for payment",
            "maxLength": 500
          }
        },
        "required": [
          "status"
        ]
      },
      "CreatePayslipDto": {
        "type": "object",
        "properties": {
          "pay_run_id": {
            "type": "string",
            "description": "Pay run ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "pay_period_start_date": {
            "type": "string",
            "description": "Pay period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "pay_period_end_date": {
            "type": "string",
            "description": "Pay period end date",
            "example": "2024-01-31T23:59:59.000Z"
          },
          "pay_date": {
            "type": "string",
            "description": "Pay date",
            "example": "2024-02-05T00:00:00.000Z"
          },
          "notes": {
            "type": "string",
            "description": "Payslip notes",
            "example": "Standard monthly payslip",
            "maxLength": 1000
          }
        },
        "required": [
          "pay_run_id",
          "employee_id",
          "pay_period_start_date",
          "pay_period_end_date",
          "pay_date"
        ]
      },
      "PayslipResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payslip ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "pay_run_id": {
            "type": "string",
            "description": "Pay run ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "grossPay": {
            "type": "number",
            "description": "Gross pay amount"
          },
          "total_deductions": {
            "type": "number",
            "description": "Total deductions"
          },
          "net_pay": {
            "type": "number",
            "description": "Net pay amount"
          },
          "ni_employee": {
            "type": "number",
            "description": "Employee NI contribution"
          },
          "ni_employer": {
            "type": "number",
            "description": "Employer NI contribution"
          },
          "income_tax": {
            "type": "number",
            "description": "Income tax amount"
          },
          "student_loan": {
            "type": "number",
            "description": "Student loan deduction"
          },
          "other_deductions": {
            "type": "number",
            "description": "Other deductions"
          },
          "paye_scheme_id": {
            "type": "object",
            "description": "PAYE scheme ID"
          },
          "payPeriodStartDate": {
            "format": "date-time",
            "type": "string",
            "description": "Pay period start date"
          },
          "payPeriodEndDate": {
            "format": "date-time",
            "type": "string",
            "description": "Pay period end date"
          },
          "payDate": {
            "format": "date-time",
            "type": "string",
            "description": "Pay date"
          },
          "notes": {
            "type": "object",
            "description": "Payslip notes"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "pay_run": {
            "type": "object",
            "description": "Pay run information"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "pay_run_id",
          "employee_id",
          "grossPay",
          "total_deductions",
          "net_pay",
          "ni_employee",
          "ni_employer",
          "income_tax",
          "student_loan",
          "other_deductions",
          "payPeriodStartDate",
          "payPeriodEndDate",
          "payDate",
          "created_at",
          "updated_at"
        ]
      },
      "BulkCreatePayslipsDto": {
        "type": "object",
        "properties": {
          "pay_run_id": {
            "type": "string",
            "description": "Pay run ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "employee_ids": {
            "description": "Array of employee IDs",
            "example": [
              "550e8400-e29b-41d4-a716-446655440000",
              "660e8400-e29b-41d4-a716-446655440001"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "auto_calculate": {
            "type": "boolean",
            "description": "Auto-calculate payslip amounts",
            "example": true
          },
          "notes": {
            "type": "string",
            "description": "Bulk creation notes",
            "example": "Bulk payslip creation for monthly run",
            "maxLength": 1000
          }
        },
        "required": [
          "pay_run_id",
          "employee_ids"
        ]
      },
      "UpdatePayslipDto": {
        "type": "object",
        "properties": {
          "pay_run_id": {
            "type": "string",
            "description": "Pay run ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "pay_period_start_date": {
            "type": "string",
            "description": "Pay period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "pay_period_end_date": {
            "type": "string",
            "description": "Pay period end date",
            "example": "2024-01-31T23:59:59.000Z"
          },
          "pay_date": {
            "type": "string",
            "description": "Pay date",
            "example": "2024-02-05T00:00:00.000Z"
          },
          "notes": {
            "type": "string",
            "description": "Payslip notes",
            "example": "Updated payslip with overtime",
            "maxLength": 1000
          }
        }
      },
      "CalculatePayslipDto": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "string",
            "description": "Additional notes for calculation",
            "example": "Include overtime calculation",
            "maxLength": 1000
          }
        }
      },
      "CreatePayElementDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pay element name",
            "example": "Basic Salary",
            "minLength": 2,
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "description": "Pay element code (unique)",
            "example": "BASIC_SALARY",
            "minLength": 2,
            "maxLength": 50
          },
          "type": {
            "type": "string",
            "description": "Pay element type",
            "enum": [
              "EARNING",
              "DEDUCTION",
              "BENEFIT"
            ],
            "example": "EARNING"
          },
          "taxable": {
            "type": "boolean",
            "description": "Whether this element is taxable",
            "example": true,
            "default": true
          },
          "subject_to_ni": {
            "type": "boolean",
            "description": "Whether this element is subject to National Insurance",
            "example": true,
            "default": true
          },
          "subject_to_pension": {
            "type": "boolean",
            "description": "Whether this element is subject to pension contributions",
            "example": false,
            "default": false
          },
          "default_amount": {
            "type": "number",
            "description": "Default amount for this pay element",
            "example": 3000,
            "minimum": 0
          }
        },
        "required": [
          "name",
          "code",
          "type"
        ]
      },
      "PayElementResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pay element ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "name": {
            "type": "string",
            "description": "Pay element name"
          },
          "code": {
            "type": "string",
            "description": "Pay element code"
          },
          "type": {
            "type": "string",
            "description": "Pay element type",
            "enum": [
              "EARNING",
              "DEDUCTION",
              "BENEFIT"
            ],
            "example": "EARNING"
          },
          "taxable": {
            "type": "boolean",
            "description": "Whether this element is taxable"
          },
          "subject_to_ni": {
            "type": "boolean",
            "description": "Whether this element is subject to National Insurance"
          },
          "subject_to_pension": {
            "type": "boolean",
            "description": "Whether this element is subject to pension contributions"
          },
          "default_amount": {
            "type": "object",
            "description": "Default amount for this pay element"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "code",
          "type",
          "taxable",
          "subject_to_ni",
          "subject_to_pension",
          "created_at",
          "updated_at"
        ]
      },
      "UpdatePayElementDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pay element name",
            "example": "Basic Salary Updated",
            "minLength": 2,
            "maxLength": 100
          },
          "type": {
            "type": "string",
            "description": "Pay element type",
            "enum": [
              "EARNING",
              "DEDUCTION",
              "BENEFIT"
            ],
            "example": "EARNING"
          },
          "taxable": {
            "type": "boolean",
            "description": "Whether this element is taxable",
            "example": true
          },
          "subject_to_ni": {
            "type": "boolean",
            "description": "Whether this element is subject to National Insurance",
            "example": true
          },
          "subject_to_pension": {
            "type": "boolean",
            "description": "Whether this element is subject to pension contributions",
            "example": false
          },
          "default_amount": {
            "type": "number",
            "description": "Default amount for this pay element",
            "example": 3500,
            "minimum": 0
          }
        }
      },
      "CreateEmployeePayAssignmentDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "pay_element_id": {
            "type": "string",
            "description": "Pay element ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "amount": {
            "type": "number",
            "description": "Assignment amount",
            "example": 3000,
            "minimum": 0
          },
          "effective_from": {
            "type": "string",
            "description": "Effective from date",
            "example": "2024-01-01"
          },
          "effective_to": {
            "type": "string",
            "description": "Effective to date (null for open-ended)",
            "example": "2024-12-31"
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ],
            "example": "MONTHLY"
          },
          "paye_scheme_id": {
            "type": "string",
            "description": "PAYE scheme ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        },
        "required": [
          "employee_id",
          "pay_element_id",
          "amount",
          "effective_from",
          "frequency"
        ]
      },
      "EmployeePayAssignmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assignment ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "pay_element_id": {
            "type": "string",
            "description": "Pay element ID"
          },
          "amount": {
            "type": "number",
            "description": "Assignment amount"
          },
          "effective_from": {
            "format": "date-time",
            "type": "string",
            "description": "Effective from date"
          },
          "effective_to": {
            "type": "object",
            "description": "Effective to date"
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ],
            "example": "MONTHLY"
          },
          "paye_scheme_id": {
            "type": "object",
            "description": "PAYE scheme ID"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          },
          "pay_element": {
            "type": "object",
            "description": "Pay element information"
          },
          "paye_scheme": {
            "type": "object",
            "description": "PAYE scheme information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "pay_element_id",
          "amount",
          "effective_from",
          "frequency",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateEmployeePayAssignmentDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Assignment amount",
            "example": 3500,
            "minimum": 0
          },
          "effective_from": {
            "type": "string",
            "description": "Effective from date",
            "example": "2024-02-01"
          },
          "effective_to": {
            "type": "string",
            "description": "Effective to date (null for open-ended)",
            "example": "2024-12-31"
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ],
            "example": "MONTHLY"
          },
          "paye_scheme_id": {
            "type": "string",
            "description": "PAYE scheme ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "updated_by_id": {
            "type": "string",
            "description": "Updated by user ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "updated_by": {
            "type": "string",
            "description": "Updated by user email",
            "example": "john.doe@example.com"
          }
        }
      },
      "TerminateAssignmentDto": {
        "type": "object",
        "properties": {
          "effective_to": {
            "type": "string",
            "description": "Termination date",
            "example": "2024-06-30"
          },
          "reason": {
            "type": "string",
            "description": "Termination reason",
            "example": "Employee resignation",
            "maxLength": 500
          }
        },
        "required": [
          "effective_to"
        ]
      },
      "AdminRateGroupResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "code": {
            "type": "string",
            "description": "Unique code for the rate group",
            "example": "NMW_25_26"
          },
          "title": {
            "type": "string",
            "description": "Display title for the rate group",
            "example": "National Minimum Wage 2025-2026"
          },
          "category": {
            "type": "string",
            "enum": [
              "NMW",
              "SSP",
              "SMP",
              "SPP",
              "ShPP",
              "SPBP",
              "TAX_BAND",
              "NI_THRESHOLD",
              "NI_RATE",
              "PENSION_AE",
              "LEVY",
              "HOLIDAY_DAYS",
              "WORKING_TIME_MAX"
            ],
            "description": "Category of the rate",
            "example": "NMW"
          },
          "description": {
            "type": "object",
            "description": "Description of the rate group",
            "example": "UK National Minimum Wage rates for 2025-2026 tax year"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ],
            "description": "Unit of measurement for the rate",
            "example": "HOURLY"
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ],
            "description": "Jurisdiction the rate applies to",
            "example": "UK"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "code",
          "title",
          "category",
          "unit",
          "jurisdiction",
          "created_at",
          "updated_at"
        ]
      },
      "PaginationMetaDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Items per page",
            "example": 20
          },
          "total": {
            "type": "number",
            "description": "Total number of items",
            "example": 100
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 5
          }
        },
        "required": [
          "page",
          "limit",
          "total",
          "totalPages"
        ]
      },
      "AdminPaginatedRateGroupResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of rate groups",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminRateGroupResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateRateGroupDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique code for the rate group",
            "example": "NMW_25_26"
          },
          "title": {
            "type": "string",
            "description": "Display title for the rate group",
            "example": "National Minimum Wage 2025-2026"
          },
          "category": {
            "type": "string",
            "enum": [
              "NMW",
              "SSP",
              "SMP",
              "SPP",
              "ShPP",
              "SPBP",
              "TAX_BAND",
              "NI_THRESHOLD",
              "NI_RATE",
              "PENSION_AE",
              "LEVY",
              "HOLIDAY_DAYS",
              "WORKING_TIME_MAX"
            ],
            "description": "Category of the rate",
            "example": "NMW"
          },
          "description": {
            "type": "string",
            "description": "Description of the rate group",
            "example": "UK National Minimum Wage rates for 2025-2026 tax year"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ],
            "description": "Unit of measurement for the rate",
            "example": "HOURLY"
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ],
            "description": "Jurisdiction the rate applies to",
            "example": "UK",
            "default": "UK"
          }
        },
        "required": [
          "code",
          "title",
          "category",
          "unit",
          "jurisdiction"
        ]
      },
      "AdminUpdateRateGroupDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Display title for the rate group",
            "example": "National Minimum Wage 2025-2026"
          },
          "category": {
            "type": "string",
            "enum": [
              "NMW",
              "SSP",
              "SMP",
              "SPP",
              "ShPP",
              "SPBP",
              "TAX_BAND",
              "NI_THRESHOLD",
              "NI_RATE",
              "PENSION_AE",
              "LEVY",
              "HOLIDAY_DAYS",
              "WORKING_TIME_MAX"
            ],
            "description": "Category of the rate",
            "example": "NMW"
          },
          "description": {
            "type": "string",
            "description": "Description of the rate group",
            "example": "UK National Minimum Wage rates for 2025-2026 tax year"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ],
            "description": "Unit of measurement for the rate",
            "example": "HOURLY"
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ],
            "description": "Jurisdiction the rate applies to",
            "example": "UK"
          }
        },
        "required": [
          "unit"
        ]
      },
      "AdminBulkImportRateGroupDto": {
        "type": "object",
        "properties": {
          "duplicateHandling": {
            "type": "string",
            "description": "Import option for duplicate records",
            "enum": [
              "overwrite",
              "skip"
            ],
            "example": "overwrite",
            "default": "overwrite"
          }
        },
        "required": [
          "duplicateHandling"
        ]
      },
      "AdminRateEntryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "groupId": {
            "type": "string",
            "description": "Rate group ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startsAt": {
            "format": "date-time",
            "type": "string",
            "description": "Effective start date (inclusive)",
            "example": "2025-04-01T00:00:00.000Z"
          },
          "endsAt": {
            "type": "object",
            "description": "Effective end date (null = open-ended)",
            "example": "2026-03-31T23:59:59.999Z"
          },
          "params": {
            "type": "object",
            "description": "Parameters for the rate entry",
            "example": {
              "ageBand": "21-22",
              "taxYear": "2025/26"
            }
          },
          "valueDecimal": {
            "type": "object",
            "description": "Decimal value for the rate",
            "example": "11.44"
          },
          "valueText": {
            "type": "object",
            "description": "Text value for complex rates",
            "example": "90% of AWE"
          },
          "notes": {
            "type": "object",
            "description": "Additional notes"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation",
            "example": "NMW Act 1998 – s.1"
          },
          "url": {
            "type": "string",
            "description": "Reference URL",
            "example": "https://gov.uk/national-minimum-wage-rates"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "groupId",
          "startsAt",
          "citation",
          "url",
          "created_at"
        ]
      },
      "AdminPaginatedRateEntryResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of rate entries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminRateEntryResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "i": {
        "type": "object",
        "properties": {}
      },
      "AdminCreateRateEntryDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Rate group ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "startsAt": {
            "type": "string",
            "description": "Effective start date (inclusive)",
            "example": "2025-04-01T00:00:00.000Z"
          },
          "endsAt": {
            "type": "string",
            "description": "Effective end date (null = open-ended)",
            "example": "2026-03-31T23:59:59.999Z"
          },
          "params": {
            "type": "object",
            "description": "Parameters for the rate entry (age band, tax year, etc.)",
            "example": {
              "ageBand": "21-22",
              "taxYear": "2025/26"
            }
          },
          "valueDecimal": {
            "description": "Decimal value for the rate",
            "example": "11.44",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "valueText": {
            "type": "string",
            "description": "Text value for complex rates",
            "example": "90% of AWE"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Rate for apprentices under 19 or in first year"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation",
            "example": "NMW Act 1998 – s.1"
          },
          "url": {
            "type": "string",
            "description": "Reference URL",
            "example": "https://gov.uk/national-minimum-wage-rates"
          }
        },
        "required": [
          "groupId",
          "startsAt",
          "citation",
          "url"
        ]
      },
      "AdminUpdateRateEntryDto": {
        "type": "object",
        "properties": {
          "endsAt": {
            "type": "string",
            "description": "Effective end date (null = open-ended)",
            "example": "2026-03-31T23:59:59.999Z"
          },
          "params": {
            "type": "object",
            "description": "Parameters for the rate entry (age band, tax year, etc.)",
            "example": {
              "ageBand": "21-22",
              "taxYear": "2025/26"
            }
          },
          "valueDecimal": {
            "description": "Decimal value for the rate",
            "example": "11.44",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "valueText": {
            "type": "string",
            "description": "Text value for complex rates",
            "example": "90% of AWE"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Rate for apprentices under 19 or in first year"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation",
            "example": "NMW Act 1998 – s.1"
          },
          "url": {
            "type": "string",
            "description": "Reference URL",
            "example": "https://gov.uk/national-minimum-wage-rates"
          }
        }
      },
      "AdminBulkImportRateEntryDto": {
        "type": "object",
        "properties": {
          "duplicateHandling": {
            "type": "string",
            "description": "Import option for duplicate records",
            "enum": [
              "overwrite",
              "skip"
            ],
            "example": "overwrite",
            "default": "overwrite"
          }
        },
        "required": [
          "duplicateHandling"
        ]
      },
      "AdminPublicHolidayResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "region": {
            "type": "string",
            "description": "Region the holiday applies to",
            "example": "England & Wales"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Calendar date of the public holiday",
            "example": "2025-12-25T00:00:00.000Z"
          },
          "name": {
            "type": "string",
            "description": "Official holiday name",
            "example": "Christmas Day"
          },
          "description": {
            "type": "object",
            "description": "Additional description of the holiday",
            "example": "Christmas Day is a public holiday celebrating the birth of Jesus Christ"
          },
          "year": {
            "type": "number",
            "description": "Year of the holiday",
            "example": 2025
          }
        },
        "required": [
          "id",
          "region",
          "date",
          "name",
          "year"
        ]
      },
      "AdminPaginatedPublicHolidayResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of public holidays",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminPublicHolidayResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreatePublicHolidayDto": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "description": "Region the holiday applies to",
            "example": "England & Wales"
          },
          "date": {
            "type": "string",
            "description": "Calendar date of the public holiday",
            "example": "2025-12-25"
          },
          "name": {
            "type": "string",
            "description": "Official holiday name",
            "example": "Christmas Day"
          },
          "description": {
            "type": "string",
            "description": "Additional description of the holiday",
            "example": "Christmas Day is a public holiday celebrating the birth of Jesus Christ"
          },
          "year": {
            "type": "number",
            "description": "Year of the holiday",
            "example": 2025
          }
        },
        "required": [
          "region",
          "date",
          "name",
          "year"
        ]
      },
      "AdminUpdatePublicHolidayDto": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "description": "Region the holiday applies to",
            "example": "England & Wales"
          },
          "date": {
            "type": "string",
            "description": "Calendar date of the public holiday",
            "example": "2025-12-25"
          },
          "name": {
            "type": "string",
            "description": "Official holiday name",
            "example": "Christmas Day"
          },
          "description": {
            "type": "string",
            "description": "Additional description of the holiday",
            "example": "Christmas Day is a public holiday celebrating the birth of Jesus Christ"
          },
          "year": {
            "type": "number",
            "description": "Year of the holiday",
            "example": 2025
          }
        }
      },
      "AdminBulkImportPublicHolidayDto": {
        "type": "object",
        "properties": {
          "duplicateHandling": {
            "type": "string",
            "description": "Import option for duplicate records",
            "enum": [
              "overwrite",
              "skip"
            ],
            "example": "overwrite",
            "default": "overwrite"
          }
        },
        "required": [
          "duplicateHandling"
        ]
      },
      "AdminStatutoryWorkingHourRuleResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Name of the working hour rule",
            "example": "UK Working Time Regulations 1998"
          },
          "max_avg_weekly_hours": {
            "type": "number",
            "description": "Maximum average weekly hours allowed",
            "example": 48
          },
          "averaging_period_weeks": {
            "type": "number",
            "description": "Number of weeks over which the average is calculated",
            "example": 17
          },
          "min_daily_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest between shifts (hours)",
            "example": 11
          },
          "min_weekly_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest each week (hours)",
            "example": 24
          },
          "min_break_minutes_per_shift": {
            "type": "number",
            "description": "Minimum break during a shift (>6 h) in minutes",
            "example": 20
          },
          "legal_source": {
            "type": "string",
            "description": "Source or legal citation (for audit trail)",
            "example": "The Working Time Regulations 1998 (SI 1998/1833)"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "max_avg_weekly_hours",
          "averaging_period_weeks",
          "min_daily_rest_hours",
          "min_weekly_rest_hours",
          "min_break_minutes_per_shift",
          "legal_source",
          "updated_at"
        ]
      },
      "AdminPaginatedStatutoryWorkingHourRuleResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of statutory working hour rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminStatutoryWorkingHourRuleResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateStatutoryWorkingHourRuleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the working hour rule",
            "example": "UK Working Time Regulations 1998"
          },
          "max_avg_weekly_hours": {
            "type": "number",
            "description": "Maximum average weekly hours allowed",
            "example": 48
          },
          "averaging_period_weeks": {
            "type": "number",
            "description": "Number of weeks over which the average is calculated",
            "example": 17
          },
          "min_daily_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest between shifts (hours)",
            "example": 11
          },
          "min_weekly_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest each week (hours)",
            "example": 24
          },
          "min_break_minutes_per_shift": {
            "type": "number",
            "description": "Minimum break during a shift (>6 h) in minutes",
            "example": 20
          },
          "legal_source": {
            "type": "string",
            "description": "Source or legal citation (for audit trail)",
            "example": "The Working Time Regulations 1998 (SI 1998/1833)"
          }
        },
        "required": [
          "name",
          "max_avg_weekly_hours",
          "averaging_period_weeks",
          "min_daily_rest_hours",
          "min_weekly_rest_hours",
          "min_break_minutes_per_shift",
          "legal_source"
        ]
      },
      "AdminUpdateStatutoryWorkingHourRuleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the working hour rule",
            "example": "UK Working Time Regulations 1998"
          },
          "max_avg_weekly_hours": {
            "type": "number",
            "description": "Maximum average weekly hours allowed",
            "example": 48
          },
          "averaging_period_weeks": {
            "type": "number",
            "description": "Number of weeks over which the average is calculated",
            "example": 17
          },
          "min_daily_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest between shifts (hours)",
            "example": 11
          },
          "min_weekly_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest each week (hours)",
            "example": 24
          },
          "min_break_minutes_per_shift": {
            "type": "number",
            "description": "Minimum break during a shift (>6 h) in minutes",
            "example": 20
          },
          "legal_source": {
            "type": "string",
            "description": "Source or legal citation (for audit trail)",
            "example": "The Working Time Regulations 1998 (SI 1998/1833)"
          }
        }
      },
      "AdminBulkImportStatutoryWorkingHourRuleDto": {
        "type": "object",
        "properties": {
          "duplicateHandling": {
            "type": "string",
            "description": "Import option for duplicate records",
            "enum": [
              "overwrite",
              "skip"
            ],
            "example": "overwrite",
            "default": "overwrite"
          }
        },
        "required": [
          "duplicateHandling"
        ]
      },
      "AdminStatutoryPayRateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "code": {
            "type": "string",
            "description": "Code matching HR_RATE.code",
            "example": "OVERTIME_1_5X"
          },
          "name": {
            "type": "string",
            "description": "Descriptive label for the pay rate",
            "example": "Overtime 1.5x"
          },
          "rate_multiplier": {
            "description": "Multiplier applied to basic hourly rate",
            "example": "1.50",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "effective_from": {
            "format": "date-time",
            "type": "string",
            "description": "Valid-from date",
            "example": "2025-04-01T00:00:00.000Z"
          },
          "effective_to": {
            "type": "object",
            "description": "Valid-to date (null = open-ended)",
            "example": "2026-03-31T00:00:00.000Z"
          },
          "legal_source": {
            "type": "object",
            "description": "Legal source or citation",
            "example": "Working Time Regulations 1998"
          }
        },
        "required": [
          "id",
          "code",
          "name",
          "rate_multiplier",
          "effective_from"
        ]
      },
      "AdminPaginatedStatutoryPayRateResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of statutory pay rates",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminStatutoryPayRateResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateStatutoryPayRateDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code matching HR_RATE.code",
            "example": "OVERTIME_1_5X"
          },
          "name": {
            "type": "string",
            "description": "Descriptive label for the pay rate",
            "example": "Overtime 1.5x"
          },
          "rate_multiplier": {
            "type": "string",
            "description": "Multiplier applied to basic hourly rate",
            "example": "1.50"
          },
          "effective_from": {
            "type": "string",
            "description": "Valid-from date",
            "example": "2025-04-01"
          },
          "effective_to": {
            "type": "string",
            "description": "Valid-to date (null = open-ended)",
            "example": "2026-03-31"
          },
          "legal_source": {
            "type": "string",
            "description": "Legal source or citation",
            "example": "Working Time Regulations 1998"
          }
        },
        "required": [
          "code",
          "name",
          "rate_multiplier",
          "effective_from"
        ]
      },
      "AdminUpdateStatutoryPayRateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Descriptive label for the pay rate",
            "example": "Overtime 1.5x"
          },
          "rate_multiplier": {
            "type": "string",
            "description": "Multiplier applied to basic hourly rate",
            "example": "1.50"
          },
          "effective_from": {
            "type": "string",
            "description": "Valid-from date",
            "example": "2025-04-01"
          },
          "effective_to": {
            "type": "string",
            "description": "Valid-to date (null = open-ended)",
            "example": "2026-03-31"
          },
          "legal_source": {
            "type": "string",
            "description": "Legal source or citation",
            "example": "Working Time Regulations 1998"
          }
        }
      },
      "AdminBulkImportStatutoryPayRateDto": {
        "type": "object",
        "properties": {
          "duplicateHandling": {
            "type": "string",
            "description": "Import option for duplicate records",
            "enum": [
              "overwrite",
              "skip"
            ],
            "example": "overwrite",
            "default": "overwrite"
          }
        },
        "required": [
          "duplicateHandling"
        ]
      },
      "EmployeeProfileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "employee_no": {
            "type": "string",
            "example": "EMP001"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "example": "07700900123"
          },
          "address": {
            "type": "string",
            "example": "123 Main Street, London"
          },
          "postcode": {
            "type": "string",
            "example": "SW1A 1AA"
          },
          "emergency_contact_name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "emergency_contact_phone": {
            "type": "string",
            "example": "07800123456"
          },
          "bank_name": {
            "type": "string",
            "example": "Barclays Bank"
          },
          "bank_account_no": {
            "type": "string",
            "example": "12345678"
          },
          "bank_sort_code": {
            "type": "string",
            "example": "20-00-00"
          },
          "current_position": {
            "type": "string",
            "example": "Software Engineer"
          },
          "current_department": {
            "type": "string",
            "example": "Engineering Department"
          }
        },
        "required": [
          "id",
          "employee_no",
          "first_name",
          "last_name",
          "email",
          "phone",
          "address",
          "postcode",
          "emergency_contact_name",
          "emergency_contact_phone",
          "bank_name",
          "bank_account_no",
          "bank_sort_code",
          "current_position",
          "current_department"
        ]
      },
      "UpdatePersonalInfoDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "example": "07700900123"
          },
          "address": {
            "type": "string",
            "example": "123 Main Street, London"
          },
          "postcode": {
            "type": "string",
            "example": "SW1A 1AA"
          },
          "emergency_contact_name": {
            "type": "string",
            "example": "John Doe"
          },
          "emergency_contact_phone": {
            "type": "string",
            "example": "07800123456"
          },
          "bank_name": {
            "type": "string",
            "example": "Barclays Bank"
          },
          "bank_account_no": {
            "type": "string",
            "example": "12345678"
          },
          "bank_sort_code": {
            "type": "string",
            "example": "20-00-00"
          }
        }
      },
      "PayslipSummaryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "pay_period": {
            "type": "string",
            "example": "2024-01"
          },
          "gross_pay": {
            "type": "number",
            "example": 3500
          },
          "net_pay": {
            "type": "number",
            "example": 2800
          },
          "pay_date": {
            "type": "string",
            "example": "2024-01-31"
          },
          "status": {
            "type": "string",
            "example": "PAID"
          }
        },
        "required": [
          "id",
          "pay_period",
          "gross_pay",
          "net_pay",
          "pay_date",
          "status"
        ]
      },
      "YearToDateSummaryDto": {
        "type": "object",
        "properties": {
          "total_gross_pay": {
            "type": "number",
            "example": 42000
          },
          "total_net_pay": {
            "type": "number",
            "example": 33600
          },
          "total_tax": {
            "type": "number",
            "example": 8400
          },
          "total_ni": {
            "type": "number",
            "example": 4200
          },
          "year": {
            "type": "number",
            "example": 2024
          }
        },
        "required": [
          "total_gross_pay",
          "total_net_pay",
          "total_tax",
          "total_ni",
          "year"
        ]
      },
      "LeaveBalanceDto": {
        "type": "object",
        "properties": {
          "leave_type": {
            "type": "string",
            "example": "Annual Leave"
          },
          "entitlement_days": {
            "type": "number",
            "example": 25
          },
          "used_days": {
            "type": "number",
            "example": 10
          },
          "remaining_days": {
            "type": "number",
            "example": 15
          },
          "pending_days": {
            "type": "number",
            "example": 2
          }
        },
        "required": [
          "leave_type",
          "entitlement_days",
          "used_days",
          "remaining_days",
          "pending_days"
        ]
      },
      "EmployeeDocumentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "document_type": {
            "type": "string",
            "example": "passport"
          },
          "document_name": {
            "type": "string",
            "example": "UK Passport"
          },
          "file_path": {
            "type": "string",
            "example": "documents/employee/uuid/passport.pdf"
          },
          "file_size": {
            "type": "number",
            "example": 1024000
          },
          "mime_type": {
            "type": "string",
            "example": "application/pdf"
          },
          "upload_date": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z"
          },
          "expiry_date": {
            "type": "string",
            "example": "2030-12-31"
          },
          "status": {
            "type": "string",
            "example": "active"
          }
        },
        "required": [
          "id",
          "document_type",
          "document_name",
          "file_path",
          "file_size",
          "mime_type",
          "upload_date",
          "expiry_date",
          "status"
        ]
      },
      "CreateJobPostingDto": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "example": "uuid"
          },
          "posting_title": {
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "posting_description": {
            "type": "string",
            "example": "We are looking for a senior software engineer..."
          },
          "requirements": {
            "type": "string",
            "example": "5+ years experience in TypeScript..."
          },
          "benefits": {
            "type": "string",
            "example": "Health insurance, pension..."
          },
          "salary_range_min": {
            "type": "number",
            "example": 50000
          },
          "salary_range_max": {
            "type": "number",
            "example": 80000
          },
          "employment_type": {
            "type": "string",
            "example": "PERMANENT"
          },
          "location": {
            "type": "string",
            "example": "London"
          },
          "remote_work_allowed": {
            "type": "boolean",
            "example": true
          },
          "closing_date": {
            "type": "string",
            "example": "2024-12-31"
          },
          "hiring_manager_id": {
            "type": "string",
            "example": "uuid"
          },
          "hr_contact_id": {
            "type": "string",
            "example": "uuid"
          },
          "internal_only": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "posting_title",
          "posting_description",
          "requirements",
          "employment_type"
        ]
      },
      "UpdateJobPostingDto": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "example": "uuid"
          },
          "posting_title": {
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "posting_description": {
            "type": "string",
            "example": "We are looking for a senior software engineer..."
          },
          "requirements": {
            "type": "string",
            "example": "5+ years experience in TypeScript..."
          },
          "employment_type": {
            "type": "string",
            "example": "FULL_TIME"
          },
          "location": {
            "type": "string",
            "example": "London, UK"
          },
          "salary_min": {
            "type": "number",
            "example": 50000
          },
          "salary_max": {
            "type": "number",
            "example": 80000
          },
          "posted_date": {
            "type": "string",
            "example": "2024-01-01"
          },
          "closing_date": {
            "type": "string",
            "example": "2024-03-01"
          },
          "hiring_manager_id": {
            "type": "string",
            "example": "uuid"
          },
          "hr_contact_id": {
            "type": "string",
            "example": "uuid"
          },
          "remote_work_allowed": {
            "type": "boolean",
            "example": true
          },
          "internal_only": {
            "type": "boolean",
            "example": false
          },
          "posting_status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "PAUSED",
              "CLOSED",
              "CANCELLED",
              "ARCHIVED"
            ]
          }
        }
      },
      "CreateCandidateDto": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "example": "07912345678"
          },
          "address": {
            "type": "string",
            "example": "SW1A 1AA"
          },
          "linkedin_profile": {
            "type": "string",
            "example": "https://linkedin.com/in/johndoe"
          },
          "current_employer": {
            "type": "string",
            "example": "Acme Corp"
          },
          "current_position": {
            "type": "string",
            "example": "Senior Developer"
          },
          "expected_salary": {
            "type": "number",
            "example": 65000
          },
          "availability_date": {
            "type": "string",
            "example": "2024-02-01"
          },
          "right_to_work_uk": {
            "type": "boolean",
            "example": true
          },
          "visa_required": {
            "type": "boolean",
            "example": false
          },
          "visa_type": {
            "type": "string",
            "example": "Tier 2"
          },
          "source": {
            "type": "string",
            "enum": [
              "WEBSITE",
              "REFERRAL",
              "LINKEDIN",
              "AGENCY",
              "JOB_BOARD",
              "DIRECT_APPLICATION",
              "OTHER"
            ]
          },
          "source_details": {
            "type": "string",
            "example": "Referred by Jane Smith"
          },
          "notes": {
            "type": "string",
            "example": "Additional notes..."
          },
          "gdpr_consent": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email",
          "source",
          "gdpr_consent"
        ]
      },
      "ScheduleInterviewDto": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string",
            "example": "uuid"
          },
          "candidate_id": {
            "type": "string",
            "example": "uuid"
          },
          "interview_type": {
            "type": "string",
            "example": "phone"
          },
          "interview_round": {
            "type": "number",
            "example": 1
          },
          "scheduled_date": {
            "type": "string",
            "example": "2024-01-15T10:00:00Z"
          },
          "scheduled_time": {
            "type": "string",
            "example": "10:00"
          },
          "duration_minutes": {
            "type": "number",
            "example": 60
          },
          "location": {
            "type": "string",
            "example": "Office - Meeting Room 1"
          },
          "video_meeting_link": {
            "type": "string",
            "example": "https://zoom.us/j/123456789"
          },
          "meeting_link": {
            "type": "string",
            "example": "https://meet.google.com/abc-defg-hij"
          },
          "interviewer_ids": {
            "example": [
              "uuid1",
              "uuid2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "interview_agenda": {
            "type": "string",
            "example": "Technical discussion, culture fit"
          },
          "candidate_notes": {
            "type": "string",
            "example": "Prepare portfolio"
          }
        },
        "required": [
          "application_id",
          "candidate_id",
          "interview_type",
          "scheduled_date",
          "interviewer_ids"
        ]
      },
      "SubmitInterviewFeedbackDto": {
        "type": "object",
        "properties": {
          "technical_score": {
            "type": "number",
            "example": 4.5
          },
          "communication_score": {
            "type": "number",
            "example": 4
          },
          "cultural_fit_score": {
            "type": "number",
            "example": 4.5
          },
          "overall_score": {
            "type": "number",
            "example": 4.3
          },
          "recommendation": {
            "type": "string",
            "enum": [
              "STRONG_HIRE",
              "HIRE",
              "MAYBE",
              "NO_HIRE",
              "STRONG_NO_HIRE"
            ]
          },
          "strengths": {
            "type": "string",
            "example": "Strong technical skills..."
          },
          "weaknesses": {
            "type": "string",
            "example": "Could improve on..."
          },
          "detailed_feedback": {
            "type": "string",
            "example": "Detailed feedback..."
          },
          "concerns": {
            "type": "string",
            "example": "No major concerns"
          },
          "questions_asked": {
            "type": "string",
            "example": "Asked about experience with..."
          },
          "additional_notes": {
            "type": "string",
            "example": "Additional notes..."
          }
        },
        "required": [
          "overall_score",
          "recommendation"
        ]
      },
      "CreateOfferDto": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string",
            "example": "uuid"
          },
          "offer_type": {
            "type": "string",
            "example": "full_time"
          },
          "position_title": {
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "department_id": {
            "type": "string",
            "example": "uuid"
          },
          "salary_amount": {
            "type": "number",
            "example": 65000
          },
          "salary_frequency": {
            "type": "string",
            "example": "annual"
          },
          "benefits": {
            "type": "object"
          },
          "start_date": {
            "type": "string",
            "example": "2024-02-01"
          },
          "contract_length": {
            "type": "number",
            "example": 12
          },
          "probation_period": {
            "type": "number",
            "example": 6
          },
          "working_hours": {
            "type": "number",
            "example": 37.5
          },
          "holiday_entitlement": {
            "type": "number",
            "example": 28
          },
          "response_deadline": {
            "type": "string",
            "example": "2024-01-20"
          }
        },
        "required": [
          "application_id",
          "offer_type",
          "position_title",
          "salary_amount"
        ]
      },
      "AcceptOfferDto": {
        "type": "object",
        "properties": {
          "accepted_terms": {
            "type": "boolean",
            "example": true
          },
          "comments": {
            "type": "string",
            "example": "Additional comments..."
          }
        },
        "required": [
          "accepted_terms"
        ]
      },
      "DeclineOfferDto": {
        "type": "object",
        "properties": {
          "decline_reason": {
            "type": "string",
            "example": "Better opportunity elsewhere"
          },
          "feedback": {
            "type": "string",
            "example": "Additional feedback..."
          }
        },
        "required": [
          "decline_reason"
        ]
      },
      "CreatePerformanceCycleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Performance cycle name"
          },
          "cycle_type": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "SEMI_ANNUAL",
              "QUARTERLY",
              "MONTHLY"
            ],
            "description": "Type of performance cycle"
          },
          "start_date": {
            "type": "string",
            "description": "Cycle start date"
          },
          "end_date": {
            "type": "string",
            "description": "Cycle end date"
          },
          "goal_setting_deadline": {
            "type": "string",
            "description": "Goal setting deadline"
          },
          "mid_review_date": {
            "type": "string",
            "description": "Mid-cycle review date"
          },
          "final_review_deadline": {
            "type": "string",
            "description": "Final review deadline"
          },
          "description": {
            "type": "string",
            "description": "Cycle description"
          }
        },
        "required": [
          "name",
          "cycle_type",
          "start_date",
          "end_date"
        ]
      },
      "PerformanceCycleResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "cycle_type": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "SEMI_ANNUAL",
              "QUARTERLY",
              "MONTHLY"
            ]
          },
          "start_date": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "goal_setting_deadline": {
            "type": "string"
          },
          "mid_review_date": {
            "type": "string"
          },
          "final_review_deadline": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PLANNING",
              "ACTIVE",
              "REVIEW_PERIOD",
              "CALIBRATION",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "cycle_type",
          "start_date",
          "end_date",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "UpdatePerformanceCycleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Performance cycle name"
          },
          "cycle_type": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "SEMI_ANNUAL",
              "QUARTERLY",
              "MONTHLY"
            ],
            "description": "Type of performance cycle"
          },
          "start_date": {
            "type": "string",
            "description": "Cycle start date"
          },
          "end_date": {
            "type": "string",
            "description": "Cycle end date"
          },
          "goal_setting_deadline": {
            "type": "string",
            "description": "Goal setting deadline"
          },
          "mid_review_date": {
            "type": "string",
            "description": "Mid-cycle review date"
          },
          "final_review_deadline": {
            "type": "string",
            "description": "Final review deadline"
          },
          "description": {
            "type": "string",
            "description": "Cycle description"
          },
          "status": {
            "type": "string",
            "enum": [
              "PLANNING",
              "ACTIVE",
              "REVIEW_PERIOD",
              "CALIBRATION",
              "COMPLETED",
              "CANCELLED"
            ],
            "description": "Cycle status"
          }
        }
      },
      "CreatePerformanceGoalDto": {
        "type": "object",
        "properties": {
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "goal_category": {
            "type": "string",
            "enum": [
              "STRATEGIC",
              "OPERATIONAL",
              "PERSONAL_DEVELOPMENT",
              "BEHAVIORAL"
            ],
            "description": "Goal category"
          },
          "title": {
            "type": "string",
            "description": "Goal title"
          },
          "description": {
            "type": "string",
            "description": "Goal description"
          },
          "success_criteria": {
            "type": "string",
            "description": "Success criteria"
          },
          "measurement_method": {
            "type": "string",
            "description": "Measurement method"
          },
          "target_value": {
            "type": "number",
            "description": "Target value"
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement"
          },
          "weight_percentage": {
            "type": "number",
            "description": "Goal weight percentage",
            "minimum": 0,
            "maximum": 100
          },
          "priority": {
            "type": "string",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "description": "Goal priority"
          },
          "due_date": {
            "type": "string",
            "description": "Due date"
          },
          "manager_id": {
            "type": "string",
            "description": "Manager ID"
          }
        },
        "required": [
          "cycle_id",
          "goal_category",
          "title"
        ]
      },
      "PerformanceGoalResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "cycle_id": {
            "type": "string"
          },
          "goal_category": {
            "type": "string",
            "enum": [
              "STRATEGIC",
              "OPERATIONAL",
              "PERSONAL_DEVELOPMENT",
              "BEHAVIORAL"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "success_criteria": {
            "type": "string"
          },
          "measurement_method": {
            "type": "string"
          },
          "target_value": {
            "type": "number"
          },
          "current_value": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          },
          "weight_percentage": {
            "type": "number"
          },
          "priority": {
            "type": "string",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "IN_PROGRESS",
              "COMPLETED",
              "CANCELLED",
              "OVERDUE"
            ]
          },
          "progress_percentage": {
            "type": "number"
          },
          "due_date": {
            "type": "string"
          },
          "manager_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "employee_id",
          "cycle_id",
          "goal_category",
          "title",
          "weight_percentage",
          "priority",
          "status",
          "progress_percentage",
          "created_at",
          "updated_at"
        ]
      },
      "UpdatePerformanceGoalDto": {
        "type": "object",
        "properties": {
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "goal_category": {
            "type": "string",
            "enum": [
              "STRATEGIC",
              "OPERATIONAL",
              "PERSONAL_DEVELOPMENT",
              "BEHAVIORAL"
            ],
            "description": "Goal category"
          },
          "title": {
            "type": "string",
            "description": "Goal title"
          },
          "description": {
            "type": "string",
            "description": "Goal description"
          },
          "success_criteria": {
            "type": "string",
            "description": "Success criteria"
          },
          "measurement_method": {
            "type": "string",
            "description": "Measurement method"
          },
          "target_value": {
            "type": "number",
            "description": "Target value"
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement"
          },
          "weight_percentage": {
            "type": "number",
            "description": "Goal weight percentage",
            "minimum": 0,
            "maximum": 100
          },
          "priority": {
            "type": "string",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "description": "Goal priority"
          },
          "due_date": {
            "type": "string",
            "description": "Due date"
          },
          "manager_id": {
            "type": "string",
            "description": "Manager ID"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "IN_PROGRESS",
              "COMPLETED",
              "CANCELLED",
              "OVERDUE"
            ],
            "description": "Goal status"
          },
          "current_value": {
            "type": "number",
            "description": "Current value"
          },
          "progress_percentage": {
            "type": "number",
            "description": "Progress percentage",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "GoalUpdateDto": {
        "type": "object",
        "properties": {
          "new_value": {
            "type": "number",
            "description": "New value"
          },
          "progress_percentage": {
            "type": "number",
            "description": "Progress percentage",
            "minimum": 0,
            "maximum": 100
          },
          "update_notes": {
            "type": "string",
            "description": "Update notes"
          }
        }
      },
      "CreateContinuousFeedbackDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID receiving feedback"
          },
          "feedback_type": {
            "type": "string",
            "enum": [
              "PRAISE",
              "CONSTRUCTIVE",
              "COACHING",
              "GOAL_PROGRESS"
            ],
            "description": "Type of feedback"
          },
          "category": {
            "type": "string",
            "description": "Feedback category"
          },
          "title": {
            "type": "string",
            "description": "Feedback title"
          },
          "feedback_content": {
            "type": "string",
            "description": "Feedback content"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "MANAGER",
              "TEAM",
              "PUBLIC"
            ],
            "description": "Feedback visibility",
            "default": "PRIVATE"
          },
          "is_anonymous": {
            "type": "boolean",
            "description": "Whether feedback is anonymous",
            "default": false
          },
          "tags": {
            "description": "Tags for categorization",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "related_goal_id": {
            "type": "string",
            "description": "Related goal ID"
          }
        },
        "required": [
          "employee_id",
          "feedback_type",
          "feedback_content"
        ]
      },
      "ContinuousFeedbackResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "feedback_giver_id": {
            "type": "string"
          },
          "feedback_type": {
            "type": "string",
            "enum": [
              "PRAISE",
              "CONSTRUCTIVE",
              "COACHING",
              "GOAL_PROGRESS"
            ]
          },
          "category": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "feedback_content": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "MANAGER",
              "TEAM",
              "PUBLIC"
            ]
          },
          "is_anonymous": {
            "type": "boolean"
          },
          "tags": {
            "type": "object"
          },
          "related_goal_id": {
            "type": "string"
          },
          "acknowledged": {
            "type": "boolean"
          },
          "acknowledged_at": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "employee_id",
          "feedback_giver_id",
          "feedback_type",
          "feedback_content",
          "visibility",
          "is_anonymous",
          "acknowledged",
          "created_at"
        ]
      },
      "AcknowledgeFeedbackDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Acknowledgement message"
          }
        }
      },
      "CreatePerformanceReviewDto": {
        "type": "object",
        "properties": {
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "template_id": {
            "type": "string",
            "description": "Review template ID"
          },
          "review_type": {
            "type": "string",
            "enum": [
              "SELF",
              "MANAGER",
              "PEER",
              "SUBORDINATE",
              "CUSTOMER"
            ],
            "description": "Type of review"
          },
          "reviewer_id": {
            "type": "string",
            "description": "Reviewer ID"
          },
          "review_period_start": {
            "type": "string",
            "description": "Review period start date"
          },
          "review_period_end": {
            "type": "string",
            "description": "Review period end date"
          },
          "due_date": {
            "type": "string",
            "description": "Due date for review completion"
          }
        },
        "required": [
          "cycle_id",
          "template_id",
          "review_type",
          "reviewer_id"
        ]
      },
      "PerformanceReviewResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "cycle_id": {
            "type": "string"
          },
          "template_id": {
            "type": "string"
          },
          "review_type": {
            "type": "string",
            "enum": [
              "SELF",
              "MANAGER",
              "PEER",
              "SUBORDINATE",
              "CUSTOMER"
            ]
          },
          "reviewer_id": {
            "type": "string"
          },
          "review_period_start": {
            "type": "string"
          },
          "review_period_end": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "IN_PROGRESS",
              "SUBMITTED",
              "COMPLETED",
              "APPROVED"
            ]
          },
          "overall_rating": {
            "type": "number"
          },
          "goal_achievement_score": {
            "type": "number"
          },
          "competency_score": {
            "type": "number"
          },
          "behavioral_score": {
            "type": "number"
          },
          "strengths": {
            "type": "string"
          },
          "areas_for_improvement": {
            "type": "string"
          },
          "development_recommendations": {
            "type": "string"
          },
          "manager_comments": {
            "type": "string"
          },
          "employee_comments": {
            "type": "string"
          },
          "submitted_at": {
            "type": "string"
          },
          "completed_at": {
            "type": "string"
          },
          "due_date": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "employee_id",
          "cycle_id",
          "template_id",
          "review_type",
          "reviewer_id",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "UpdatePerformanceReviewDto": {
        "type": "object",
        "properties": {
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "template_id": {
            "type": "string",
            "description": "Review template ID"
          },
          "review_type": {
            "type": "string",
            "enum": [
              "SELF",
              "MANAGER",
              "PEER",
              "SUBORDINATE",
              "CUSTOMER"
            ],
            "description": "Type of review"
          },
          "reviewer_id": {
            "type": "string",
            "description": "Reviewer ID"
          },
          "review_period_start": {
            "type": "string",
            "description": "Review period start date"
          },
          "review_period_end": {
            "type": "string",
            "description": "Review period end date"
          },
          "due_date": {
            "type": "string",
            "description": "Due date for review completion"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "IN_PROGRESS",
              "SUBMITTED",
              "COMPLETED",
              "APPROVED"
            ],
            "description": "Review status"
          },
          "overall_rating": {
            "type": "number",
            "description": "Overall rating",
            "minimum": 1,
            "maximum": 5
          },
          "goal_achievement_score": {
            "type": "number",
            "description": "Goal achievement score",
            "minimum": 0,
            "maximum": 100
          },
          "competency_score": {
            "type": "number",
            "description": "Competency score",
            "minimum": 0,
            "maximum": 100
          },
          "behavioral_score": {
            "type": "number",
            "description": "Behavioral score",
            "minimum": 0,
            "maximum": 100
          },
          "strengths": {
            "type": "string",
            "description": "Strengths identified"
          },
          "areas_for_improvement": {
            "type": "string",
            "description": "Areas for improvement"
          },
          "development_recommendations": {
            "type": "string",
            "description": "Development recommendations"
          },
          "manager_comments": {
            "type": "string",
            "description": "Manager comments"
          },
          "employee_comments": {
            "type": "string",
            "description": "Employee comments"
          }
        }
      },
      "ReviewResponseDto": {
        "type": "object",
        "properties": {
          "question_id": {
            "type": "string",
            "description": "Question ID from template"
          },
          "section_name": {
            "type": "string",
            "description": "Section name"
          },
          "question_text": {
            "type": "string",
            "description": "Question text"
          },
          "response_type": {
            "type": "string",
            "description": "Response type"
          },
          "response_value": {
            "type": "string",
            "description": "Response value"
          },
          "rating_score": {
            "type": "number",
            "description": "Rating score",
            "minimum": 1,
            "maximum": 5
          },
          "weight": {
            "type": "number",
            "description": "Weight"
          },
          "comments": {
            "type": "string",
            "description": "Comments"
          }
        },
        "required": [
          "question_id",
          "response_type"
        ]
      },
      "SubmitReviewResponsesDto": {
        "type": "object",
        "properties": {
          "responses": {
            "description": "Review responses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewResponseDto"
            }
          }
        },
        "required": [
          "responses"
        ]
      },
      "CreateFeedback360SessionDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID being reviewed"
          },
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "session_name": {
            "type": "string",
            "description": "Session name"
          },
          "description": {
            "type": "string",
            "description": "Session description"
          },
          "start_date": {
            "type": "string",
            "description": "Start date",
            "example": "2024-01-01"
          },
          "end_date": {
            "type": "string",
            "description": "End date",
            "example": "2024-01-31"
          },
          "reviewer_ids": {
            "description": "Reviewer IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allow_anonymous": {
            "type": "boolean",
            "description": "Allow anonymous feedback"
          },
          "include_self_assessment": {
            "type": "boolean",
            "description": "Include self assessment"
          },
          "include_manager_assessment": {
            "type": "boolean",
            "description": "Include manager assessment"
          },
          "include_peer_assessment": {
            "type": "boolean",
            "description": "Include peer assessment"
          },
          "include_subordinate_assessment": {
            "type": "boolean",
            "description": "Include subordinate assessment"
          }
        },
        "required": [
          "employee_id",
          "cycle_id",
          "session_name",
          "start_date",
          "end_date",
          "reviewer_ids"
        ]
      },
      "Feedback360SessionResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "cycle_id": {
            "type": "string"
          },
          "session_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "SETUP",
              "NOMINATION",
              "FEEDBACK_COLLECTION",
              "COMPLETED"
            ]
          },
          "allow_anonymous": {
            "type": "boolean"
          },
          "include_self_assessment": {
            "type": "boolean"
          },
          "include_manager_assessment": {
            "type": "boolean"
          },
          "include_peer_assessment": {
            "type": "boolean"
          },
          "include_subordinate_assessment": {
            "type": "boolean"
          },
          "configuration": {
            "type": "object"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "employee_id",
          "cycle_id",
          "session_name",
          "start_date",
          "end_date",
          "status",
          "allow_anonymous",
          "include_self_assessment",
          "include_manager_assessment",
          "include_peer_assessment",
          "include_subordinate_assessment",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateFeedback360SessionDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Session description"
          },
          "end_date": {
            "type": "string",
            "description": "End date",
            "example": "2024-01-31"
          },
          "status": {
            "type": "string",
            "enum": [
              "SETUP",
              "NOMINATION",
              "FEEDBACK_COLLECTION",
              "COMPLETED"
            ],
            "description": "Session status"
          },
          "additional_reviewer_ids": {
            "description": "Additional reviewer IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SubmitFeedback360ResponseDto": {
        "type": "object",
        "properties": {
          "responses": {
            "description": "Question responses",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "overall_comments": {
            "type": "string",
            "description": "Overall comments"
          },
          "is_anonymous": {
            "type": "boolean",
            "description": "Submit as anonymous"
          }
        },
        "required": [
          "responses"
        ]
      },
      "Feedback360SummaryDto": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string"
          },
          "total_reviewers": {
            "type": "number"
          },
          "completed_responses": {
            "type": "number"
          },
          "pending_responses": {
            "type": "number"
          },
          "average_ratings": {
            "type": "object"
          },
          "category_scores": {
            "type": "object"
          },
          "response_rate": {
            "type": "number"
          },
          "strengths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "improvement_areas": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "session_id",
          "total_reviewers",
          "completed_responses",
          "pending_responses",
          "average_ratings",
          "category_scores",
          "response_rate"
        ]
      },
      "CreatePerformanceImprovementPlanDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "plan_name": {
            "type": "string",
            "description": "Plan name"
          },
          "description": {
            "type": "string",
            "description": "Plan description"
          },
          "start_date": {
            "type": "string",
            "description": "Start date",
            "example": "2024-01-01"
          },
          "end_date": {
            "type": "string",
            "description": "End date",
            "example": "2024-03-31"
          },
          "review_frequency_days": {
            "type": "number",
            "description": "Review frequency in days"
          },
          "performance_issues": {
            "description": "Performance issues",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "success_criteria": {
            "description": "Success criteria",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "consequences": {
            "type": "string",
            "description": "Consequences if not met"
          },
          "support_provided": {
            "description": "Support provided",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "related_review_id": {
            "type": "string",
            "description": "Related performance review ID"
          }
        },
        "required": [
          "employee_id",
          "plan_name",
          "description",
          "start_date",
          "end_date",
          "review_frequency_days",
          "performance_issues",
          "success_criteria"
        ]
      },
      "PerformanceImprovementPlanResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "plan_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "end_date": {
            "type": "string"
          },
          "review_frequency_days": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "COMPLETED",
              "EXTENDED",
              "TERMINATED"
            ]
          },
          "performance_issues": {
            "type": "object"
          },
          "success_criteria": {
            "type": "object"
          },
          "consequences": {
            "type": "string"
          },
          "support_provided": {
            "type": "object"
          },
          "outcome": {
            "type": "string"
          },
          "final_assessment": {
            "type": "string"
          },
          "related_review_id": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "employee_id",
          "plan_name",
          "description",
          "start_date",
          "end_date",
          "review_frequency_days",
          "status",
          "performance_issues",
          "success_criteria",
          "created_at",
          "updated_at"
        ]
      },
      "UpdatePerformanceImprovementPlanDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Plan description"
          },
          "end_date": {
            "type": "string",
            "description": "End date",
            "example": "2024-03-31"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "COMPLETED",
              "EXTENDED",
              "TERMINATED"
            ],
            "description": "Plan status"
          },
          "success_criteria": {
            "description": "Success criteria",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "support_provided": {
            "description": "Support provided",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outcome": {
            "type": "string",
            "description": "Outcome"
          },
          "final_assessment": {
            "type": "string",
            "description": "Final assessment"
          }
        }
      }
    }
  }
}
