{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Application is running"
          }
        },
        "summary": "Get application status",
        "tags": [
          "System - Health"
        ]
      }
    },
    "/auth/status": {
      "get": {
        "operationId": "AppController_getAuthStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Authentication status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "authenticated": {
                      "type": "boolean"
                    },
                    "tenantId": {
                      "type": "string"
                    },
                    "userId": {
                      "type": "string"
                    },
                    "roles": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "permissions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get authentication status",
        "tags": [
          "System - Health"
        ]
      }
    },
    "/auth/health": {
      "get": {
        "operationId": "AppController_getAuthHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Authentication health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get authentication health status",
        "tags": [
          "System - Health"
        ]
      }
    },
    "/auth/user-info": {
      "get": {
        "operationId": "AppController_getUserInfo",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string"
                    },
                    "tenantId": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "fullContext": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get current user information using decorators",
        "tags": [
          "System - Health"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "AppController_getSystemHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "System health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "healthy",
                        "unhealthy",
                        "degraded"
                      ]
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "services": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "object"
                        },
                        "redis": {
                          "type": "object"
                        },
                        "rabbitmq": {
                          "type": "object"
                        }
                      }
                    },
                    "summary": {
                      "type": "object",
                      "properties": {
                        "healthy": {
                          "type": "number"
                        },
                        "unhealthy": {
                          "type": "number"
                        },
                        "degraded": {
                          "type": "number"
                        },
                        "total": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Comprehensive system health check",
        "tags": [
          "System - Health"
        ]
      }
    },
    "/health/live": {
      "get": {
        "operationId": "AppController_getLivenessProbe",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is alive",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is not alive"
          }
        },
        "summary": "Liveness probe for Kubernetes",
        "tags": [
          "System - Health"
        ]
      }
    },
    "/health/ready": {
      "get": {
        "operationId": "AppController_getReadinessProbe",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is ready",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service is not ready"
          }
        },
        "summary": "Readiness probe for Kubernetes",
        "tags": [
          "System - Health"
        ]
      }
    },
    "/health/{service}": {
      "get": {
        "operationId": "AppController_getServiceHealth",
        "parameters": [
          {
            "name": "service",
            "required": true,
            "in": "path",
            "description": "Service name",
            "schema": {
              "enum": [
                "database",
                "redis",
                "rabbitmq"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Service health status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "healthy",
                        "unhealthy",
                        "degraded"
                      ]
                    },
                    "message": {
                      "type": "string"
                    },
                    "responseTime": {
                      "type": "number"
                    },
                    "details": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Individual service health check",
        "tags": [
          "System - Health"
        ]
      }
    },
    "/audit": {
      "get": {
        "operationId": "AuditController_queryAuditLogs",
        "parameters": [
          {
            "name": "user_id",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "action",
            "required": false,
            "in": "query",
            "description": "Filter by action",
            "schema": {
              "type": "string",
              "enum": [
                "CREATE",
                "UPDATE",
                "DELETE",
                "VIEW",
                "EXPORT",
                "LOGIN",
                "LOGOUT",
                "APPROVE",
                "REJECT",
                "ASSIGN",
                "UNASSIGN"
              ]
            }
          },
          {
            "name": "resource_type",
            "required": false,
            "in": "query",
            "description": "Filter by resource type",
            "schema": {
              "example": "Employee",
              "type": "string"
            }
          },
          {
            "name": "resource_id",
            "required": false,
            "in": "query",
            "description": "Filter by resource ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "required": false,
            "in": "query",
            "description": "Start date for filtering",
            "schema": {
              "example": "2024-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": false,
            "in": "query",
            "description": "End date for filtering",
            "schema": {
              "example": "2024-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Query audit logs",
        "tags": [
          "Admin - Audit"
        ]
      }
    },
    "/audit/resource/{resourceType}/{resourceId}": {
      "get": {
        "operationId": "AuditController_getResourceAuditTrail",
        "parameters": [
          {
            "name": "resourceType",
            "required": true,
            "in": "path",
            "description": "Type of resource",
            "schema": {
              "example": "Employee",
              "type": "string"
            }
          },
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "description": "ID of the resource",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource audit trail retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get audit trail for a specific resource",
        "tags": [
          "Admin - Audit"
        ]
      }
    },
    "/audit/user/{userId}": {
      "get": {
        "operationId": "AuditController_getUserActivity",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "ID of the user",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User activity logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get activity logs for a specific user",
        "tags": [
          "Admin - Audit"
        ]
      }
    },
    "/audit/compliance-report": {
      "get": {
        "operationId": "AuditController_generateComplianceReport",
        "parameters": [
          {
            "name": "start_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Compliance report generated successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Generate compliance report",
        "tags": [
          "Admin - Audit"
        ]
      }
    },
    "/reports/generate": {
      "post": {
        "operationId": "ReportsController_generateReport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateReportDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Report generated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate a new report",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/reports/download/{reportId}": {
      "get": {
        "operationId": "ReportsController_downloadReport",
        "parameters": [
          {
            "name": "reportId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report file"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Download a generated report",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/reports/history": {
      "get": {
        "operationId": "ReportsController_getReportHistory",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "employee_list",
              "type": "string",
              "enum": [
                "employee_list",
                "employee_detail",
                "payroll_summary",
                "payroll_detail",
                "leave_summary",
                "leave_balance",
                "attendance_report",
                "department_summary",
                "audit_log",
                "compliance_report",
                "performance_review",
                "headcount_report",
                "turnover_report",
                "training_report"
              ]
            }
          },
          {
            "name": "format",
            "required": false,
            "in": "query",
            "schema": {
              "example": "pdf",
              "type": "string",
              "enum": [
                "pdf",
                "excel",
                "csv",
                "json"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "example": "completed",
              "type": "string",
              "enum": [
                "pending",
                "processing",
                "completed",
                "failed"
              ]
            }
          },
          {
            "name": "start_date",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of generated reports"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get report generation history",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/reports/schedules": {
      "post": {
        "operationId": "ReportsController_createSchedule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReportScheduleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Schedule created successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new report schedule",
        "tags": [
          "Analytics - Reports"
        ]
      },
      "get": {
        "operationId": "ReportsController_getSchedules",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of schedules"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all report schedules",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/reports/schedules/{scheduleId}": {
      "get": {
        "operationId": "ReportsController_getSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule details"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific schedule",
        "tags": [
          "Analytics - Reports"
        ]
      },
      "put": {
        "operationId": "ReportsController_updateSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReportScheduleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schedule updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a report schedule",
        "tags": [
          "Analytics - Reports"
        ]
      },
      "delete": {
        "operationId": "ReportsController_deleteSchedule",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Schedule deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a report schedule",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/reports/schedules/{scheduleId}/run": {
      "post": {
        "operationId": "ReportsController_runScheduledReport",
        "parameters": [
          {
            "name": "scheduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report generated and sent"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Run a scheduled report immediately",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/reports/employee-list": {
      "get": {
        "operationId": "ReportsController_getEmployeeListReport",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee list report"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate employee list report",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/reports/payroll-summary": {
      "get": {
        "operationId": "ReportsController_getPayrollSummaryReport",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "year",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payroll summary report"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate payroll summary report",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/reports/attendance": {
      "get": {
        "operationId": "ReportsController_getAttendanceReport",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "department_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance report"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate attendance report",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/reports/leave-balance": {
      "get": {
        "operationId": "ReportsController_getLeaveBalanceReport",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "department_id",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave balance report"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate leave balance report",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/companies": {
      "post": {
        "description": "Roles: HR_MANAGER, HR_SPECIALIST, TENANT_ADMIN, OWNER",
        "operationId": "CompanyController_createCompany",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Company created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Company with this number already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new company",
        "tags": [
          "Organization - Companies"
        ]
      },
      "get": {
        "operationId": "CompanyController_findAllCompanies",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by (name, companyNumber, type, status, created, updated)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for company name, number, director, or email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (starts from 1)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Companies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCompanyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all companies with optional pagination",
        "tags": [
          "Organization - Companies"
        ]
      }
    },
    "/companies/{id}": {
      "get": {
        "operationId": "CompanyController_findCompanyById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get company by ID",
        "tags": [
          "Organization - Companies"
        ]
      },
      "put": {
        "operationId": "CompanyController_updateCompany",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Company not found"
          },
          "409": {
            "description": "Company with this number already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update company",
        "tags": [
          "Organization - Companies"
        ]
      },
      "delete": {
        "operationId": "CompanyController_deleteCompany",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Company deleted successfully"
          },
          "404": {
            "description": "Company not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete company",
        "tags": [
          "Organization - Companies"
        ]
      }
    },
    "/companies/by-number/{companyNumber}": {
      "get": {
        "operationId": "CompanyController_findCompanyByNumber",
        "parameters": [
          {
            "name": "companyNumber",
            "required": true,
            "in": "path",
            "description": "Company registration number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get company by company number",
        "tags": [
          "Organization - Companies"
        ]
      }
    },
    "/companies/{id}/stats": {
      "get": {
        "operationId": "CompanyController_getCompanyStats",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "departmentCount": {
                      "type": "number"
                    },
                    "employeeCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Company not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get company statistics",
        "tags": [
          "Organization - Companies"
        ]
      }
    },
    "/departments": {
      "post": {
        "operationId": "DepartmentController_createDepartment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepartmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Department created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new department",
        "tags": [
          "Organization - Departments"
        ]
      },
      "get": {
        "operationId": "DepartmentController_findAllDepartments",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by (name, created, updated, function, company)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for department name or company name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (starts from 1)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Departments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDepartmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all departments with pagination",
        "tags": [
          "Organization - Departments"
        ]
      }
    },
    "/departments/{id}": {
      "get": {
        "operationId": "DepartmentController_findDepartmentById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Department ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Department retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Department not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get department by ID",
        "tags": [
          "Organization - Departments"
        ]
      },
      "put": {
        "operationId": "DepartmentController_updateDepartment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Department ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDepartmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Department updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update department",
        "tags": [
          "Organization - Departments"
        ]
      },
      "delete": {
        "operationId": "DepartmentController_deleteDepartment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Department ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Department deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete department",
        "tags": [
          "Organization - Departments"
        ]
      }
    },
    "/departments/{id}/details": {
      "get": {
        "operationId": "DepartmentController_findDepartmentWithRelations",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Department ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Department with relations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentWithRelationsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get department with all relations",
        "tags": [
          "Organization - Departments"
        ]
      }
    },
    "/departments/{id}/stats": {
      "get": {
        "operationId": "DepartmentController_getDepartmentStats",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Department ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Department statistics retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get department statistics",
        "tags": [
          "Organization - Departments"
        ]
      }
    },
    "/departments/company/{companyId}": {
      "get": {
        "operationId": "DepartmentController_findDepartmentsByCompany",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeRelations",
            "required": false,
            "in": "query",
            "description": "Include related data (company, head, parent, sub-departments)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Departments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepartmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all departments for a specific company",
        "tags": [
          "Organization - Departments"
        ]
      }
    },
    "/jobs": {
      "post": {
        "operationId": "JobController_createJob",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateJobDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new job",
        "tags": [
          "Organization - Jobs"
        ]
      },
      "get": {
        "operationId": "JobController_findAllJobs",
        "parameters": [
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "description": "Filter jobs by company ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by (name, created, updated, level, type, status)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for job name, code, or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (starts from 1)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Jobs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedJobResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all jobs with pagination",
        "tags": [
          "Organization - Jobs"
        ]
      }
    },
    "/jobs/{id}": {
      "get": {
        "operationId": "JobController_findJobById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Job not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get job by ID",
        "tags": [
          "Organization - Jobs"
        ]
      },
      "put": {
        "operationId": "JobController_updateJob",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update job",
        "tags": [
          "Organization - Jobs"
        ]
      },
      "delete": {
        "operationId": "JobController_deleteJob",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Job deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete job",
        "tags": [
          "Organization - Jobs"
        ]
      }
    },
    "/jobs/{id}/stats": {
      "get": {
        "operationId": "JobController_getJobStats",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job statistics retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get job statistics",
        "tags": [
          "Organization - Jobs"
        ]
      }
    },
    "/jobs/company/{companyId}": {
      "get": {
        "operationId": "JobController_findJobsByCompany",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeRelations",
            "required": false,
            "in": "query",
            "description": "Include related data (company, assignment counts)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Jobs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JobResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all jobs for a specific company",
        "tags": [
          "Organization - Jobs"
        ]
      }
    },
    "/employees": {
      "post": {
        "operationId": "EmployeeController_createEmployee",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployeeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employee created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Employee with this employee number or national insurance number already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new employee",
        "tags": [
          "People - Employees"
        ]
      },
      "get": {
        "operationId": "EmployeeController_findAllEmployees",
        "parameters": [
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by (firstName, lastName, employeeNumber, email, status, created, updated)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (starts from 1)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "include_terminated",
            "required": false,
            "in": "query",
            "description": "Include terminated employees",
            "schema": {}
          },
          {
            "name": "department_id",
            "required": false,
            "in": "query",
            "description": "Filter by department ID",
            "schema": {}
          },
          {
            "name": "employment_status",
            "required": false,
            "in": "query",
            "description": "Filter by employment status",
            "schema": {}
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name or employee number",
            "schema": {}
          }
        ],
        "responses": {
          "200": {
            "description": "Employees retrieved successfully with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEmployeeResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all employees with optional search filters and pagination",
        "tags": [
          "People - Employees"
        ]
      }
    },
    "/employees/stats/by-department": {
      "get": {
        "operationId": "EmployeeController_getEmployeeStatsByDepartment",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Employee statistics by department",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "department_id": {
                        "type": "string"
                      },
                      "department_name": {
                        "type": "string"
                      },
                      "employee_count": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee statistics by department",
        "tags": [
          "People - Employees"
        ]
      }
    },
    "/employees/stats/employment-status": {
      "get": {
        "operationId": "EmployeeController_getEmploymentStatusSummary",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Employee count by employment status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string"
                      },
                      "count": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee count by employment status",
        "tags": [
          "People - Employees"
        ]
      }
    },
    "/employees/{id}": {
      "get": {
        "operationId": "EmployeeController_findEmployeeById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get an employee by ID",
        "tags": [
          "People - Employees"
        ]
      },
      "put": {
        "operationId": "EmployeeController_updateEmployee",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          },
          "409": {
            "description": "Employee with this employee number or national insurance number already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update an employee",
        "tags": [
          "People - Employees"
        ]
      },
      "delete": {
        "description": "Permanently deletes an employee. Only allowed for employees without assignments.",
        "operationId": "EmployeeController_deleteEmployee",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Employee deleted successfully"
          },
          "404": {
            "description": "Employee not found"
          },
          "409": {
            "description": "Cannot delete employee with existing assignments"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete an employee (hard delete)",
        "tags": [
          "People - Employees"
        ]
      }
    },
    "/employees/{id}/details": {
      "get": {
        "operationId": "EmployeeController_findEmployeeByIdWithDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee details with assignments and managed departments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDetailResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee details with relations",
        "tags": [
          "People - Employees"
        ]
      }
    },
    "/employees/number/{employeeNumber}": {
      "get": {
        "operationId": "EmployeeController_findEmployeeByNumber",
        "parameters": [
          {
            "name": "employeeNumber",
            "required": true,
            "in": "path",
            "description": "Employee number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get an employee by employee number",
        "tags": [
          "People - Employees"
        ]
      }
    },
    "/employees/{id}/terminate": {
      "post": {
        "operationId": "EmployeeController_terminateEmployee",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "terminationDate",
            "required": false,
            "in": "query",
            "description": "Termination date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee terminated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Terminate an employee (soft delete)",
        "tags": [
          "People - Employees"
        ]
      }
    },
    "/assignments": {
      "post": {
        "operationId": "AssignmentController_createAssignment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssignmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assignment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee, job, or department not found"
          },
          "409": {
            "description": "Employee already has an overlapping assignment"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new assignment",
        "tags": [
          "People - Assignments"
        ]
      },
      "get": {
        "operationId": "AssignmentController_findAllAssignments",
        "parameters": [
          {
            "name": "start_date_to",
            "required": false,
            "in": "query",
            "description": "Filter by start date to",
            "schema": {}
          },
          {
            "name": "start_date_from",
            "required": false,
            "in": "query",
            "description": "Filter by start date from",
            "schema": {}
          },
          {
            "name": "include_ended",
            "required": false,
            "in": "query",
            "description": "Include ended assignments",
            "schema": {}
          },
          {
            "name": "job_id",
            "required": false,
            "in": "query",
            "description": "Filter by job ID",
            "schema": {}
          },
          {
            "name": "department_id",
            "required": false,
            "in": "query",
            "description": "Filter by department ID",
            "schema": {}
          },
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {}
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "enum": [
                "asc",
                "desc"
              ],
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Field to sort by",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page (max 100)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination (starts from 1)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of assignments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedAssignmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all assignments with pagination and optional search filters",
        "tags": [
          "People - Assignments"
        ]
      }
    },
    "/assignments/stats": {
      "get": {
        "operationId": "AssignmentController_getAssignmentStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Assignment statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "active": {
                      "type": "number"
                    },
                    "ended": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get assignment statistics",
        "tags": [
          "People - Assignments"
        ]
      }
    },
    "/assignments/employee/{employeeId}": {
      "get": {
        "operationId": "AssignmentController_getCurrentAssignmentsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current assignments for the employee",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get current assignments for an employee",
        "tags": [
          "People - Assignments"
        ]
      }
    },
    "/assignments/employee/{employeeId}/history": {
      "get": {
        "operationId": "AssignmentController_getAssignmentHistoryByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "description": "Employee ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment history for the employee",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get assignment history for an employee",
        "tags": [
          "People - Assignments"
        ]
      }
    },
    "/assignments/department/{departmentId}": {
      "get": {
        "operationId": "AssignmentController_getAssignmentsByDepartment",
        "parameters": [
          {
            "name": "departmentId",
            "required": true,
            "in": "path",
            "description": "Department ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_ended",
            "required": false,
            "in": "query",
            "description": "Include ended assignments",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignments in the department",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssignmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get assignments by department",
        "tags": [
          "People - Assignments"
        ]
      }
    },
    "/assignments/{id}": {
      "get": {
        "operationId": "AssignmentController_findAssignmentById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Assignment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Assignment not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get an assignment by ID",
        "tags": [
          "People - Assignments"
        ]
      },
      "put": {
        "operationId": "AssignmentController_updateAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Assignment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssignmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assignment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Assignment not found"
          },
          "409": {
            "description": "Assignment conflicts with existing assignment"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update an assignment",
        "tags": [
          "People - Assignments"
        ]
      },
      "delete": {
        "description": "Permanently deletes an assignment record",
        "operationId": "AssignmentController_deleteAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Assignment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Assignment deleted successfully"
          },
          "404": {
            "description": "Assignment not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete an assignment",
        "tags": [
          "People - Assignments"
        ]
      }
    },
    "/assignments/{id}/details": {
      "get": {
        "operationId": "AssignmentController_findAssignmentByIdWithDetails",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Assignment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment details with employee, job, and department information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentWithRelationsDto"
                }
              }
            }
          },
          "404": {
            "description": "Assignment not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get assignment details with relations",
        "tags": [
          "People - Assignments"
        ]
      }
    },
    "/assignments/{id}/end": {
      "post": {
        "operationId": "AssignmentController_endAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Assignment ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment ended successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Assignment not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "End an assignment",
        "tags": [
          "People - Assignments"
        ]
      }
    },
    "/rate-groups": {
      "post": {
        "operationId": "RateGroupController_createRateGroup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rate group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateGroupResponseDto"
                }
              }
            }
          },
          "409": {
            "description": "Rate group with this code already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new rate group",
        "tags": [
          "Compensation - Rate Groups"
        ]
      },
      "get": {
        "operationId": "RateGroupController_findAllRateGroups",
        "parameters": [
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unit",
            "required": false,
            "in": "query",
            "description": "Filter by unit",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "jurisdiction",
            "required": false,
            "in": "query",
            "description": "Filter by jurisdiction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in code and title",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of rate groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RateGroupResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all rate groups with optional search filters",
        "tags": [
          "Compensation - Rate Groups"
        ]
      }
    },
    "/rate-groups/stats": {
      "get": {
        "operationId": "RateGroupController_getRateGroupStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Rate group statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "byCategory": {
                      "type": "object"
                    },
                    "byJurisdiction": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get rate group statistics",
        "tags": [
          "Compensation - Rate Groups"
        ]
      }
    },
    "/rate-groups/categories": {
      "get": {
        "operationId": "RateGroupController_getRateCategories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of rate categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all available rate categories",
        "tags": [
          "Compensation - Rate Groups"
        ]
      }
    },
    "/rate-groups/by-category/{category}": {
      "get": {
        "operationId": "RateGroupController_getRateGroupsByCategory",
        "parameters": [
          {
            "name": "category",
            "required": true,
            "in": "path",
            "description": "Rate category",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate groups in the category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RateGroupResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get rate groups by category",
        "tags": [
          "Compensation - Rate Groups"
        ]
      }
    },
    "/rate-groups/{id}": {
      "get": {
        "operationId": "RateGroupController_findRateGroupById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate group details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateGroupResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate group not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get a rate group by ID",
        "tags": [
          "Compensation - Rate Groups"
        ]
      },
      "patch": {
        "operationId": "RateGroupController_updateRateGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate group updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateGroupResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate group not found"
          },
          "409": {
            "description": "Rate group with this code already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a rate group",
        "tags": [
          "Compensation - Rate Groups"
        ]
      },
      "delete": {
        "operationId": "RateGroupController_deleteRateGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rate group deleted successfully"
          },
          "404": {
            "description": "Rate group not found"
          },
          "409": {
            "description": "Cannot delete rate group with existing entries"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a rate group",
        "tags": [
          "Compensation - Rate Groups"
        ]
      }
    },
    "/rate-groups/{id}/entries": {
      "get": {
        "operationId": "RateGroupController_getRateEntriesForGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entries for the group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all rate entries for a rate group",
        "tags": [
          "Compensation - Rate Groups"
        ]
      }
    },
    "/rate-entries": {
      "post": {
        "operationId": "RateEntryController_createRateEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRateEntryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rate entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate group not found"
          },
          "409": {
            "description": "Rate entry with these details already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new rate entry",
        "tags": [
          "Compensation - Rate Entries"
        ]
      },
      "get": {
        "operationId": "RateEntryController_findAllRateEntries",
        "parameters": [
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Filter by rate group ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "name": "effectiveOn",
            "required": false,
            "in": "query",
            "description": "Filter by effective date",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "startsFrom",
            "required": false,
            "in": "query",
            "description": "Filter by start date from",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "startsTo",
            "required": false,
            "in": "query",
            "description": "Filter by start date to",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "paramsFilter",
            "required": false,
            "in": "query",
            "description": "Filter by parameters (JSON object)",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of rate entries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RateEntryResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all rate entries with optional search filters",
        "tags": [
          "Compensation - Rate Entries"
        ]
      }
    },
    "/rate-entries/stats": {
      "get": {
        "operationId": "RateEntryController_getRateEntryStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Rate entry statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "number"
                    },
                    "active": {
                      "type": "number"
                    },
                    "expired": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get rate entry statistics",
        "tags": [
          "Compensation - Rate Entries"
        ]
      }
    },
    "/rate-entries/group/{groupId}/active": {
      "get": {
        "operationId": "RateEntryController_getActiveRateEntriesByGroup",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveDate",
            "required": false,
            "in": "query",
            "description": "Effective date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active rate entries for the group",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RateEntryResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get active rate entries for a rate group",
        "tags": [
          "Compensation - Rate Entries"
        ]
      }
    },
    "/rate-entries/group/{groupId}/latest": {
      "get": {
        "operationId": "RateEntryController_getLatestRateEntry",
        "parameters": [
          {
            "name": "groupId",
            "required": true,
            "in": "path",
            "description": "Rate Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "required": false,
            "in": "query",
            "description": "Parameters filter (JSON string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveDate",
            "required": false,
            "in": "query",
            "description": "Effective date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Latest rate entry for the group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "No rate entry found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get latest rate entry for a group with optional parameters",
        "tags": [
          "Compensation - Rate Entries"
        ]
      }
    },
    "/rate-entries/{id}": {
      "get": {
        "operationId": "RateEntryController_findRateEntryById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Entry ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entry details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate entry not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get a rate entry by ID",
        "tags": [
          "Compensation - Rate Entries"
        ]
      },
      "patch": {
        "operationId": "RateEntryController_updateRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Entry ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRateEntryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate entry not found"
          },
          "409": {
            "description": "Rate entry with these details already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a rate entry",
        "tags": [
          "Compensation - Rate Entries"
        ]
      },
      "delete": {
        "description": "Permanently deletes a rate entry record",
        "operationId": "RateEntryController_deleteRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Entry ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rate entry deleted successfully"
          },
          "404": {
            "description": "Rate entry not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a rate entry",
        "tags": [
          "Compensation - Rate Entries"
        ]
      }
    },
    "/rate-entries/{id}/details": {
      "get": {
        "operationId": "RateEntryController_findRateEntryByIdWithGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Entry ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entry details with group information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryWithGroupDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate entry not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get rate entry details with group information",
        "tags": [
          "Compensation - Rate Entries"
        ]
      }
    },
    "/rate-entries/{id}/close": {
      "post": {
        "operationId": "RateEntryController_closeRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Rate Entry ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entry closed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateEntryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Rate entry not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Close a rate entry (set end date)",
        "tags": [
          "Compensation - Rate Entries"
        ]
      }
    },
    "/shift-templates": {
      "post": {
        "operationId": "ShiftTemplateController_createShiftTemplate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShiftTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Shift template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftTemplateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "409": {
            "description": "Shift template with this name already exists for this company"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new shift template",
        "tags": [
          "Time - Shifts"
        ]
      },
      "get": {
        "operationId": "ShiftTemplateController_findAllShiftTemplates",
        "parameters": [
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "description": "Filter by company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shift templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShiftTemplateResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all shift templates",
        "tags": [
          "Time - Shifts"
        ]
      }
    },
    "/shift-templates/{id}": {
      "get": {
        "operationId": "ShiftTemplateController_findShiftTemplateById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Shift template ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shift template retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftTemplateResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Shift template not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get shift template by ID",
        "tags": [
          "Time - Shifts"
        ]
      },
      "put": {
        "operationId": "ShiftTemplateController_updateShiftTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Shift template ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShiftTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shift template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShiftTemplateResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Shift template not found"
          },
          "409": {
            "description": "Shift template with this name already exists for this company"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a shift template",
        "tags": [
          "Time - Shifts"
        ]
      },
      "delete": {
        "operationId": "ShiftTemplateController_deleteShiftTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Shift template ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Shift template deleted successfully"
          },
          "404": {
            "description": "Shift template not found"
          },
          "409": {
            "description": "Cannot delete shift template that is being used by scheduled shifts"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a shift template",
        "tags": [
          "Time - Shifts"
        ]
      }
    },
    "/shift-templates/{id}/stats": {
      "get": {
        "operationId": "ShiftTemplateController_getShiftTemplateStats",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Shift template ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Shift template statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "scheduledShiftsCount": {
                      "type": "number"
                    },
                    "totalHours": {
                      "type": "number"
                    },
                    "breakHours": {
                      "type": "number"
                    },
                    "workingHours": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Shift template not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get shift template statistics",
        "tags": [
          "Time - Shifts"
        ]
      }
    },
    "/leave-types": {
      "post": {
        "operationId": "LeaveTypeController_createLeaveType",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeaveTypeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Leave type created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveTypeResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "403": {
            "description": "Cannot create leave type for different tenant"
          },
          "409": {
            "description": "Leave type with this code already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new leave type",
        "tags": [
          "Time - Leave Management"
        ]
      },
      "get": {
        "operationId": "LeaveTypeController_findAllLeaveTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Leave types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaveTypeResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all leave types",
        "tags": [
          "Time - Leave Management"
        ]
      }
    },
    "/leave-types/{id}": {
      "get": {
        "operationId": "LeaveTypeController_findLeaveTypeById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Leave type ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave type retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveTypeResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "You do not have access to this leave type"
          },
          "404": {
            "description": "Leave type not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get leave type by ID",
        "tags": [
          "Time - Leave Management"
        ]
      },
      "put": {
        "operationId": "LeaveTypeController_updateLeaveType",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Leave type ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeaveTypeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Leave type updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveTypeResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "403": {
            "description": "Cannot update leave type for different tenant"
          },
          "404": {
            "description": "Leave type not found"
          },
          "409": {
            "description": "Leave type with this code already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update a leave type",
        "tags": [
          "Time - Leave Management"
        ]
      },
      "delete": {
        "operationId": "LeaveTypeController_deleteLeaveType",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Leave type ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Leave type deleted successfully"
          },
          "403": {
            "description": "Cannot delete leave type that is in use"
          },
          "404": {
            "description": "Leave type not found"
          },
          "409": {
            "description": "Cannot delete leave type that is being used by leave requests"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete a leave type",
        "tags": [
          "Time - Leave Management"
        ]
      }
    },
    "/leave-types/by-code/{code}": {
      "get": {
        "operationId": "LeaveTypeController_findLeaveTypeByCode",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "path",
            "description": "Leave type code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave type retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveTypeResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Leave type not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get leave type by code",
        "tags": [
          "Time - Leave Management"
        ]
      }
    },
    "/leave-types/{id}/stats": {
      "get": {
        "operationId": "LeaveTypeController_getLeaveTypeStats",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Leave type ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave type statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "leaveRequestsCount": {
                      "type": "number"
                    },
                    "totalDaysRequested": {
                      "type": "number"
                    },
                    "approvedDaysCount": {
                      "type": "number"
                    },
                    "pendingDaysCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "You do not have access to this leave type"
          },
          "404": {
            "description": "Leave type not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get leave type statistics",
        "tags": [
          "Time - Leave Management"
        ]
      }
    },
    "/leave-requests": {
      "post": {
        "operationId": "LeaveRequestController_createLeaveRequest",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeaveRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Leave request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or leave type not found"
          },
          "409": {
            "description": "Overlapping leave request"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new leave request",
        "tags": [
          "Time - Leave Management"
        ]
      },
      "get": {
        "operationId": "LeaveRequestController_findAllLeaveRequests",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": [
                "PENDING",
                "APPROVED",
                "REJECTED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaveRequestResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all leave requests with optional filters",
        "tags": [
          "Time - Leave Management"
        ]
      }
    },
    "/leave-requests/employee/{employeeId}": {
      "get": {
        "operationId": "LeaveRequestController_findLeaveRequestsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaveRequestResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get leave requests by employee ID",
        "tags": [
          "Time - Leave Management"
        ]
      }
    },
    "/leave-requests/employee/{employeeId}/stats": {
      "get": {
        "operationId": "LeaveRequestController_getEmployeeLeaveStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for statistics (default: current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalRequests": {
                      "type": "number"
                    },
                    "pendingRequests": {
                      "type": "number"
                    },
                    "approvedRequests": {
                      "type": "number"
                    },
                    "rejectedRequests": {
                      "type": "number"
                    },
                    "totalApprovedHours": {
                      "type": "number"
                    },
                    "totalPendingHours": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get leave statistics for an employee",
        "tags": [
          "Time - Leave Management"
        ]
      }
    },
    "/leave-requests/{id}": {
      "get": {
        "operationId": "LeaveRequestController_findLeaveRequestById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave request retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a leave request by ID",
        "tags": [
          "Time - Leave Management"
        ]
      },
      "patch": {
        "operationId": "LeaveRequestController_updateLeaveRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLeaveRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Leave request updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a leave request (only in PENDING status)",
        "tags": [
          "Time - Leave Management"
        ]
      },
      "delete": {
        "operationId": "LeaveRequestController_deleteLeaveRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Leave request deleted successfully"
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a leave request (only in PENDING status)",
        "tags": [
          "Time - Leave Management"
        ]
      }
    },
    "/leave-requests/{id}/approve": {
      "patch": {
        "operationId": "LeaveRequestController_approveLeaveRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveLeaveRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Leave request approval status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve or reject a leave request",
        "tags": [
          "Time - Leave Management"
        ]
      }
    },
    "/leave-requests/{id}/cancel": {
      "patch": {
        "operationId": "LeaveRequestController_cancelLeaveRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave request cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel a leave request",
        "tags": [
          "Time - Leave Management"
        ]
      }
    },
    "/leave-requests/admin/test": {
      "get": {
        "operationId": "LeaveRequestController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for leave request module",
        "tags": [
          "Time - Leave Management"
        ]
      }
    },
    "/scheduled-shifts": {
      "post": {
        "operationId": "ScheduledShiftController_createScheduledShift",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateScheduledShiftDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Scheduled shift created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or shift template not found"
          },
          "409": {
            "description": "Shift already exists for this date"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new scheduled shift",
        "tags": [
          "Time - Shifts"
        ]
      },
      "get": {
        "operationId": "ScheduledShiftController_findAllScheduledShifts",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shiftTemplateId",
            "required": false,
            "in": "query",
            "description": "Filter by shift template ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled shifts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all scheduled shifts with optional filters",
        "tags": [
          "Time - Shifts"
        ]
      }
    },
    "/scheduled-shifts/bulk": {
      "post": {
        "operationId": "ScheduledShiftController_bulkCreateScheduledShifts",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Scheduled shifts created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or shift template not found"
          },
          "409": {
            "description": "Some shifts already exist"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Bulk create scheduled shifts for multiple dates",
        "tags": [
          "Time - Shifts"
        ]
      }
    },
    "/scheduled-shifts/employee/{employeeId}": {
      "get": {
        "operationId": "ScheduledShiftController_findScheduledShiftsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled shifts retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get scheduled shifts by employee ID",
        "tags": [
          "Time - Shifts"
        ]
      }
    },
    "/scheduled-shifts/stats": {
      "get": {
        "operationId": "ScheduledShiftController_getScheduledShiftStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled shift statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalShifts": {
                      "type": "number"
                    },
                    "totalHours": {
                      "type": "number"
                    },
                    "averageHoursPerShift": {
                      "type": "number"
                    },
                    "employeeCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get scheduled shift statistics",
        "tags": [
          "Time - Shifts"
        ]
      }
    },
    "/scheduled-shifts/{id}": {
      "get": {
        "operationId": "ScheduledShiftController_findScheduledShiftById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled shift retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Scheduled shift not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a scheduled shift by ID",
        "tags": [
          "Time - Shifts"
        ]
      },
      "patch": {
        "operationId": "ScheduledShiftController_updateScheduledShift",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateScheduledShiftDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Scheduled shift updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduledShiftResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Scheduled shift not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a scheduled shift",
        "tags": [
          "Time - Shifts"
        ]
      },
      "delete": {
        "operationId": "ScheduledShiftController_deleteScheduledShift",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Scheduled shift deleted successfully"
          },
          "404": {
            "description": "Scheduled shift not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a scheduled shift",
        "tags": [
          "Time - Shifts"
        ]
      }
    },
    "/scheduled-shifts/admin/test": {
      "get": {
        "operationId": "ScheduledShiftController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for scheduled shift module",
        "tags": [
          "Time - Shifts"
        ]
      }
    },
    "/overtime-requests": {
      "post": {
        "operationId": "OvertimeRequestController_createOvertimeRequest",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOvertimeRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Overtime request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee not found"
          },
          "409": {
            "description": "Overlapping overtime request"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new overtime request",
        "tags": [
          "Time - Overtime"
        ]
      },
      "get": {
        "operationId": "OvertimeRequestController_findAllOvertimeRequests",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": [
                "PENDING",
                "APPROVED",
                "REJECTED",
                "CANCELLED"
              ],
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all overtime requests with optional filters",
        "tags": [
          "Time - Overtime"
        ]
      }
    },
    "/overtime-requests/employee/{employeeId}": {
      "get": {
        "operationId": "OvertimeRequestController_findOvertimeRequestsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get overtime requests by employee ID",
        "tags": [
          "Time - Overtime"
        ]
      }
    },
    "/overtime-requests/employee/{employeeId}/stats": {
      "get": {
        "operationId": "OvertimeRequestController_getEmployeeOvertimeStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for statistics (default: current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalRequests": {
                      "type": "number"
                    },
                    "pendingRequests": {
                      "type": "number"
                    },
                    "approvedRequests": {
                      "type": "number"
                    },
                    "rejectedRequests": {
                      "type": "number"
                    },
                    "totalApprovedHours": {
                      "type": "number"
                    },
                    "totalPendingHours": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get overtime statistics for an employee",
        "tags": [
          "Time - Overtime"
        ]
      }
    },
    "/overtime-requests/stats": {
      "get": {
        "operationId": "OvertimeRequestController_getOvertimeStats",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalRequests": {
                      "type": "number"
                    },
                    "totalApprovedHours": {
                      "type": "number"
                    },
                    "averageHoursPerRequest": {
                      "type": "number"
                    },
                    "employeeCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get general overtime statistics",
        "tags": [
          "Time - Overtime"
        ]
      }
    },
    "/overtime-requests/{id}": {
      "get": {
        "operationId": "OvertimeRequestController_findOvertimeRequestById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime request retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Overtime request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get an overtime request by ID",
        "tags": [
          "Time - Overtime"
        ]
      },
      "patch": {
        "operationId": "OvertimeRequestController_updateOvertimeRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOvertimeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Overtime request updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Overtime request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an overtime request (only in PENDING status)",
        "tags": [
          "Time - Overtime"
        ]
      },
      "delete": {
        "operationId": "OvertimeRequestController_deleteOvertimeRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Overtime request deleted successfully"
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Overtime request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an overtime request (only in PENDING status)",
        "tags": [
          "Time - Overtime"
        ]
      }
    },
    "/overtime-requests/{id}/approve": {
      "patch": {
        "operationId": "OvertimeRequestController_approveOvertimeRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveOvertimeRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Overtime request approval status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Overtime request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve or reject an overtime request",
        "tags": [
          "Time - Overtime"
        ]
      }
    },
    "/overtime-requests/{id}/cancel": {
      "patch": {
        "operationId": "OvertimeRequestController_cancelOvertimeRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Overtime request cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OvertimeRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Overtime request not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel an overtime request",
        "tags": [
          "Time - Overtime"
        ]
      }
    },
    "/overtime-requests/admin/test": {
      "get": {
        "operationId": "OvertimeRequestController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for overtime request module",
        "tags": [
          "Time - Overtime"
        ]
      }
    },
    "/attendance-records": {
      "post": {
        "operationId": "AttendanceRecordController_createAttendanceRecord",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAttendanceRecordDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Attendance record created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or scheduled shift not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new attendance record",
        "tags": [
          "Time - Attendance"
        ]
      },
      "get": {
        "operationId": "AttendanceRecordController_findAllAttendanceRecords",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance records retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all attendance records with optional filters",
        "tags": [
          "Time - Attendance"
        ]
      }
    },
    "/attendance-records/clock-in": {
      "post": {
        "operationId": "AttendanceRecordController_clockIn",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClockInDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employee clocked in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or scheduled shift not found"
          },
          "409": {
            "description": "Employee already clocked in"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clock in an employee",
        "tags": [
          "Time - Attendance"
        ]
      }
    },
    "/attendance-records/{id}/clock-out": {
      "patch": {
        "operationId": "AttendanceRecordController_clockOut",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClockOutDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee clocked out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Attendance record not found"
          },
          "409": {
            "description": "Employee already clocked out"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clock out an employee",
        "tags": [
          "Time - Attendance"
        ]
      }
    },
    "/attendance-records/employee/{employeeId}": {
      "get": {
        "operationId": "AttendanceRecordController_findAttendanceRecordsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance records retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get attendance records by employee ID",
        "tags": [
          "Time - Attendance"
        ]
      }
    },
    "/attendance-records/{id}": {
      "get": {
        "operationId": "AttendanceRecordController_findAttendanceRecordById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance record retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Attendance record not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get an attendance record by ID",
        "tags": [
          "Time - Attendance"
        ]
      },
      "patch": {
        "operationId": "AttendanceRecordController_updateAttendanceRecord",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAttendanceRecordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Attendance record updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceRecordResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Attendance record not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an attendance record",
        "tags": [
          "Time - Attendance"
        ]
      },
      "delete": {
        "operationId": "AttendanceRecordController_deleteAttendanceRecord",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attendance record deleted successfully"
          },
          "404": {
            "description": "Attendance record not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an attendance record",
        "tags": [
          "Time - Attendance"
        ]
      }
    },
    "/attendance-records/admin/test": {
      "get": {
        "operationId": "AttendanceRecordController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for attendance record module",
        "tags": [
          "Time - Attendance"
        ]
      }
    },
    "/timesheets": {
      "post": {
        "operationId": "TimesheetController_createTimesheet",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTimesheetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Timesheet created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee not found"
          },
          "409": {
            "description": "Overlapping timesheet exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new timesheet",
        "tags": [
          "Time - Timesheets"
        ]
      },
      "get": {
        "operationId": "TimesheetController_findAllTimesheets",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": [
                "OPEN",
                "SUBMITTED",
                "APPROVED",
                "LOCKED"
              ],
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by start date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by end date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimesheetResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all timesheets with optional filters",
        "tags": [
          "Time - Timesheets"
        ]
      }
    },
    "/timesheets/generate": {
      "post": {
        "operationId": "TimesheetController_generateTimesheet",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateTimesheetDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Timesheet generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee not found"
          },
          "409": {
            "description": "Timesheet already exists for this period"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate a timesheet from attendance records",
        "tags": [
          "Time - Timesheets"
        ]
      }
    },
    "/timesheets/employee/{employeeId}": {
      "get": {
        "operationId": "TimesheetController_findTimesheetsByEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "enum": [
                "OPEN",
                "SUBMITTED",
                "APPROVED",
                "LOCKED"
              ],
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Filter by year",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimesheetResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get timesheets by employee ID",
        "tags": [
          "Time - Timesheets"
        ]
      }
    },
    "/timesheets/employee/{employeeId}/stats": {
      "get": {
        "operationId": "TimesheetController_getEmployeeTimesheetStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for statistics (default: current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheet statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalTimesheets": {
                      "type": "number"
                    },
                    "draftTimesheets": {
                      "type": "number"
                    },
                    "submittedTimesheets": {
                      "type": "number"
                    },
                    "approvedTimesheets": {
                      "type": "number"
                    },
                    "rejectedTimesheets": {
                      "type": "number"
                    },
                    "totalApprovedHours": {
                      "type": "number"
                    },
                    "totalOvertimeHours": {
                      "type": "number"
                    },
                    "averageHoursPerTimesheet": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get timesheet statistics for an employee",
        "tags": [
          "Time - Timesheets"
        ]
      }
    },
    "/timesheets/{id}": {
      "get": {
        "operationId": "TimesheetController_findTimesheetById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Timesheet retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Timesheet not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a timesheet by ID",
        "tags": [
          "Time - Timesheets"
        ]
      },
      "patch": {
        "operationId": "TimesheetController_updateTimesheet",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTimesheetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timesheet updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Timesheet not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a timesheet (only in DRAFT status)",
        "tags": [
          "Time - Timesheets"
        ]
      },
      "delete": {
        "operationId": "TimesheetController_deleteTimesheet",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Timesheet deleted successfully"
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Timesheet not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a timesheet (only in DRAFT status)",
        "tags": [
          "Time - Timesheets"
        ]
      }
    },
    "/timesheets/{id}/submit": {
      "patch": {
        "operationId": "TimesheetController_submitTimesheet",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitTimesheetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timesheet submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Timesheet not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit a timesheet for approval",
        "tags": [
          "Time - Timesheets"
        ]
      }
    },
    "/timesheets/{id}/approve": {
      "patch": {
        "operationId": "TimesheetController_approveTimesheet",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveTimesheetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Timesheet approval status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimesheetResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid status"
          },
          "404": {
            "description": "Timesheet not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve or reject a timesheet",
        "tags": [
          "Time - Timesheets"
        ]
      }
    },
    "/timesheets/admin/test": {
      "get": {
        "operationId": "TimesheetController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for timesheet module",
        "tags": [
          "Time - Timesheets"
        ]
      }
    },
    "/pay-schedules": {
      "post": {
        "operationId": "PayScheduleController_createPaySchedule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayScheduleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pay schedule created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Pay schedule name already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new pay schedule",
        "tags": [
          "Payroll - Pay Schedules"
        ]
      },
      "get": {
        "operationId": "PayScheduleController_findAllPaySchedules",
        "parameters": [
          {
            "name": "frequency",
            "required": false,
            "in": "query",
            "description": "Filter by pay frequency",
            "schema": {
              "type": "string",
              "enum": [
                "WEEKLY",
                "BIWEEKLY",
                "MONTHLY",
                "YEARLY",
                "HOURLY"
              ]
            }
          },
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "description": "Filter to show only active pay schedules",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay schedules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPayScheduleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all pay schedules with pagination and filters",
        "tags": [
          "Payroll - Pay Schedules"
        ]
      }
    },
    "/pay-schedules/active": {
      "get": {
        "operationId": "PayScheduleController_findActivePaySchedules",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active pay schedules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayScheduleResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all active pay schedules",
        "tags": [
          "Payroll - Pay Schedules"
        ]
      }
    },
    "/pay-schedules/frequency/{frequency}": {
      "get": {
        "operationId": "PayScheduleController_findPaySchedulesByFrequency",
        "parameters": [
          {
            "name": "frequency",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "description": "Filter to show only active pay schedules",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay schedules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayScheduleResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay schedules by frequency",
        "tags": [
          "Payroll - Pay Schedules"
        ]
      }
    },
    "/pay-schedules/stats": {
      "get": {
        "operationId": "PayScheduleController_getPayScheduleStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Pay schedule statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalSchedules": {
                      "type": "number"
                    },
                    "activeSchedules": {
                      "type": "number"
                    },
                    "inactiveSchedules": {
                      "type": "number"
                    },
                    "frequencyBreakdown": {
                      "type": "object",
                      "properties": {
                        "WEEKLY": {
                          "type": "number"
                        },
                        "BIWEEKLY": {
                          "type": "number"
                        },
                        "MONTHLY": {
                          "type": "number"
                        },
                        "QUARTERLY": {
                          "type": "number"
                        },
                        "ANNUALLY": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay schedule statistics",
        "tags": [
          "Payroll - Pay Schedules"
        ]
      }
    },
    "/pay-schedules/name/{name}": {
      "get": {
        "operationId": "PayScheduleController_findPayScheduleByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay schedule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayScheduleResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay schedule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a pay schedule by name",
        "tags": [
          "Payroll - Pay Schedules"
        ]
      }
    },
    "/pay-schedules/{id}": {
      "get": {
        "operationId": "PayScheduleController_findPayScheduleById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay schedule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayScheduleResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay schedule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a pay schedule by ID",
        "tags": [
          "Payroll - Pay Schedules"
        ]
      },
      "put": {
        "operationId": "PayScheduleController_updatePaySchedule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePayScheduleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pay schedule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayScheduleResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Pay schedule not found"
          },
          "409": {
            "description": "Pay schedule name already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a pay schedule",
        "tags": [
          "Payroll - Pay Schedules"
        ]
      },
      "delete": {
        "operationId": "PayScheduleController_deletePaySchedule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pay schedule deleted successfully"
          },
          "400": {
            "description": "Pay schedule is referenced by pay runs"
          },
          "404": {
            "description": "Pay schedule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a pay schedule",
        "tags": [
          "Payroll - Pay Schedules"
        ]
      }
    },
    "/pay-schedules/{id}/calculate-next-pay-date": {
      "get": {
        "operationId": "PayScheduleController_calculateNextPayDate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Next pay date calculated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currentPayDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "nextPayDate": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Pay schedule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Calculate next pay date for a pay schedule",
        "tags": [
          "Payroll - Pay Schedules"
        ]
      }
    },
    "/pay-schedules/admin/test": {
      "get": {
        "operationId": "PayScheduleController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for pay schedule module",
        "tags": [
          "Payroll - Pay Schedules"
        ]
      }
    },
    "/pay-runs": {
      "post": {
        "operationId": "PayRunController_createPayRun",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayRunDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pay run created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Pay schedule not found"
          },
          "409": {
            "description": "Overlapping pay run exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new pay run",
        "tags": [
          "Payroll - Pay Runs"
        ]
      },
      "get": {
        "operationId": "PayRunController_findAllPayRuns",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by pay run status",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "PROCESSING",
                "APPROVED",
                "SUBMITTED",
                "FILED",
                "CLOSED"
              ]
            }
          },
          {
            "name": "payScheduleId",
            "required": false,
            "in": "query",
            "description": "Filter by pay schedule ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter by pay period start date (YYYY-MM-DD)",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter by pay period end date (YYYY-MM-DD)",
            "schema": {
              "example": "2024-01-31",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay runs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPayRunResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all pay runs with pagination and filters",
        "tags": [
          "Payroll - Pay Runs"
        ]
      }
    },
    "/pay-runs/status/{status}": {
      "get": {
        "operationId": "PayRunController_findPayRunsByStatus",
        "parameters": [
          {
            "name": "status",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay runs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayRunResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay runs by status",
        "tags": [
          "Payroll - Pay Runs"
        ]
      }
    },
    "/pay-runs/stats": {
      "get": {
        "operationId": "PayRunController_getPayRunStats",
        "parameters": [
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for statistics (defaults to current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay run statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalPayRuns": {
                      "type": "number"
                    },
                    "draftPayRuns": {
                      "type": "number"
                    },
                    "processingPayRuns": {
                      "type": "number"
                    },
                    "completedPayRuns": {
                      "type": "number"
                    },
                    "failedPayRuns": {
                      "type": "number"
                    },
                    "cancelledPayRuns": {
                      "type": "number"
                    },
                    "totalGrossPay": {
                      "type": "number"
                    },
                    "totalNetPay": {
                      "type": "number"
                    },
                    "totalEmployeesPaid": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay run statistics",
        "tags": [
          "Payroll - Pay Runs"
        ]
      }
    },
    "/pay-runs/{id}": {
      "get": {
        "operationId": "PayRunController_findPayRunById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay run retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a pay run by ID",
        "tags": [
          "Payroll - Pay Runs"
        ]
      },
      "put": {
        "operationId": "PayRunController_updatePayRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePayRunDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pay run updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or pay run not in DRAFT status"
          },
          "404": {
            "description": "Pay run or pay schedule not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a pay run (only allowed in DRAFT status)",
        "tags": [
          "Payroll - Pay Runs"
        ]
      },
      "delete": {
        "operationId": "PayRunController_deletePayRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pay run deleted successfully"
          },
          "400": {
            "description": "Pay run not in DRAFT or CANCELLED status, or has payslips"
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a pay run (only allowed in DRAFT or CANCELLED status)",
        "tags": [
          "Payroll - Pay Runs"
        ]
      }
    },
    "/pay-runs/{id}/process": {
      "put": {
        "operationId": "PayRunController_processPayRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessPayRunDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pay run processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Pay run not in DRAFT status"
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Process a pay run (change status from DRAFT to PROCESSING)",
        "tags": [
          "Payroll - Pay Runs"
        ]
      }
    },
    "/pay-runs/{id}/approve": {
      "put": {
        "operationId": "PayRunController_approvePayRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovePayRunDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pay run approval processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Pay run not in PROCESSING status"
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve, fail, or cancel a pay run",
        "tags": [
          "Payroll - Pay Runs"
        ]
      }
    },
    "/pay-runs/{id}/cancel": {
      "put": {
        "operationId": "PayRunController_cancelPayRun",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay run cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Pay run not in DRAFT or PROCESSING status"
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel a pay run",
        "tags": [
          "Payroll - Pay Runs"
        ]
      }
    },
    "/pay-runs/{id}/update-totals": {
      "put": {
        "operationId": "PayRunController_updatePayRunTotals",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay run totals updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayRunResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update pay run totals based on payslips",
        "tags": [
          "Payroll - Pay Runs"
        ]
      }
    },
    "/pay-runs/admin/test": {
      "get": {
        "operationId": "PayRunController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for pay run module",
        "tags": [
          "Payroll - Pay Runs"
        ]
      }
    },
    "/payslips": {
      "post": {
        "operationId": "PayslipController_createPayslip",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayslipDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payslip created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Pay run or employee not found"
          },
          "409": {
            "description": "Payslip already exists for this employee and pay run"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new payslip",
        "tags": [
          "Payroll - Payslips"
        ]
      },
      "get": {
        "operationId": "PayslipController_findAllPayslips",
        "parameters": [
          {
            "name": "payRunId",
            "required": false,
            "in": "query",
            "description": "Filter by pay run ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          },
          {
            "name": "payDate",
            "required": false,
            "in": "query",
            "description": "Filter by pay date (YYYY-MM-DD)",
            "schema": {
              "example": "2024-01-31",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payslips retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPayslipResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all payslips with pagination and filters",
        "tags": [
          "Payroll - Payslips"
        ]
      }
    },
    "/payslips/bulk": {
      "post": {
        "operationId": "PayslipController_bulkCreatePayslips",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreatePayslipsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Bulk payslips created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "created": {
                      "type": "number"
                    },
                    "skipped": {
                      "type": "number"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Bulk create payslips for a pay run",
        "tags": [
          "Payroll - Payslips"
        ]
      }
    },
    "/payslips/stats": {
      "get": {
        "operationId": "PayslipController_getPayslipStats",
        "parameters": [
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for statistics (defaults to current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payslip statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalPayslips": {
                      "type": "number"
                    },
                    "totalGrossPay": {
                      "type": "number"
                    },
                    "totalNetPay": {
                      "type": "number"
                    },
                    "averageGrossPay": {
                      "type": "number"
                    },
                    "averageNetPay": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get payslip statistics",
        "tags": [
          "Payroll - Payslips"
        ]
      }
    },
    "/payslips/{id}": {
      "get": {
        "operationId": "PayslipController_findPayslipById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payslip retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Payslip not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a payslip by ID",
        "tags": [
          "Payroll - Payslips"
        ]
      },
      "put": {
        "operationId": "PayslipController_updatePayslip",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePayslipDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payslip updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or payslip not in DRAFT status"
          },
          "404": {
            "description": "Payslip or pay run not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a payslip (only allowed in DRAFT status)",
        "tags": [
          "Payroll - Payslips"
        ]
      },
      "delete": {
        "operationId": "PayslipController_deletePayslip",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Payslip deleted successfully"
          },
          "400": {
            "description": "Payslip not in DRAFT status"
          },
          "404": {
            "description": "Payslip not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a payslip (only allowed in DRAFT status)",
        "tags": [
          "Payroll - Payslips"
        ]
      }
    },
    "/payslips/{id}/calculate": {
      "put": {
        "operationId": "PayslipController_calculatePayslip",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalculatePayslipDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payslip calculated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayslipResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Payslip not in DRAFT status"
          },
          "404": {
            "description": "Payslip not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Calculate payslip amounts (change status from DRAFT to CALCULATED)",
        "tags": [
          "Payroll - Payslips"
        ]
      }
    },
    "/payslips/admin/test": {
      "get": {
        "operationId": "PayslipController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Module test successful"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test endpoint for payslip module",
        "tags": [
          "Payroll - Payslips"
        ]
      }
    },
    "/pay-elements": {
      "post": {
        "operationId": "PayElementController_createPayElement",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePayElementDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pay element created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayElementResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Pay element with this code already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new pay element",
        "tags": [
          "Payroll - Pay Elements"
        ]
      },
      "get": {
        "operationId": "PayElementController_findAllPayElements",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Filter by pay element type",
            "schema": {
              "example": "EARNING",
              "type": "string",
              "enum": [
                "EARNING",
                "DEDUCTION",
                "BENEFIT"
              ]
            }
          },
          {
            "name": "taxable",
            "required": false,
            "in": "query",
            "description": "Filter by taxable status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay elements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPayElementResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all pay elements with pagination and filters",
        "tags": [
          "Payroll - Pay Elements"
        ]
      }
    },
    "/pay-elements/defaults": {
      "post": {
        "operationId": "PayElementController_createDefaultPayElements",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Default pay elements created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayElementResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create default pay elements for tenant setup",
        "tags": [
          "Payroll - Pay Elements"
        ]
      }
    },
    "/pay-elements/type/{type}": {
      "get": {
        "operationId": "PayElementController_findPayElementsByType",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay elements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayElementResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay elements by type",
        "tags": [
          "Payroll - Pay Elements"
        ]
      }
    },
    "/pay-elements/stats": {
      "get": {
        "operationId": "PayElementController_getPayElementStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Pay element statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalPayElements": {
                      "type": "number"
                    },
                    "earningElements": {
                      "type": "number"
                    },
                    "deductionElements": {
                      "type": "number"
                    },
                    "benefitElements": {
                      "type": "number"
                    },
                    "taxableElements": {
                      "type": "number"
                    },
                    "nonTaxableElements": {
                      "type": "number"
                    },
                    "pensionableElements": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay element statistics",
        "tags": [
          "Payroll - Pay Elements"
        ]
      }
    },
    "/pay-elements/code/{code}": {
      "get": {
        "operationId": "PayElementController_findPayElementByCode",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay element retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayElementResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay element not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay element by code",
        "tags": [
          "Payroll - Pay Elements"
        ]
      }
    },
    "/pay-elements/{id}": {
      "get": {
        "operationId": "PayElementController_findPayElementById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pay element retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayElementResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Pay element not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get pay element by ID",
        "tags": [
          "Payroll - Pay Elements"
        ]
      },
      "put": {
        "operationId": "PayElementController_updatePayElement",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePayElementDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pay element updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayElementResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Pay element not found"
          },
          "409": {
            "description": "Pay element with this code already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a pay element",
        "tags": [
          "Payroll - Pay Elements"
        ]
      },
      "delete": {
        "operationId": "PayElementController_deletePayElement",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Pay element deleted successfully"
          },
          "400": {
            "description": "Pay element is in use"
          },
          "404": {
            "description": "Pay element not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a pay element",
        "tags": [
          "Payroll - Pay Elements"
        ]
      }
    },
    "/pay-elements/admin/test": {
      "get": {
        "operationId": "PayElementController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Test successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "module": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Admin test endpoint for pay elements",
        "tags": [
          "Payroll - Pay Elements"
        ]
      }
    },
    "/employee-pay-assignments": {
      "post": {
        "operationId": "EmployeePayAssignmentController_createEmployeePayAssignment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployeePayAssignmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Employee pay assignment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee or pay element not found"
          },
          "409": {
            "description": "Overlapping assignment already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new employee pay assignment",
        "tags": [
          "Payroll - Pay Assignments"
        ]
      },
      "get": {
        "operationId": "EmployeePayAssignmentController_findAllEmployeePayAssignments",
        "parameters": [
          {
            "name": "employeeId",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          },
          {
            "name": "payElementId",
            "required": false,
            "in": "query",
            "description": "Filter by pay element ID",
            "schema": {
              "example": "550e8400-e29b-41d4-a716-446655440000",
              "type": "string"
            }
          },
          {
            "name": "frequency",
            "required": false,
            "in": "query",
            "description": "Filter by pay frequency",
            "schema": {
              "example": "MONTHLY",
              "type": "string",
              "enum": [
                "WEEKLY",
                "BIWEEKLY",
                "MONTHLY",
                "YEARLY",
                "HOURLY"
              ]
            }
          },
          {
            "name": "activeOnly",
            "required": false,
            "in": "query",
            "description": "Show only active assignments",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee pay assignments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEmployeePayAssignmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get employee pay assignments with optional filters and pagination",
        "tags": [
          "Payroll - Pay Assignments"
        ]
      }
    },
    "/employee-pay-assignments/employee/{employeeId}/active": {
      "get": {
        "operationId": "EmployeePayAssignmentController_findActiveAssignmentsForEmployee",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asOfDate",
            "required": false,
            "in": "query",
            "description": "Check assignments as of this date (YYYY-MM-DD)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Active assignments retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get active assignments for an employee",
        "tags": [
          "Payroll - Pay Assignments"
        ]
      }
    },
    "/employee-pay-assignments/stats": {
      "get": {
        "operationId": "EmployeePayAssignmentController_getEmployeePayAssignmentStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Assignment statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalAssignments": {
                      "type": "number"
                    },
                    "activeAssignments": {
                      "type": "number"
                    },
                    "terminatedAssignments": {
                      "type": "number"
                    },
                    "frequencyBreakdown": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "number"
                      }
                    },
                    "averageAssignmentAmount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get employee pay assignment statistics",
        "tags": [
          "Payroll - Pay Assignments"
        ]
      }
    },
    "/employee-pay-assignments/{id}": {
      "get": {
        "operationId": "EmployeePayAssignmentController_findEmployeePayAssignmentById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Employee pay assignment retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Employee pay assignment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get employee pay assignment by ID",
        "tags": [
          "Payroll - Pay Assignments"
        ]
      },
      "put": {
        "operationId": "EmployeePayAssignmentController_updateEmployeePayAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeePayAssignmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee pay assignment updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Employee pay assignment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an employee pay assignment",
        "tags": [
          "Payroll - Pay Assignments"
        ]
      },
      "delete": {
        "operationId": "EmployeePayAssignmentController_deleteEmployeePayAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Employee pay assignment deleted successfully"
          },
          "400": {
            "description": "Assignment is in use and cannot be deleted"
          },
          "404": {
            "description": "Employee pay assignment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an employee pay assignment",
        "tags": [
          "Payroll - Pay Assignments"
        ]
      }
    },
    "/employee-pay-assignments/{id}/terminate": {
      "post": {
        "operationId": "EmployeePayAssignmentController_terminateEmployeePayAssignment",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TerminateAssignmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee pay assignment terminated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Assignment already terminated"
          },
          "404": {
            "description": "Employee pay assignment not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Terminate an employee pay assignment",
        "tags": [
          "Payroll - Pay Assignments"
        ]
      }
    },
    "/employee-pay-assignments/admin/test": {
      "get": {
        "operationId": "EmployeePayAssignmentController_adminTest",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Test successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string"
                    },
                    "module": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Admin test endpoint for employee pay assignments",
        "tags": [
          "Payroll - Pay Assignments"
        ]
      }
    },
    "/enums": {
      "get": {
        "operationId": "EnumsController_getAllEnums",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Enums"
        ]
      }
    },
    "/enums/{name}": {
      "get": {
        "operationId": "EnumsController_getEnumByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Enums"
        ]
      }
    },
    "/admin/rate-groups": {
      "get": {
        "operationId": "AdminController_getRateGroups",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Rate category filter",
            "schema": {
              "type": "string",
              "enum": [
                "NMW",
                "SSP",
                "SMP",
                "SPP",
                "ShPP",
                "SPBP",
                "TAX_BAND",
                "NI_THRESHOLD",
                "NI_RATE",
                "PENSION_AE",
                "LEVY",
                "HOLIDAY_DAYS",
                "WORKING_TIME_MAX"
              ]
            }
          },
          {
            "name": "jurisdiction",
            "required": false,
            "in": "query",
            "description": "Jurisdiction filter",
            "schema": {
              "type": "string",
              "enum": [
                "UK",
                "ENGLAND",
                "WALES",
                "SCOTLAND",
                "N_IRELAND"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "NMW",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate groups retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedRateGroupResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all rate groups",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createRateGroup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateRateGroupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rate group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateGroupResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create rate group",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/rate-groups/{id}": {
      "get": {
        "operationId": "AdminController_getRateGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate group retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateGroupResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get rate group by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateRateGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateRateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate group updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateGroupResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update rate group",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteRateGroup",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rate group deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete rate group",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/rate-groups/import": {
      "post": {
        "operationId": "AdminController_importRateGroups",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportRateGroupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate groups imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Import rate groups from Excel/CSV file",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/rate-groups/export/{format}": {
      "get": {
        "operationId": "AdminController_exportRateGroups",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Rate category filter",
            "schema": {
              "type": "string",
              "enum": [
                "NMW",
                "SSP",
                "SMP",
                "SPP",
                "ShPP",
                "SPBP",
                "TAX_BAND",
                "NI_THRESHOLD",
                "NI_RATE",
                "PENSION_AE",
                "LEVY",
                "HOLIDAY_DAYS",
                "WORKING_TIME_MAX"
              ]
            }
          },
          {
            "name": "jurisdiction",
            "required": false,
            "in": "query",
            "description": "Jurisdiction filter",
            "schema": {
              "type": "string",
              "enum": [
                "UK",
                "ENGLAND",
                "WALES",
                "SCOTLAND",
                "N_IRELAND"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "NMW",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate groups exported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Export rate groups to Excel/CSV",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/rate-groups/template/{format}": {
      "get": {
        "operationId": "AdminController_downloadRateGroupTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template downloaded successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Download rate group import template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/rate-entries": {
      "get": {
        "operationId": "AdminController_getRateEntries",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Rate group ID filter",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "startsAt",
            "required": false,
            "in": "query",
            "description": "Effective from date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-04-01",
              "type": "string"
            }
          },
          {
            "name": "endsAt",
            "required": false,
            "in": "query",
            "description": "Effective to date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-03-31",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedRateEntryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all rate entries",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createRateEntry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateRateEntryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Rate entry created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateEntryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create rate entry",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/rate-entries/{id}": {
      "get": {
        "operationId": "AdminController_getRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entry retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateEntryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get rate entry by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateRateEntryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate entry updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminRateEntryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update rate entry",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteRateEntry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rate entry deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete rate entry",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/rate-entries/import": {
      "post": {
        "operationId": "AdminController_importRateEntries",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportRateEntryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rate entries imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Import rate entries from Excel/CSV file",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/rate-entries/export/{format}": {
      "get": {
        "operationId": "AdminController_exportRateEntries",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "required": false,
            "in": "query",
            "description": "Rate group ID filter",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "startsAt",
            "required": false,
            "in": "query",
            "description": "Effective from date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-04-01",
              "type": "string"
            }
          },
          {
            "name": "endsAt",
            "required": false,
            "in": "query",
            "description": "Effective to date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-03-31",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate entries exported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Export rate entries to Excel/CSV",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/rate-entries/template/{format}": {
      "get": {
        "operationId": "AdminController_downloadRateEntryTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template downloaded successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Download rate entry import template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/public-holidays": {
      "get": {
        "operationId": "AdminController_getPublicHolidays",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "region",
            "required": false,
            "in": "query",
            "description": "Region filter",
            "schema": {
              "example": "England & Wales",
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year filter",
            "schema": {
              "example": 2025,
              "type": "number"
            }
          },
          {
            "name": "date",
            "required": false,
            "in": "query",
            "description": "Date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-12-25",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Public holidays retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedPublicHolidayResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all public holidays",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createPublicHoliday",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreatePublicHolidayDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Public holiday created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPublicHolidayResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create public holiday",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/public-holidays/{id}": {
      "get": {
        "operationId": "AdminController_getPublicHoliday",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Public holiday retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPublicHolidayResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get public holiday by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updatePublicHoliday",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdatePublicHolidayDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Public holiday updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPublicHolidayResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update public holiday",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deletePublicHoliday",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Public holiday deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete public holiday",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/public-holidays/import": {
      "post": {
        "operationId": "AdminController_importPublicHolidays",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportPublicHolidayDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Public holidays imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Import public holidays from Excel/CSV file",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/public-holidays/export/{format}": {
      "get": {
        "operationId": "AdminController_exportPublicHolidays",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "region",
            "required": false,
            "in": "query",
            "description": "Region filter",
            "schema": {
              "example": "England & Wales",
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year filter",
            "schema": {
              "example": 2025,
              "type": "number"
            }
          },
          {
            "name": "date",
            "required": false,
            "in": "query",
            "description": "Date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-12-25",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Public holidays exported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Export public holidays to Excel/CSV",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/public-holidays/template/{format}": {
      "get": {
        "operationId": "AdminController_downloadPublicHolidayTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template downloaded successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Download public holiday import template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/statutory-working-hour-rules": {
      "get": {
        "operationId": "AdminController_getStatutoryWorkingHourRules",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory working hour rules retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedStatutoryWorkingHourRuleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all statutory working hour rules",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createStatutoryWorkingHourRule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateStatutoryWorkingHourRuleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Statutory working hour rule created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryWorkingHourRuleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create statutory working hour rule",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/statutory-working-hour-rules/{id}": {
      "get": {
        "operationId": "AdminController_getStatutoryWorkingHourRule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory working hour rule retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryWorkingHourRuleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get statutory working hour rule by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateStatutoryWorkingHourRule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateStatutoryWorkingHourRuleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Statutory working hour rule updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryWorkingHourRuleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update statutory working hour rule",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteStatutoryWorkingHourRule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Statutory working hour rule deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete statutory working hour rule",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/statutory-working-hour-rules/import": {
      "post": {
        "operationId": "AdminController_importStatutoryWorkingHourRules",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportStatutoryWorkingHourRuleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Statutory working hour rules imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Import statutory working hour rules from Excel/CSV file",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/statutory-working-hour-rules/export/{format}": {
      "get": {
        "operationId": "AdminController_exportStatutoryWorkingHourRules",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory working hour rules exported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Export statutory working hour rules to Excel/CSV",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/statutory-working-hour-rules/template/{format}": {
      "get": {
        "operationId": "AdminController_downloadStatutoryWorkingHourRuleTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template downloaded successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Download statutory working hour rule import template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/statutory-pay-rates": {
      "get": {
        "operationId": "AdminController_getStatutoryPayRates",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Code filter",
            "schema": {
              "example": "OVERTIME_1_5X",
              "type": "string"
            }
          },
          {
            "name": "effective_from",
            "required": false,
            "in": "query",
            "description": "Effective from date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-04-01",
              "type": "string"
            }
          },
          {
            "name": "effective_to",
            "required": false,
            "in": "query",
            "description": "Effective to date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-03-31",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory pay rates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedStatutoryPayRateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all statutory pay rates",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createStatutoryPayRate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateStatutoryPayRateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Statutory pay rate created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryPayRateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create statutory pay rate",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/statutory-pay-rates/{id}": {
      "get": {
        "operationId": "AdminController_getStatutoryPayRate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory pay rate retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryPayRateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get statutory pay rate by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateStatutoryPayRate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateStatutoryPayRateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Statutory pay rate updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminStatutoryPayRateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update statutory pay rate",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteStatutoryPayRate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Statutory pay rate deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete statutory pay rate",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/statutory-pay-rates/import": {
      "post": {
        "operationId": "AdminController_importStatutoryPayRates",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportStatutoryPayRateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Statutory pay rates imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Import statutory pay rates from Excel/CSV file",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/statutory-pay-rates/export/{format}": {
      "get": {
        "operationId": "AdminController_exportStatutoryPayRates",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "National Minimum Wage",
              "type": "string"
            }
          },
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Code filter",
            "schema": {
              "example": "OVERTIME_1_5X",
              "type": "string"
            }
          },
          {
            "name": "effective_from",
            "required": false,
            "in": "query",
            "description": "Effective from date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-04-01",
              "type": "string"
            }
          },
          {
            "name": "effective_to",
            "required": false,
            "in": "query",
            "description": "Effective to date filter (YYYY-MM-DD)",
            "schema": {
              "example": "2025-03-31",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Statutory pay rates exported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Export statutory pay rates to Excel/CSV",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/statutory-pay-rates/template/{format}": {
      "get": {
        "operationId": "AdminController_downloadStatutoryPayRateTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template downloaded successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Download statutory pay rate import template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/leave-type-templates": {
      "get": {
        "operationId": "AdminController_getLeaveTypeTemplates",
        "parameters": [
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Filter by code (partial match)",
            "schema": {
              "example": "ANNUAL",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "example": "Leave",
              "type": "string"
            }
          },
          {
            "name": "statutory",
            "required": false,
            "in": "query",
            "description": "Filter by statutory status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "paid",
            "required": false,
            "in": "query",
            "description": "Filter by paid status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "jurisdiction",
            "required": false,
            "in": "query",
            "description": "Filter by jurisdiction",
            "schema": {
              "example": "England",
              "type": "string"
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave type templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedLeaveTypeTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all leave type templates",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createLeaveTypeTemplate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateLeaveTypeTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Leave type template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLeaveTypeTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create leave type template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/leave-type-templates/{id}": {
      "get": {
        "operationId": "AdminController_getLeaveTypeTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave type template retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLeaveTypeTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get leave type template by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateLeaveTypeTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateLeaveTypeTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Leave type template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLeaveTypeTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update leave type template",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteLeaveTypeTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Leave type template deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete leave type template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/leave-type-templates/import": {
      "post": {
        "operationId": "AdminController_importLeaveTypeTemplates",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportLeaveTypeTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Leave type templates imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Import leave type templates from Excel/CSV file",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/leave-type-templates/export/{format}": {
      "get": {
        "operationId": "AdminController_exportLeaveTypeTemplates",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Filter by code (partial match)",
            "schema": {
              "example": "ANNUAL",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Filter by name (partial match)",
            "schema": {
              "example": "Leave",
              "type": "string"
            }
          },
          {
            "name": "statutory",
            "required": false,
            "in": "query",
            "description": "Filter by statutory status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "paid",
            "required": false,
            "in": "query",
            "description": "Filter by paid status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "jurisdiction",
            "required": false,
            "in": "query",
            "description": "Filter by jurisdiction",
            "schema": {
              "example": "England",
              "type": "string"
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave type templates exported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Export leave type templates to Excel/CSV",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/leave-type-templates/template/{format}": {
      "get": {
        "operationId": "AdminController_downloadLeaveTypeTemplateTemplate",
        "parameters": [
          {
            "name": "format",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template downloaded successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Download leave type template import template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/leave-type-templates/{id}/deploy": {
      "post": {
        "operationId": "AdminController_deployLeaveTypeTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminDeployLeaveTypeTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Leave type template deployed successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Deploy leave type template to specified tenants",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/leave-type-templates/{id}/usage": {
      "get": {
        "operationId": "AdminController_getLeaveTypeTemplateUsage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usage statistics retrieved successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get usage statistics for leave type template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/learning-content-templates": {
      "get": {
        "operationId": "AdminController_getLearningContentTemplates",
        "parameters": [
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Filter by code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "in": "query",
            "description": "Filter by title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_type",
            "required": false,
            "in": "query",
            "description": "Filter by content type",
            "schema": {
              "type": "string",
              "enum": [
                "VIDEO",
                "DOCUMENT",
                "PRESENTATION",
                "INTERACTIVE",
                "ASSESSMENT",
                "WEBINAR",
                "COURSE"
              ]
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "learning_level",
            "required": false,
            "in": "query",
            "description": "Filter by learning level",
            "schema": {
              "type": "string",
              "enum": [
                "BEGINNER",
                "INTERMEDIATE",
                "ADVANCED",
                "EXPERT"
              ]
            }
          },
          {
            "name": "compliance_requirement",
            "required": false,
            "in": "query",
            "description": "Filter by compliance requirement",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Learning content templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedLearningContentTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all learning content templates",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createLearningContentTemplate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateLearningContentTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Learning content template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLearningContentTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create learning content template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/learning-content-templates/{id}": {
      "get": {
        "operationId": "AdminController_getLearningContentTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Learning content template retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLearningContentTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get learning content template by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateLearningContentTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateLearningContentTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Learning content template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLearningContentTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update learning content template",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteLearningContentTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Learning content template deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete learning content template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/learning-path-templates": {
      "get": {
        "operationId": "AdminController_getLearningPathTemplates",
        "parameters": [
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Filter by code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "required": false,
            "in": "query",
            "description": "Filter by title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path_type",
            "required": false,
            "in": "query",
            "description": "Filter by path type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mandatory",
            "required": false,
            "in": "query",
            "description": "Filter by mandatory status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "certification_available",
            "required": false,
            "in": "query",
            "description": "Filter by certification availability",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Learning path templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedLearningPathTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all learning path templates",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createLearningPathTemplate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateLearningPathTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Learning path template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLearningPathTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create learning path template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/learning-path-templates/{id}": {
      "get": {
        "operationId": "AdminController_getLearningPathTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Learning path template retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLearningPathTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get learning path template by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateLearningPathTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateLearningPathTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Learning path template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLearningPathTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update learning path template",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteLearningPathTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Learning path template deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete learning path template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/compliance-check-templates": {
      "get": {
        "operationId": "AdminController_getComplianceCheckTemplates",
        "parameters": [
          {
            "name": "template_code",
            "required": false,
            "in": "query",
            "description": "Filter by template code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_name",
            "required": false,
            "in": "query",
            "description": "Filter by template name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_system_template",
            "required": false,
            "in": "query",
            "description": "Filter by system template status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Compliance check templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedComplianceCheckTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all compliance check templates",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createComplianceCheckTemplate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateComplianceCheckTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Compliance check template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminComplianceCheckTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create compliance check template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/compliance-check-templates/{id}": {
      "get": {
        "operationId": "AdminController_getComplianceCheckTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Compliance check template retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminComplianceCheckTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get compliance check template by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateComplianceCheckTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateComplianceCheckTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Compliance check template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminComplianceCheckTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update compliance check template",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteComplianceCheckTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Compliance check template deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete compliance check template",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics/dashboard": {
      "get": {
        "operationId": "AdminController_getAdminDashboard",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Dashboard summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminDashboardSummaryDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get comprehensive admin dashboard summary",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics/system-metrics": {
      "get": {
        "operationId": "AdminController_getSystemMetrics",
        "parameters": [
          {
            "name": "start_date",
            "required": false,
            "in": "query",
            "description": "Start date for analytics",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": false,
            "in": "query",
            "description": "End date for analytics",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Period for grouping analytics",
            "schema": {
              "default": "MONTHLY",
              "type": "string",
              "enum": [
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "QUARTERLY",
                "YEARLY"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Specific metric to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System metrics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemMetricDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get system-wide metrics and analytics",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics/system-health": {
      "get": {
        "operationId": "AdminController_getSystemHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "System health status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemHealthDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get system health status",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics/tenant-statistics": {
      "get": {
        "operationId": "AdminController_getTenantStatistics",
        "parameters": [
          {
            "name": "tenant_id",
            "required": false,
            "in": "query",
            "description": "Filter by tenant ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active_only",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "include_details",
            "required": false,
            "in": "query",
            "description": "Include detailed breakdown",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossTenantStatisticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get cross-tenant statistics",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics/tenant-usage/{tenantId}": {
      "get": {
        "operationId": "AdminController_getTenantUsage",
        "parameters": [
          {
            "name": "tenantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant usage statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantUsageStatisticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get specific tenant usage statistics",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics/template-usage": {
      "get": {
        "operationId": "AdminController_getTemplateUsageStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Template usage statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateUsageStatisticsDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get template usage statistics across tenants",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics/compliance-overview": {
      "get": {
        "operationId": "AdminController_getComplianceStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Compliance statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceStatisticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get compliance statistics overview",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics/payroll-statistics": {
      "get": {
        "operationId": "AdminController_getPayrollStatistics",
        "parameters": [
          {
            "name": "start_date",
            "required": false,
            "in": "query",
            "description": "Start date for analytics",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": false,
            "in": "query",
            "description": "End date for analytics",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Period for grouping analytics",
            "schema": {
              "default": "MONTHLY",
              "type": "string",
              "enum": [
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "QUARTERLY",
                "YEARLY"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Specific metric to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payroll statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollStatisticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get payroll statistics across all tenants",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics/growth-metrics": {
      "get": {
        "operationId": "AdminController_getGrowthMetrics",
        "parameters": [
          {
            "name": "start_date",
            "required": false,
            "in": "query",
            "description": "Start date for analytics",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "required": false,
            "in": "query",
            "description": "End date for analytics",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "period",
            "required": false,
            "in": "query",
            "description": "Period for grouping analytics",
            "schema": {
              "default": "MONTHLY",
              "type": "string",
              "enum": [
                "DAILY",
                "WEEKLY",
                "MONTHLY",
                "QUARTERLY",
                "YEARLY"
              ]
            }
          },
          {
            "name": "metric",
            "required": false,
            "in": "query",
            "description": "Specific metric to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Growth metrics retrieved successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get platform growth metrics",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics/generate-report": {
      "post": {
        "operationId": "AdminController_generateAnalyticsReport",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Report generated successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Generate custom analytics report",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/template-customization-configs": {
      "get": {
        "operationId": "AdminController_getTemplateCustomizationConfigs",
        "parameters": [
          {
            "name": "template_id",
            "required": false,
            "in": "query",
            "description": "Filter by template ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "template_type",
            "required": false,
            "in": "query",
            "description": "Filter by template type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customization_level",
            "required": false,
            "in": "query",
            "description": "Filter by customization level",
            "schema": {
              "type": "string",
              "enum": [
                "BASIC",
                "INTERMEDIATE",
                "ADVANCED",
                "EXPERT"
              ]
            }
          },
          {
            "name": "version_control_enabled",
            "required": false,
            "in": "query",
            "description": "Filter by version control enabled",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template customization configs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedTemplateCustomizationConfigResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all template customization configs",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createTemplateCustomizationConfig",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateTemplateCustomizationConfigDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template customization config created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminTemplateCustomizationConfigResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create template customization config",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/template-customization-configs/{id}": {
      "get": {
        "operationId": "AdminController_getTemplateCustomizationConfig",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template customization config retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminTemplateCustomizationConfigResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get template customization config by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateTemplateCustomizationConfig",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateTemplateCustomizationConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Template customization config updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminTemplateCustomizationConfigResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update template customization config",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteTemplateCustomizationConfig",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template customization config deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete template customization config",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/compliance-inspection-types": {
      "get": {
        "operationId": "AdminController_getComplianceInspectionTypes",
        "parameters": [
          {
            "name": "inspection_code",
            "required": false,
            "in": "query",
            "description": "Filter by inspection code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "regulator_name",
            "required": false,
            "in": "query",
            "description": "Filter by regulator name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "risk_level",
            "required": false,
            "in": "query",
            "description": "Filter by risk level",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in inspection name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Compliance inspection types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedComplianceInspectionTypeResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all compliance inspection types",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createComplianceInspectionType",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateComplianceInspectionTypeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Compliance inspection type created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminComplianceInspectionTypeResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create compliance inspection type",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/compliance-inspection-types/{id}": {
      "get": {
        "operationId": "AdminController_getComplianceInspectionType",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Compliance inspection type retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminComplianceInspectionTypeResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get compliance inspection type by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateComplianceInspectionType",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateComplianceInspectionTypeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Compliance inspection type updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminComplianceInspectionTypeResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update compliance inspection type",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteComplianceInspectionType",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Compliance inspection type deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete compliance inspection type",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/evidence-types": {
      "get": {
        "operationId": "AdminController_getEvidenceTypes",
        "parameters": [
          {
            "name": "evidence_code",
            "required": false,
            "in": "query",
            "description": "Filter by evidence code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evidence_category",
            "required": false,
            "in": "query",
            "description": "Filter by evidence category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "legal_significance",
            "required": false,
            "in": "query",
            "description": "Filter by legal significance",
            "schema": {
              "type": "string",
              "enum": [
                "CRITICAL",
                "IMPORTANT",
                "STANDARD",
                "LOW"
              ]
            }
          },
          {
            "name": "processing_complexity",
            "required": false,
            "in": "query",
            "description": "Filter by processing complexity",
            "schema": {
              "type": "string",
              "enum": [
                "SIMPLE",
                "MODERATE",
                "COMPLEX",
                "VERY_COMPLEX"
              ]
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in name and description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evidence types retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedEvidenceTypeResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all evidence types",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createEvidenceType",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateEvidenceTypeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Evidence type created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminEvidenceTypeResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create evidence type",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/evidence-types/{id}": {
      "get": {
        "operationId": "AdminController_getEvidenceType",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evidence type retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminEvidenceTypeResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get evidence type by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateEvidenceType",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateEvidenceTypeDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Evidence type updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminEvidenceTypeResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update evidence type",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteEvidenceType",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Evidence type deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete evidence type",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics-cache": {
      "get": {
        "operationId": "AdminController_getAnalyticsCacheEntries",
        "parameters": [
          {
            "name": "cache_key",
            "required": false,
            "in": "query",
            "description": "Filter by cache key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query_hash",
            "required": false,
            "in": "query",
            "description": "Filter by query hash",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by expiration status (active/expired)",
            "schema": {
              "default": "all",
              "type": "string",
              "enum": [
                "active",
                "expired",
                "all"
              ]
            }
          },
          {
            "name": "min_hit_count",
            "required": false,
            "in": "query",
            "description": "Minimum hit count",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "sort_by",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "default": "last_accessed",
              "type": "string",
              "enum": [
                "created_at",
                "last_accessed",
                "hit_count",
                "expires_at"
              ]
            }
          },
          {
            "name": "order",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analytics cache entries retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedAnalyticsQueryCacheResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get analytics cache entries",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics-cache/statistics": {
      "get": {
        "operationId": "AdminController_getAnalyticsCacheStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Analytics cache statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminCacheStatisticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get analytics cache statistics",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics-cache/clear": {
      "post": {
        "operationId": "AdminController_clearAnalyticsCache",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminClearCacheDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Analytics cache cleared successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Clear analytics cache",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/analytics-cache/optimize": {
      "post": {
        "operationId": "AdminController_optimizeAnalyticsCache",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminOptimizeCacheDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Analytics cache optimized successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Optimize analytics cache",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/data-update-logs": {
      "get": {
        "operationId": "AdminController_getDataUpdateLogs",
        "parameters": [
          {
            "name": "component",
            "required": false,
            "in": "query",
            "description": "Filter by component",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "update_type",
            "required": false,
            "in": "query",
            "description": "Filter by update type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "trigger_type",
            "required": false,
            "in": "query",
            "description": "Filter by trigger type",
            "schema": {
              "type": "string",
              "enum": [
                "MANUAL",
                "SCHEDULED",
                "SYSTEM_UPDATE",
                "CONTENT_CHANGE",
                "COMPLIANCE_UPDATE"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "QUEUED",
                "RUNNING",
                "COMPLETED",
                "FAILED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "priority",
            "required": false,
            "in": "query",
            "description": "Filter by priority",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "started_after",
            "required": false,
            "in": "query",
            "description": "Filter logs started after this date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "started_before",
            "required": false,
            "in": "query",
            "description": "Filter logs started before this date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "with_errors",
            "required": false,
            "in": "query",
            "description": "Include only logs with errors",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "sort_by",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "default": "started_at",
              "type": "string",
              "enum": [
                "started_at",
                "completed_at",
                "status",
                "priority"
              ]
            }
          },
          {
            "name": "order",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data update logs retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedDataUpdateLogResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get data update logs",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/data-update-logs/statistics": {
      "get": {
        "operationId": "AdminController_getDataUpdateLogStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Data update log statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminDataUpdateLogStatisticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get data update log statistics",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/data-update-logs/cleanup": {
      "post": {
        "operationId": "AdminController_cleanupDataUpdateLogs",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCleanupDataUpdateLogsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data update logs cleaned up successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Cleanup old data update logs",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/preset-content-queue": {
      "get": {
        "operationId": "AdminController_getPresetContentQueueItems",
        "parameters": [
          {
            "name": "content_type",
            "required": false,
            "in": "query",
            "description": "Filter by content type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_code",
            "required": false,
            "in": "query",
            "description": "Filter by content code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "action",
            "required": false,
            "in": "query",
            "description": "Filter by action",
            "schema": {
              "type": "string",
              "enum": [
                "CREATE",
                "UPDATE",
                "DELETE",
                "DEPLOY"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "QUEUED",
                "RUNNING",
                "COMPLETED",
                "FAILED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "priority",
            "required": false,
            "in": "query",
            "description": "Filter by priority",
            "schema": {
              "type": "string",
              "enum": [
                "low",
                "medium",
                "high",
                "critical"
              ]
            }
          },
          {
            "name": "scheduled_before",
            "required": false,
            "in": "query",
            "description": "Include only items scheduled before this date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ready_to_process",
            "required": false,
            "in": "query",
            "description": "Include items ready for processing",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "retriable",
            "required": false,
            "in": "query",
            "description": "Include failed items that can be retried",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "sort_by",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "default": "scheduled_at",
              "type": "string",
              "enum": [
                "scheduled_at",
                "priority",
                "created_at",
                "status"
              ]
            }
          },
          {
            "name": "order",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "default": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preset content update queue items retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedPresetContentUpdateQueueResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get preset content update queue items",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createPresetContentQueueItem",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreatePresetContentUpdateQueueDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Item added to preset content queue successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPresetContentUpdateQueueResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Add item to preset content update queue",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/preset-content-queue/status": {
      "get": {
        "operationId": "AdminController_getPresetContentQueueStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Preset content queue status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminQueueStatusDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get preset content queue status",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/preset-content-queue/{id}": {
      "get": {
        "operationId": "AdminController_getPresetContentQueueItem",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preset content queue item retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPresetContentUpdateQueueResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get preset content queue item by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updatePresetContentQueueItem",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdatePresetContentUpdateQueueDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preset content queue item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPresetContentUpdateQueueResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update preset content queue item",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deletePresetContentQueueItem",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Item removed from preset content queue successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Remove item from preset content queue",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/preset-content-queue/process": {
      "post": {
        "operationId": "AdminController_processPresetContentQueue",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminProcessQueueDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preset content queue processed successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Process preset content update queue",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/preset-content": {
      "get": {
        "operationId": "AdminController_getPresetContent",
        "parameters": [
          {
            "name": "content_type",
            "required": false,
            "in": "query",
            "description": "Filter by content type",
            "schema": {
              "type": "string",
              "enum": [
                "contract",
                "policy",
                "document",
                "form",
                "training"
              ]
            }
          },
          {
            "name": "code",
            "required": false,
            "in": "query",
            "description": "Filter by code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "ACTIVE",
                "ARCHIVED",
                "DEPRECATED"
              ]
            }
          },
          {
            "name": "is_system_default",
            "required": false,
            "in": "query",
            "description": "Filter by system default",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "jurisdiction",
            "required": false,
            "in": "query",
            "description": "Filter by jurisdiction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in title and description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preset content retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedPresetContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all preset content",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createPresetContent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreatePresetContentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Preset content created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPresetContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create preset content",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/preset-content/{id}": {
      "get": {
        "operationId": "AdminController_getPresetContentById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preset content retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPresetContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get preset content by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updatePresetContent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdatePresetContentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preset content updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPresetContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update preset content",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deletePresetContent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Preset content deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete preset content",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/preset-content/bulk-import": {
      "post": {
        "operationId": "AdminController_bulkImportPresetContent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkImportPresetContentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preset content imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Bulk import preset content",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/preset-content/{id}/clone": {
      "post": {
        "operationId": "AdminController_clonePresetContent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminClonePresetContentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Preset content cloned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPresetContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Clone preset content",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/preset-content/{id}/deploy": {
      "post": {
        "operationId": "AdminController_deployPresetContent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminDeployPresetContentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Preset content deployed successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Deploy preset content to tenants",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/localization-configs": {
      "get": {
        "operationId": "AdminController_getLocalizationConfigurations",
        "parameters": [
          {
            "name": "localization_code",
            "required": false,
            "in": "query",
            "description": "Filter by localization code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language_code",
            "required": false,
            "in": "query",
            "description": "Filter by language code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country_code",
            "required": false,
            "in": "query",
            "description": "Filter by country code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Localization configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedLocalizationConfigurationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all localization configurations",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createLocalizationConfiguration",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateLocalizationConfigurationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Localization configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLocalizationConfigurationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create localization configuration",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/localization-configs/{id}": {
      "get": {
        "operationId": "AdminController_getLocalizationConfiguration",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Localization configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLocalizationConfigurationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get localization configuration by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateLocalizationConfiguration",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateLocalizationConfigurationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Localization configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLocalizationConfigurationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update localization configuration",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteLocalizationConfiguration",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Localization configuration deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete localization configuration",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/localization-translations": {
      "get": {
        "operationId": "AdminController_getLocalizationTranslations",
        "parameters": [
          {
            "name": "localization_id",
            "required": false,
            "in": "query",
            "description": "Filter by localization ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "translation_key",
            "required": false,
            "in": "query",
            "description": "Filter by translation key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "translation_quality",
            "required": false,
            "in": "query",
            "description": "Filter by translation quality",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "reviewed",
                "approved",
                "needs_review"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in translated text",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Localization translations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedLocalizationTranslationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all localization translations",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "post": {
        "operationId": "AdminController_createLocalizationTranslation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminCreateLocalizationTranslationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Localization translation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLocalizationTranslationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create localization translation",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/localization-translations/{id}": {
      "get": {
        "operationId": "AdminController_getLocalizationTranslation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Localization translation retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLocalizationTranslationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get localization translation by ID",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateLocalizationTranslation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateLocalizationTranslationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Localization translation updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminLocalizationTranslationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update localization translation",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "delete": {
        "operationId": "AdminController_deleteLocalizationTranslation",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Localization translation deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete localization translation",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/localization-translations/bulk-import": {
      "post": {
        "operationId": "AdminController_bulkImportTranslations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Translations imported successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Bulk import translations",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/system-initialization": {
      "get": {
        "operationId": "AdminController_getSystemInitializationStatus",
        "parameters": [
          {
            "name": "component",
            "required": false,
            "in": "query",
            "description": "Filter by component name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_initialized",
            "required": false,
            "in": "query",
            "description": "Filter by initialization status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "example": "completed",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "System initialization status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminPaginatedSystemInitializationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get system initialization status",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/system-initialization/{component}": {
      "get": {
        "operationId": "AdminController_getComponentInitializationStatus",
        "parameters": [
          {
            "name": "component",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Component initialization status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminSystemInitializationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get initialization status for component",
        "tags": [
          "Admin - Configuration"
        ]
      },
      "put": {
        "operationId": "AdminController_updateComponentInitializationStatus",
        "parameters": [
          {
            "name": "component",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminUpdateSystemInitializationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Component initialization status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminSystemInitializationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update component initialization status",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/system-initialization/initialize/{component}": {
      "post": {
        "operationId": "AdminController_initializeComponent",
        "parameters": [
          {
            "name": "component",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Component initialized successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Initialize system component",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/system-initialization/reset/{component}": {
      "post": {
        "operationId": "AdminController_resetComponentInitialization",
        "parameters": [
          {
            "name": "component",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Component initialization reset successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Reset component initialization",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/tenant-operations/bulk-update": {
      "post": {
        "operationId": "AdminController_performBulkUpdate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminBulkUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk update completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminOperationResultDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Perform bulk update across tenants",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/tenant-operations/data-migration": {
      "post": {
        "operationId": "AdminController_performDataMigration",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminDataMigrationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data migration completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminOperationResultDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Migrate data between tenants",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/tenant-operations/cleanup": {
      "post": {
        "operationId": "AdminController_performDataCleanup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminDataCleanupDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data cleanup completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminOperationResultDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Cleanup tenant data",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/tenant-operations/health-check": {
      "get": {
        "operationId": "AdminController_performHealthCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Health check completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantHealthStatusDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Check health status of all tenants",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/regulatory-updates/status": {
      "get": {
        "operationId": "AdminController_getRegulatoryUpdateStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Regulatory update status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegulatoryUpdateStatusDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Check for regulatory updates",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/regulatory-updates/apply": {
      "post": {
        "operationId": "AdminController_applyRegulatoryUpdates",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyRegulatoryUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Regulatory updates applied successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminOperationResultDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Apply regulatory updates",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/regulatory-updates/history": {
      "get": {
        "operationId": "AdminController_getRegulatoryUpdateHistory",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Regulatory update history retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegulatoryUpdateHistoryDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get regulatory update history",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/regulatory-updates/rollback": {
      "post": {
        "operationId": "AdminController_rollbackRegulatoryUpdate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RollbackRegulatoryUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Regulatory updates rolled back successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminOperationResultDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Rollback regulatory updates",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/presets/leave-types": {
      "get": {
        "operationId": "AdminController_getLeaveTypePresets",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Leave type presets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemPresetDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get default leave type presets",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/presets/leave-types/update": {
      "post": {
        "operationId": "AdminController_updateLeaveTypePresets",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemPresetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Leave type presets updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemPresetDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update leave type presets",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/presets/compliance-checks": {
      "get": {
        "operationId": "AdminController_getComplianceCheckPresets",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Compliance check presets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemPresetDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get default compliance check presets",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/presets/compliance-checks/update": {
      "post": {
        "operationId": "AdminController_updateComplianceCheckPresets",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemPresetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Compliance check presets updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemPresetDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update compliance check presets",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/presets/learning-paths": {
      "get": {
        "operationId": "AdminController_getLearningPathPresets",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Learning path presets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemPresetDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get default learning path presets",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/admin/presets/learning-paths/update": {
      "post": {
        "operationId": "AdminController_updateLearningPathPresets",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemPresetDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Learning path presets updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemPresetDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update learning path presets",
        "tags": [
          "Admin - Configuration"
        ]
      }
    },
    "/ess/profile": {
      "get": {
        "description": "Retrieve the authenticated employee's profile information for self-service access",
        "operationId": "ESSProfileController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Employee profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeProfileDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "403": {
            "description": "ESS access denied - employee not active or ESS not enabled"
          },
          "404": {
            "description": "Employee profile not found or ESS not enabled"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee profile",
        "tags": [
          "ESS - Employee Profile"
        ]
      },
      "patch": {
        "description": "Update the authenticated employee's personal information. Only certain fields can be updated via self-service.",
        "operationId": "ESSProfileController_updateProfile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Personal information fields to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonalInfoDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeProfileDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data provided (e.g., invalid phone number, sort code format)"
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "403": {
            "description": "ESS access denied - employee not active or ESS not enabled"
          },
          "404": {
            "description": "Employee profile not found or ESS not enabled"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update employee profile",
        "tags": [
          "ESS - Employee Profile"
        ]
      }
    },
    "/ess/payslips": {
      "get": {
        "description": "Retrieve the authenticated employee's payslip history with optional filtering by year/month",
        "operationId": "ESSPayslipController_getPayslips",
        "parameters": [
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Filter by year",
            "schema": {
              "example": 2024,
              "type": "number"
            }
          },
          {
            "name": "month",
            "required": false,
            "in": "query",
            "description": "Filter by month (1-12)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of payslips to return",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payslips retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PayslipSummaryDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee payslips",
        "tags": [
          "ESS - Payslips"
        ]
      }
    },
    "/ess/payslips/year-to-date": {
      "get": {
        "description": "Get the authenticated employee's year-to-date payroll summary including total gross pay, tax, and NI contributions",
        "operationId": "ESSPayslipController_getYearToDateSummary",
        "parameters": [
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Year for summary (defaults to current year)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Year-to-date summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/YearToDateSummaryDto"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get year-to-date summary",
        "tags": [
          "ESS - Payslips"
        ]
      }
    },
    "/ess/payslips/{id}/download": {
      "get": {
        "description": "Download a specific payslip as a PDF document. Only accessible by the payslip owner.",
        "operationId": "ESSPayslipController_downloadPayslip",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Payslip ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payslip PDF downloaded successfully",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "403": {
            "description": "Access denied - payslip does not belong to authenticated employee"
          },
          "404": {
            "description": "Payslip not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Download payslip PDF",
        "tags": [
          "ESS - Payslips"
        ]
      }
    },
    "/ess/leave-requests": {
      "post": {
        "description": "Submit a new leave request. The system will check leave balance and conflicts before creating the request.",
        "operationId": "ESSLeaveRequestController_submitLeaveRequest",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Leave request details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLeaveRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Leave request submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaveRequestResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data (insufficient balance, conflicts, etc.)"
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "404": {
            "description": "Leave type not found or employee ESS not enabled"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Submit leave request",
        "tags": [
          "ESS - Leave Requests"
        ]
      },
      "get": {
        "description": "Retrieve all leave requests for the authenticated employee, ordered by most recent first",
        "operationId": "ESSLeaveRequestController_getMyLeaveRequests",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Leave requests retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaveRequestResponseDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee leave requests",
        "tags": [
          "ESS - Leave Requests"
        ]
      }
    },
    "/ess/leave-requests/balance": {
      "get": {
        "description": "Get the authenticated employee's leave balance for all leave types, including used, remaining, and pending days",
        "operationId": "ESSLeaveRequestController_getLeaveBalance",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Leave balance retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaveBalanceDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get leave balance",
        "tags": [
          "ESS - Leave Requests"
        ]
      }
    },
    "/ess/leave-requests/{id}": {
      "delete": {
        "description": "Cancel a pending leave request. Only requests with PENDING status can be cancelled.",
        "operationId": "ESSLeaveRequestController_cancelLeaveRequest",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Leave request ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Leave request cancelled successfully"
          },
          "400": {
            "description": "Cannot cancel leave request (not in pending status)"
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "404": {
            "description": "Leave request not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Cancel leave request",
        "tags": [
          "ESS - Leave Requests"
        ]
      }
    },
    "/ess/documents/upload": {
      "post": {
        "description": "Upload a personal document such as passport, visa, certificate, etc. Maximum file size is 10MB.",
        "operationId": "ESSDocumentController_uploadDocument",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Document upload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "Document file (PDF, JPG, PNG)"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "passport",
                      "visa",
                      "certificate",
                      "contract",
                      "other"
                    ],
                    "description": "Document type"
                  },
                  "name": {
                    "type": "string",
                    "description": "Document name"
                  },
                  "expiryDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Document expiry date (optional)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeDocumentDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file or document data"
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "413": {
            "description": "File size exceeds maximum allowed (10MB)"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Upload employee document",
        "tags": [
          "ESS - Documents"
        ]
      }
    },
    "/ess/documents": {
      "get": {
        "description": "Retrieve all documents uploaded by the authenticated employee",
        "operationId": "ESSDocumentController_getMyDocuments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Documents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmployeeDocumentDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing authentication token"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get employee documents",
        "tags": [
          "ESS - Documents"
        ]
      }
    },
    "/ess/documents/{id}": {
      "delete": {
        "description": "Delete a document uploaded by the authenticated employee",
        "operationId": "ESSDocumentController_deleteDocument",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Document ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document deleted successfully"
          },
          "401": {
            "description": "Invalid or missing authentication token"
          },
          "404": {
            "description": "Document not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete employee document",
        "tags": [
          "ESS - Documents"
        ]
      }
    },
    "/recruitment/job-postings": {
      "post": {
        "operationId": "JobPostingController_createJobPosting",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateJobPostingDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Job posting created successfully"
          },
          "400": {
            "description": "Invalid request data"
          },
          "404": {
            "description": "Related resource not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      },
      "get": {
        "operationId": "JobPostingController_getJobPostings",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by posting status",
            "schema": {
              "enum": [
                "DRAFT",
                "ACTIVE",
                "PAUSED",
                "CLOSED",
                "CANCELLED",
                "ARCHIVED"
              ],
              "type": "string"
            }
          },
          {
            "name": "hiring_manager_id",
            "required": false,
            "in": "query",
            "description": "Filter by hiring manager ID",
            "schema": {
              "example": "uuid",
              "type": "string"
            }
          },
          {
            "name": "department_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid",
              "type": "string"
            }
          },
          {
            "name": "location",
            "required": false,
            "in": "query",
            "description": "Filter by location (partial match)",
            "schema": {
              "example": "London",
              "type": "string"
            }
          },
          {
            "name": "remote_work_allowed",
            "required": false,
            "in": "query",
            "description": "Filter by remote work availability",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "internal_only",
            "required": false,
            "in": "query",
            "description": "Filter for internal only postings",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of items to skip",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of job postings retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get list of job postings with filters",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/job-postings/{id}": {
      "put": {
        "operationId": "JobPostingController_updateJobPosting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateJobPostingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job posting updated successfully"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an existing job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      },
      "get": {
        "operationId": "JobPostingController_getJobPostingById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job posting retrieved successfully"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific job posting by ID",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/job-postings/{id}/publish": {
      "post": {
        "operationId": "JobPostingController_publishJobPosting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job posting published successfully"
          },
          "400": {
            "description": "Only draft job postings can be published"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Publish a draft job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/job-postings/{id}/close": {
      "post": {
        "operationId": "JobPostingController_closeJobPosting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job posting closed successfully"
          },
          "400": {
            "description": "Only active job postings can be closed"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Close an active job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/job-postings/{id}/reopen": {
      "post": {
        "operationId": "JobPostingController_reopenJobPosting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job posting reopened successfully"
          },
          "400": {
            "description": "Only closed job postings can be reopened"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reopen a closed job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/job-postings/{id}/archive": {
      "post": {
        "operationId": "JobPostingController_archiveJobPosting",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Job posting ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job posting archived successfully"
          },
          "404": {
            "description": "Job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Archive a job posting",
        "tags": [
          "Recruitment - Job Postings"
        ]
      }
    },
    "/recruitment/candidates": {
      "post": {
        "operationId": "CandidateController_createCandidate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCandidateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Candidate created successfully"
          },
          "400": {
            "description": "Candidate with this email already exists"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new candidate profile",
        "tags": [
          "Recruitment - Candidates"
        ]
      },
      "get": {
        "operationId": "CandidateController_getCandidates",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by candidate status",
            "schema": {
              "enum": [
                "APPLIED",
                "SCREENING",
                "INTERVIEW_SCHEDULED",
                "INTERVIEWED",
                "OFFERED",
                "HIRED",
                "REJECTED",
                "WITHDRAWN"
              ],
              "type": "string"
            }
          },
          {
            "name": "source",
            "required": false,
            "in": "query",
            "description": "Filter by candidate source",
            "schema": {
              "type": "string",
              "enum": [
                "WEBSITE",
                "REFERRAL",
                "LINKEDIN",
                "AGENCY",
                "JOB_BOARD",
                "DIRECT_APPLICATION",
                "OTHER"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name, email, or current employer",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "right_to_work_uk",
            "required": false,
            "in": "query",
            "description": "Filter by UK right to work status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "visa_required",
            "required": false,
            "in": "query",
            "description": "Filter by visa requirement",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of items to skip",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of candidates retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get list of candidates with filters",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/candidates/{id}": {
      "get": {
        "operationId": "CandidateController_getCandidateById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate retrieved successfully"
          },
          "404": {
            "description": "Candidate not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific candidate by ID",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/candidates/{candidateId}/applications": {
      "post": {
        "operationId": "CandidateController_submitApplication",
        "parameters": [
          {
            "name": "candidateId",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Application submitted successfully"
          },
          "400": {
            "description": "Application already exists or invalid data"
          },
          "404": {
            "description": "Candidate or job posting not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit a job application for a candidate",
        "tags": [
          "Recruitment - Candidates"
        ]
      },
      "get": {
        "operationId": "CandidateController_getCandidateApplications",
        "parameters": [
          {
            "name": "candidateId",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Applications retrieved successfully"
          },
          "404": {
            "description": "Candidate not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all applications for a candidate",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/candidates/{candidateId}/status": {
      "put": {
        "operationId": "CandidateController_updateCandidateStatus",
        "parameters": [
          {
            "name": "candidateId",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate status updated successfully"
          },
          "404": {
            "description": "Candidate not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update candidate status",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/candidates/{candidateId}/interviews": {
      "get": {
        "operationId": "CandidateController_getCandidateInterviews",
        "parameters": [
          {
            "name": "candidateId",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Interviews retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all interviews for a candidate",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/candidates/{candidateId}/offers": {
      "get": {
        "operationId": "CandidateController_getCandidateOffers",
        "parameters": [
          {
            "name": "candidateId",
            "required": true,
            "in": "path",
            "description": "Candidate ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offers retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all offers for a candidate",
        "tags": [
          "Recruitment - Candidates"
        ]
      }
    },
    "/recruitment/interviews": {
      "post": {
        "operationId": "InterviewController_scheduleInterview",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInterviewDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Interview scheduled successfully"
          },
          "400": {
            "description": "Invalid request data or interviewers not found"
          },
          "404": {
            "description": "Application not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Schedule a new interview",
        "tags": [
          "Recruitment - Interviews"
        ]
      },
      "get": {
        "operationId": "InterviewController_getInterviews",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by interview status",
            "schema": {
              "enum": [
                "SCHEDULED",
                "COMPLETED",
                "CANCELLED",
                "NO_SHOW",
                "RESCHEDULED"
              ],
              "type": "string"
            }
          },
          {
            "name": "date",
            "required": false,
            "in": "query",
            "description": "Filter by interview date (YYYY-MM-DD)",
            "schema": {
              "format": "date",
              "example": "2024-01-15",
              "type": "string"
            }
          },
          {
            "name": "interviewer_id",
            "required": false,
            "in": "query",
            "description": "Filter by interviewer ID",
            "schema": {
              "example": "uuid",
              "type": "string"
            }
          },
          {
            "name": "candidate_id",
            "required": false,
            "in": "query",
            "description": "Filter by candidate ID",
            "schema": {
              "example": "uuid",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Number of items to skip",
            "schema": {
              "example": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of interviews retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get list of interviews with filters",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/my-interviews": {
      "get": {
        "operationId": "InterviewController_getMyInterviews",
        "parameters": [
          {
            "name": "date",
            "required": false,
            "in": "query",
            "description": "Filter by interview date (YYYY-MM-DD)",
            "schema": {
              "format": "date",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by interview status",
            "schema": {
              "enum": [
                "SCHEDULED",
                "COMPLETED",
                "CANCELLED",
                "NO_SHOW",
                "RESCHEDULED"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of assigned interviews retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get interviews assigned to the current user",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/{id}/feedback": {
      "post": {
        "operationId": "InterviewController_submitFeedback",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Interview ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitInterviewFeedbackDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feedback submitted successfully"
          },
          "400": {
            "description": "Feedback already submitted or invalid data"
          },
          "403": {
            "description": "You are not assigned to this interview"
          },
          "404": {
            "description": "Interview not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit interview feedback",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/{id}/reschedule": {
      "put": {
        "operationId": "InterviewController_rescheduleInterview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Interview ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Interview rescheduled successfully"
          },
          "404": {
            "description": "Interview not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reschedule an interview",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/{id}/cancel": {
      "put": {
        "operationId": "InterviewController_cancelInterview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Interview ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Interview cancelled successfully"
          },
          "404": {
            "description": "Interview not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel an interview",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/upcoming": {
      "get": {
        "operationId": "InterviewController_getUpcomingInterviews",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of upcoming interviews retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get upcoming interviews for the next 7 days",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/interviews/feedback-pending": {
      "get": {
        "operationId": "InterviewController_getInterviewsPendingFeedback",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of interviews pending feedback retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get interviews pending feedback from current user",
        "tags": [
          "Recruitment - Interviews"
        ]
      }
    },
    "/recruitment/offers": {
      "post": {
        "operationId": "OfferController_createOffer",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOfferDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Offer created successfully"
          },
          "400": {
            "description": "Active offer already exists for this application"
          },
          "404": {
            "description": "Application not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new job offer",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/send": {
      "post": {
        "operationId": "OfferController_sendOffer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offer sent successfully"
          },
          "400": {
            "description": "Only draft offers can be sent"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send a draft offer to candidate",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/accept": {
      "post": {
        "operationId": "OfferController_acceptOffer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptOfferDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Offer accepted successfully"
          },
          "400": {
            "description": "Only sent offers can be accepted"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Accept a job offer",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/decline": {
      "post": {
        "operationId": "OfferController_declineOffer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeclineOfferDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Offer declined successfully"
          },
          "400": {
            "description": "Only sent offers can be declined"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Decline a job offer",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/withdraw": {
      "post": {
        "operationId": "OfferController_withdrawOffer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offer withdrawn successfully"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Withdraw a job offer",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/extend": {
      "put": {
        "operationId": "OfferController_extendOfferExpiry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offer expiry extended successfully"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Extend offer expiry date",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/{id}/negotiate": {
      "put": {
        "operationId": "OfferController_negotiateOffer",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Offer ID",
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offer updated successfully"
          },
          "404": {
            "description": "Offer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update offer terms during negotiation",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/pending": {
      "get": {
        "operationId": "OfferController_getPendingOffers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of pending offers retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all pending offers",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/recruitment/offers/expiring-soon": {
      "get": {
        "operationId": "OfferController_getExpiringOffers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of expiring offers retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get offers expiring in next 7 days",
        "tags": [
          "Recruitment - Offers"
        ]
      }
    },
    "/performance/reviews": {
      "post": {
        "operationId": "PerformanceReviewController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePerformanceReviewDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Performance review created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a performance review",
        "tags": [
          "Performance - Reviews"
        ]
      },
      "get": {
        "operationId": "PerformanceReviewController_findAll",
        "parameters": [
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycle_id",
            "required": false,
            "in": "query",
            "description": "Filter by cycle ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reviewer_id",
            "required": false,
            "in": "query",
            "description": "Filter by reviewer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "review_type",
            "required": false,
            "in": "query",
            "description": "Filter by review type",
            "schema": {
              "type": "string",
              "enum": [
                "SELF",
                "MANAGER",
                "PEER",
                "SUBORDINATE",
                "CUSTOMER"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "IN_PROGRESS",
                "SUBMITTED",
                "COMPLETED",
                "APPROVED"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by employee name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of performance reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all performance reviews with pagination",
        "tags": [
          "Performance - Reviews"
        ]
      }
    },
    "/performance/reviews/stats/cycle/{cycleId}": {
      "get": {
        "operationId": "PerformanceReviewController_getReviewStats",
        "parameters": [
          {
            "name": "cycleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalReviews": {
                      "type": "number"
                    },
                    "completedReviews": {
                      "type": "number"
                    },
                    "pendingReviews": {
                      "type": "number"
                    },
                    "averageRating": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get review statistics for a cycle",
        "tags": [
          "Performance - Reviews"
        ]
      }
    },
    "/performance/reviews/{id}": {
      "get": {
        "operationId": "PerformanceReviewController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance review details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get performance review by ID",
        "tags": [
          "Performance - Reviews"
        ]
      },
      "put": {
        "operationId": "PerformanceReviewController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePerformanceReviewDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance review updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update performance review",
        "tags": [
          "Performance - Reviews"
        ]
      },
      "delete": {
        "operationId": "PerformanceReviewController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Performance review deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete performance review",
        "tags": [
          "Performance - Reviews"
        ]
      }
    },
    "/performance/reviews/{id}/responses": {
      "post": {
        "operationId": "PerformanceReviewController_submitResponses",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitReviewResponsesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review responses submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit review responses",
        "tags": [
          "Performance - Reviews"
        ]
      }
    },
    "/performance/reviews/{id}/submit": {
      "put": {
        "operationId": "PerformanceReviewController_submitReview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmitReviewDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance review submitted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Submit performance review for approval",
        "tags": [
          "Performance - Reviews"
        ]
      }
    },
    "/performance/reviews/{id}/approve": {
      "put": {
        "operationId": "PerformanceReviewController_approveReview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveReviewDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance review approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve performance review",
        "tags": [
          "Performance - Reviews"
        ]
      }
    },
    "/performance/reviews/{id}/reject": {
      "put": {
        "operationId": "PerformanceReviewController_rejectReview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectReviewDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance review rejected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reject performance review",
        "tags": [
          "Performance - Reviews"
        ]
      }
    },
    "/performance/reviews/{reviewId}/responses": {
      "get": {
        "operationId": "PerformanceReviewController_getReviewResponses",
        "parameters": [
          {
            "name": "reviewId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "review_id",
            "required": false,
            "in": "query",
            "description": "Filter by review ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "section_name",
            "required": false,
            "in": "query",
            "description": "Filter by section name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "response_type",
            "required": false,
            "in": "query",
            "description": "Filter by response type",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review responses retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReviewResponsesDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get review responses with pagination",
        "tags": [
          "Performance - Reviews"
        ]
      }
    },
    "/performance/reviews/responses/{responseId}": {
      "get": {
        "operationId": "PerformanceReviewController_getReviewResponse",
        "parameters": [
          {
            "name": "responseId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review response retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseItemDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get single review response by ID",
        "tags": [
          "Performance - Reviews"
        ]
      },
      "put": {
        "operationId": "PerformanceReviewController_updateReviewResponse",
        "parameters": [
          {
            "name": "responseId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewResponseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review response updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceReviewResponseItemDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update review response",
        "tags": [
          "Performance - Reviews"
        ]
      },
      "delete": {
        "operationId": "PerformanceReviewController_removeReviewResponse",
        "parameters": [
          {
            "name": "responseId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Review response deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete review response",
        "tags": [
          "Performance - Reviews"
        ]
      }
    },
    "/performance/reviews/{reviewId}/responses/stats": {
      "get": {
        "operationId": "PerformanceReviewController_getResponseStats",
        "parameters": [
          {
            "name": "reviewId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Response statistics retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get response statistics for a review",
        "tags": [
          "Performance - Reviews"
        ]
      }
    },
    "/performance/goals": {
      "post": {
        "operationId": "PerformanceGoalController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePerformanceGoalDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Performance goal created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a performance goal",
        "tags": [
          "Performance - Goals"
        ]
      },
      "get": {
        "operationId": "PerformanceGoalController_findAll",
        "parameters": [
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycle_id",
            "required": false,
            "in": "query",
            "description": "Filter by cycle ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "goal_category",
            "required": false,
            "in": "query",
            "description": "Filter by goal category",
            "schema": {
              "type": "string",
              "enum": [
                "STRATEGIC",
                "OPERATIONAL",
                "PERSONAL_DEVELOPMENT",
                "BEHAVIORAL"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "ACTIVE",
                "IN_PROGRESS",
                "COMPLETED",
                "CANCELLED",
                "OVERDUE"
              ]
            }
          },
          {
            "name": "priority",
            "required": false,
            "in": "query",
            "description": "Filter by priority",
            "schema": {
              "type": "string",
              "enum": [
                "HIGH",
                "MEDIUM",
                "LOW"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by title or description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of performance goals",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPerformanceGoalResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all performance goals with pagination",
        "tags": [
          "Performance - Goals"
        ]
      }
    },
    "/performance/goals/stats/{employeeId}/{cycleId}": {
      "get": {
        "operationId": "PerformanceGoalController_getGoalStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Goal statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalGoals": {
                      "type": "number"
                    },
                    "completedGoals": {
                      "type": "number"
                    },
                    "inProgressGoals": {
                      "type": "number"
                    },
                    "averageProgress": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get goal statistics for an employee in a cycle",
        "tags": [
          "Performance - Goals"
        ]
      }
    },
    "/performance/goals/{id}": {
      "get": {
        "operationId": "PerformanceGoalController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance goal details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get performance goal by ID",
        "tags": [
          "Performance - Goals"
        ]
      },
      "put": {
        "operationId": "PerformanceGoalController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePerformanceGoalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance goal updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update performance goal",
        "tags": [
          "Performance - Goals"
        ]
      },
      "delete": {
        "operationId": "PerformanceGoalController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Performance goal deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete performance goal",
        "tags": [
          "Performance - Goals"
        ]
      }
    },
    "/performance/goals/{id}/progress": {
      "put": {
        "operationId": "PerformanceGoalController_updateProgress",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoalUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Goal progress updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update goal progress",
        "tags": [
          "Performance - Goals"
        ]
      }
    },
    "/performance/goals/{id}/approve": {
      "put": {
        "operationId": "PerformanceGoalController_approveGoal",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveGoalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance goal approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve performance goal",
        "tags": [
          "Performance - Goals"
        ]
      }
    },
    "/performance/goals/{id}/complete": {
      "put": {
        "operationId": "PerformanceGoalController_completeGoal",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteGoalDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance goal completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceGoalResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Mark goal as completed",
        "tags": [
          "Performance - Goals"
        ]
      }
    },
    "/performance/cycles": {
      "post": {
        "operationId": "PerformanceCycleController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePerformanceCycleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Performance cycle created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a performance cycle",
        "tags": [
          "Performance - Cycles"
        ]
      },
      "get": {
        "operationId": "PerformanceCycleController_findAll",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "PLANNING",
                "ACTIVE",
                "REVIEW_PERIOD",
                "CALIBRATION",
                "COMPLETED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "cycle_type",
            "required": false,
            "in": "query",
            "description": "Filter by cycle type",
            "schema": {
              "type": "string",
              "enum": [
                "ANNUAL",
                "SEMI_ANNUAL",
                "QUARTERLY",
                "MONTHLY"
              ]
            }
          },
          {
            "name": "year",
            "required": false,
            "in": "query",
            "description": "Filter by year",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of performance cycles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all performance cycles with pagination",
        "tags": [
          "Performance - Cycles"
        ]
      }
    },
    "/performance/cycles/current": {
      "get": {
        "operationId": "PerformanceCycleController_getCurrentCycle",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current active cycle",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current active cycle",
        "tags": [
          "Performance - Cycles"
        ]
      }
    },
    "/performance/cycles/{id}": {
      "get": {
        "operationId": "PerformanceCycleController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance cycle details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get performance cycle by ID",
        "tags": [
          "Performance - Cycles"
        ]
      },
      "put": {
        "operationId": "PerformanceCycleController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePerformanceCycleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance cycle updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update performance cycle",
        "tags": [
          "Performance - Cycles"
        ]
      },
      "delete": {
        "operationId": "PerformanceCycleController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Performance cycle deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete performance cycle",
        "tags": [
          "Performance - Cycles"
        ]
      }
    },
    "/performance/cycles/{id}/activate": {
      "put": {
        "operationId": "PerformanceCycleController_activateCycle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateCycleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance cycle activated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Activate performance cycle",
        "tags": [
          "Performance - Cycles"
        ]
      }
    },
    "/performance/cycles/{id}/complete": {
      "put": {
        "operationId": "PerformanceCycleController_completeCycle",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteCycleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance cycle completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceCycleResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Complete performance cycle",
        "tags": [
          "Performance - Cycles"
        ]
      }
    },
    "/performance/continuous-feedback": {
      "post": {
        "operationId": "ContinuousFeedbackController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContinuousFeedbackDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Continuous feedback created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContinuousFeedbackResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create continuous feedback",
        "tags": [
          "Performance - Continuous Feedback"
        ]
      },
      "get": {
        "operationId": "ContinuousFeedbackController_findAll",
        "parameters": [
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feedback_giver_id",
            "required": false,
            "in": "query",
            "description": "Filter by feedback giver ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feedback_type",
            "required": false,
            "in": "query",
            "description": "Filter by feedback type",
            "schema": {
              "type": "string",
              "enum": [
                "PRAISE",
                "CONSTRUCTIVE",
                "COACHING",
                "GOAL_PROGRESS"
              ]
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "required": false,
            "in": "query",
            "description": "Filter by visibility",
            "schema": {
              "type": "string",
              "enum": [
                "PRIVATE",
                "MANAGER",
                "TEAM",
                "PUBLIC"
              ]
            }
          },
          {
            "name": "is_anonymous",
            "required": false,
            "in": "query",
            "description": "Filter by anonymous status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in title and content",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of continuous feedback",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedContinuousFeedbackResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all continuous feedback with pagination",
        "tags": [
          "Performance - Continuous Feedback"
        ]
      }
    },
    "/performance/continuous-feedback/stats/{employeeId}": {
      "get": {
        "operationId": "ContinuousFeedbackController_getFeedbackStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feedback statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalFeedback": {
                      "type": "number"
                    },
                    "recognitionCount": {
                      "type": "number"
                    },
                    "constructiveCount": {
                      "type": "number"
                    },
                    "acknowledgedCount": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get feedback statistics for an employee",
        "tags": [
          "Performance - Continuous Feedback"
        ]
      }
    },
    "/performance/continuous-feedback/{id}": {
      "get": {
        "operationId": "ContinuousFeedbackController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Continuous feedback details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContinuousFeedbackResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get continuous feedback by ID",
        "tags": [
          "Performance - Continuous Feedback"
        ]
      },
      "put": {
        "operationId": "ContinuousFeedbackController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContinuousFeedbackDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Continuous feedback updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContinuousFeedbackResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update continuous feedback",
        "tags": [
          "Performance - Continuous Feedback"
        ]
      },
      "delete": {
        "operationId": "ContinuousFeedbackController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Continuous feedback deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete continuous feedback",
        "tags": [
          "Performance - Continuous Feedback"
        ]
      }
    },
    "/performance/continuous-feedback/{id}/acknowledge": {
      "put": {
        "operationId": "ContinuousFeedbackController_acknowledgeFeedback",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcknowledgeFeedbackDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback acknowledged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContinuousFeedbackResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Acknowledge feedback",
        "tags": [
          "Performance - Continuous Feedback"
        ]
      }
    },
    "/performance/continuous-feedback/{id}/respond": {
      "put": {
        "operationId": "ContinuousFeedbackController_respondToFeedback",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RespondToFeedbackDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContinuousFeedbackResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Respond to feedback (manager)",
        "tags": [
          "Performance - Continuous Feedback"
        ]
      }
    },
    "/performance/feedback-360": {
      "post": {
        "operationId": "Feedback360Controller_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeedback360Dto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "360 feedback created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feedback360ResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create 360 feedback",
        "tags": [
          "Performance - 360 Feedback"
        ]
      },
      "get": {
        "operationId": "Feedback360Controller_findAll",
        "parameters": [
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycle_id",
            "required": false,
            "in": "query",
            "description": "Filter by cycle ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "SETUP",
                "NOMINATION",
                "FEEDBACK_COLLECTION",
                "COMPLETED"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in feedback round name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of 360 feedback",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFeedback360ResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all 360 feedback with pagination",
        "tags": [
          "Performance - 360 Feedback"
        ]
      }
    },
    "/performance/feedback-360/{employeeId}/stats/{cycleId}": {
      "get": {
        "operationId": "Feedback360Controller_getFeedbackStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feedback statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalNominees": {
                      "type": "number"
                    },
                    "feedbackReceived": {
                      "type": "number"
                    },
                    "completionRate": {
                      "type": "number"
                    },
                    "averageScore": {
                      "type": "number",
                      "nullable": true
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get feedback statistics for an employee",
        "tags": [
          "Performance - 360 Feedback"
        ]
      }
    },
    "/performance/feedback-360/{id}": {
      "get": {
        "operationId": "Feedback360Controller_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "360 feedback details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feedback360ResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get 360 feedback by ID",
        "tags": [
          "Performance - 360 Feedback"
        ]
      },
      "put": {
        "operationId": "Feedback360Controller_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeedback360Dto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "360 feedback updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feedback360ResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update 360 feedback",
        "tags": [
          "Performance - 360 Feedback"
        ]
      },
      "delete": {
        "operationId": "Feedback360Controller_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "360 feedback deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete 360 feedback",
        "tags": [
          "Performance - 360 Feedback"
        ]
      }
    },
    "/performance/feedback-360/{id}/nominees": {
      "put": {
        "operationId": "Feedback360Controller_addNominees",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNomineesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Nominees added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feedback360ResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add nominees to 360 feedback",
        "tags": [
          "Performance - 360 Feedback"
        ]
      }
    },
    "/performance/feedback-360/{id}/status": {
      "put": {
        "operationId": "Feedback360Controller_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeedbackStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feedback360ResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update feedback status",
        "tags": [
          "Performance - 360 Feedback"
        ]
      }
    },
    "/performance/improvement-plan": {
      "post": {
        "operationId": "PerformanceImprovementPlanController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePerformanceImprovementPlanDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Performance improvement plan created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create performance improvement plan",
        "tags": [
          "Performance - Improvement Plans"
        ]
      },
      "get": {
        "operationId": "PerformanceImprovementPlanController_findAll",
        "parameters": [
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "manager_id",
            "required": false,
            "in": "query",
            "description": "Filter by manager ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "COMPLETED",
                "EXTENDED",
                "TERMINATED"
              ]
            }
          },
          {
            "name": "outcome",
            "required": false,
            "in": "query",
            "description": "Filter by outcome",
            "schema": {
              "type": "string",
              "enum": [
                "SUCCESSFUL",
                "PARTIALLY_SUCCESSFUL",
                "UNSUCCESSFUL"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in performance issues",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of performance improvement plans",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all performance improvement plans with pagination",
        "tags": [
          "Performance - Improvement Plans"
        ]
      }
    },
    "/performance/improvement-plan/{employeeId}/stats": {
      "get": {
        "operationId": "PerformanceImprovementPlanController_getPIPStats",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PIP statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalPIPs": {
                      "type": "number"
                    },
                    "activePIPs": {
                      "type": "number"
                    },
                    "successfulPIPs": {
                      "type": "number"
                    },
                    "unsuccessfulPIPs": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get PIP statistics for an employee",
        "tags": [
          "Performance - Improvement Plans"
        ]
      }
    },
    "/performance/improvement-plan/{id}": {
      "get": {
        "operationId": "PerformanceImprovementPlanController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance improvement plan details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get performance improvement plan by ID",
        "tags": [
          "Performance - Improvement Plans"
        ]
      },
      "put": {
        "operationId": "PerformanceImprovementPlanController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePerformanceImprovementPlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Performance improvement plan updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update performance improvement plan",
        "tags": [
          "Performance - Improvement Plans"
        ]
      },
      "delete": {
        "operationId": "PerformanceImprovementPlanController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Performance improvement plan deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete performance improvement plan",
        "tags": [
          "Performance - Improvement Plans"
        ]
      }
    },
    "/performance/improvement-plan/{id}/acknowledge": {
      "put": {
        "operationId": "PerformanceImprovementPlanController_acknowledgePIP",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcknowledgePIPDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "PIP acknowledged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Acknowledge PIP by employee",
        "tags": [
          "Performance - Improvement Plans"
        ]
      }
    },
    "/performance/improvement-plan/{id}/status": {
      "put": {
        "operationId": "PerformanceImprovementPlanController_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePIPStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update PIP status",
        "tags": [
          "Performance - Improvement Plans"
        ]
      }
    },
    "/performance/improvement-plan/{id}/progress": {
      "put": {
        "operationId": "PerformanceImprovementPlanController_addProgress",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddPIPProgressDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Progress added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add progress update to PIP",
        "tags": [
          "Performance - Improvement Plans"
        ]
      }
    },
    "/performance/review-templates": {
      "post": {
        "operationId": "ReviewTemplateController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review template created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create review template",
        "tags": [
          "Performance - Review Templates"
        ]
      },
      "get": {
        "operationId": "ReviewTemplateController_findAll",
        "parameters": [
          {
            "name": "template_type",
            "required": false,
            "in": "query",
            "description": "Filter by template type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of review templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReviewTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all review templates with pagination",
        "tags": [
          "Performance - Review Templates"
        ]
      }
    },
    "/performance/review-templates/by-type/{templateType}": {
      "get": {
        "operationId": "ReviewTemplateController_getByType",
        "parameters": [
          {
            "name": "templateType",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of active templates for the specified type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReviewTemplateResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get active templates by type",
        "tags": [
          "Performance - Review Templates"
        ]
      }
    },
    "/performance/review-templates/{id}": {
      "get": {
        "operationId": "ReviewTemplateController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review template details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get review template by ID",
        "tags": [
          "Performance - Review Templates"
        ]
      },
      "put": {
        "operationId": "ReviewTemplateController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review template updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update review template",
        "tags": [
          "Performance - Review Templates"
        ]
      },
      "delete": {
        "operationId": "ReviewTemplateController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Review template deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete review template",
        "tags": [
          "Performance - Review Templates"
        ]
      }
    },
    "/performance/review-templates/{id}/clone": {
      "post": {
        "operationId": "ReviewTemplateController_cloneTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloneTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Template cloned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clone an existing template",
        "tags": [
          "Performance - Review Templates"
        ]
      }
    },
    "/performance/review-templates/{id}/toggle-active": {
      "put": {
        "operationId": "ReviewTemplateController_toggleActive",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template status toggled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Toggle template active status",
        "tags": [
          "Performance - Review Templates"
        ]
      }
    },
    "/performance/development-plans": {
      "post": {
        "operationId": "DevelopmentPlanController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDevelopmentPlanDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Development plan created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevelopmentPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new development plan",
        "tags": [
          "Performance - Development Plans"
        ]
      },
      "get": {
        "operationId": "DevelopmentPlanController_findAll",
        "parameters": [
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "description": "Filter by employee ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cycle_id",
            "required": false,
            "in": "query",
            "description": "Filter by cycle ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "ACTIVE",
                "COMPLETED",
                "ON_HOLD"
              ]
            }
          },
          {
            "name": "manager_approval",
            "required": false,
            "in": "query",
            "description": "Filter by manager approval status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "employee_commitment",
            "required": false,
            "in": "query",
            "description": "Filter by employee commitment status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by plan name or employee name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Development plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDevelopmentPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get development plans with pagination",
        "tags": [
          "Performance - Development Plans"
        ]
      }
    },
    "/performance/development-plans/{id}": {
      "get": {
        "operationId": "DevelopmentPlanController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Development plan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevelopmentPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get development plan by ID",
        "tags": [
          "Performance - Development Plans"
        ]
      },
      "put": {
        "operationId": "DevelopmentPlanController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDevelopmentPlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Development plan updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevelopmentPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update development plan",
        "tags": [
          "Performance - Development Plans"
        ]
      },
      "delete": {
        "operationId": "DevelopmentPlanController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Development plan deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete development plan",
        "tags": [
          "Performance - Development Plans"
        ]
      }
    },
    "/performance/development-plans/{id}/approve": {
      "post": {
        "operationId": "DevelopmentPlanController_approve",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApprovePlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Development plan approved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevelopmentPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Approve development plan",
        "tags": [
          "Performance - Development Plans"
        ]
      }
    },
    "/performance/development-plans/{id}/reject": {
      "post": {
        "operationId": "DevelopmentPlanController_reject",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RejectPlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Development plan rejected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevelopmentPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reject development plan",
        "tags": [
          "Performance - Development Plans"
        ]
      }
    },
    "/performance/development-plans/{id}/commit": {
      "post": {
        "operationId": "DevelopmentPlanController_commit",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitToPlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee committed to development plan successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevelopmentPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Employee commits to development plan",
        "tags": [
          "Performance - Development Plans"
        ]
      }
    },
    "/performance/development-plans/{id}/review": {
      "post": {
        "operationId": "DevelopmentPlanController_review",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewPlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Development plan reviewed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevelopmentPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Review and update development plan progress",
        "tags": [
          "Performance - Development Plans"
        ]
      }
    },
    "/performance/development-plans/{id}/complete": {
      "post": {
        "operationId": "DevelopmentPlanController_complete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Development plan completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevelopmentPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Complete development plan",
        "tags": [
          "Performance - Development Plans"
        ]
      }
    },
    "/performance/development-plans/{id}/hold": {
      "post": {
        "operationId": "DevelopmentPlanController_hold",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Development plan put on hold successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevelopmentPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Put development plan on hold",
        "tags": [
          "Performance - Development Plans"
        ]
      }
    },
    "/performance/development-plans/{id}/reactivate": {
      "post": {
        "operationId": "DevelopmentPlanController_reactivate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Development plan reactivated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DevelopmentPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reactivate development plan from hold",
        "tags": [
          "Performance - Development Plans"
        ]
      }
    },
    "/performance/development-plans/cycle/{cycleId}/stats": {
      "get": {
        "operationId": "DevelopmentPlanController_getStats",
        "parameters": [
          {
            "name": "cycleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Development plan statistics retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get development plan statistics for a cycle",
        "tags": [
          "Performance - Development Plans"
        ]
      }
    },
    "/performance/calibration-sessions": {
      "post": {
        "operationId": "CalibrationSessionController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCalibrationSessionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Calibration session created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalibrationSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new calibration session",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      },
      "get": {
        "operationId": "CalibrationSessionController_findAll",
        "parameters": [
          {
            "name": "cycle_id",
            "required": false,
            "in": "query",
            "description": "Filter by cycle ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "department_id",
            "required": false,
            "in": "query",
            "description": "Filter by department ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "facilitator_id",
            "required": false,
            "in": "query",
            "description": "Filter by facilitator ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "type": "string",
              "enum": [
                "PLANNED",
                "IN_PROGRESS",
                "COMPLETED"
              ]
            }
          },
          {
            "name": "date_from",
            "required": false,
            "in": "query",
            "description": "Filter by session date (from)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date_to",
            "required": false,
            "in": "query",
            "description": "Filter by session date (to)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by session name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration sessions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCalibrationSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get calibration sessions with pagination",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      }
    },
    "/performance/calibration-sessions/{id}": {
      "get": {
        "operationId": "CalibrationSessionController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Calibration session retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalibrationSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get calibration session by ID",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      },
      "put": {
        "operationId": "CalibrationSessionController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCalibrationSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Calibration session updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalibrationSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update calibration session",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      },
      "delete": {
        "operationId": "CalibrationSessionController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Calibration session deleted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete calibration session",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      }
    },
    "/performance/calibration-sessions/{id}/start": {
      "post": {
        "operationId": "CalibrationSessionController_start",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Calibration session started successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalibrationSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Start calibration session",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      }
    },
    "/performance/calibration-sessions/{id}/complete": {
      "post": {
        "operationId": "CalibrationSessionController_complete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Calibration session completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalibrationSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Complete calibration session",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      }
    },
    "/performance/calibration-sessions/{id}/participants": {
      "post": {
        "operationId": "CalibrationSessionController_addParticipant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddParticipantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Participant added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalibrationSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add participant to calibration session",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      },
      "delete": {
        "operationId": "CalibrationSessionController_removeParticipant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveParticipantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Participant removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalibrationSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove participant from calibration session",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      }
    },
    "/performance/calibration-sessions/{id}/employees": {
      "post": {
        "operationId": "CalibrationSessionController_addEmployeeToDiscussion",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddEmployeeToDiscussionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee added to discussion successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalibrationSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add employee to discussion list",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      }
    },
    "/performance/calibration-sessions/{id}/employees/{employeeId}": {
      "put": {
        "operationId": "CalibrationSessionController_updateEmployeeDiscussion",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeDiscussionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Employee discussion updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalibrationSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update employee discussion details",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      }
    },
    "/performance/calibration-sessions/{id}/summary": {
      "get": {
        "operationId": "CalibrationSessionController_getSummary",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session summary retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionSummaryDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get calibration session summary",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      }
    },
    "/performance/calibration-sessions/cycle/{cycleId}/stats": {
      "get": {
        "operationId": "CalibrationSessionController_getStats",
        "parameters": [
          {
            "name": "cycleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session statistics retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get calibration session statistics for a cycle",
        "tags": [
          "Performance - Calibration Sessions"
        ]
      }
    },
    "/training/skills/categories": {
      "post": {
        "operationId": "SkillController_createCategory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSkillCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillCategoryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create skill category",
        "tags": [
          "Training - Skills"
        ]
      },
      "get": {
        "operationId": "SkillController_getCategories",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "parent_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-parent-category",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "Technical",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSkillCategoryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all skill categories",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/skills/categories/tree": {
      "get": {
        "operationId": "SkillController_getCategoryTree",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SkillCategoryResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get skill category tree",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/skills/categories/{id}": {
      "get": {
        "operationId": "SkillController_getCategory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillCategoryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get skill category by ID",
        "tags": [
          "Training - Skills"
        ]
      },
      "put": {
        "operationId": "SkillController_updateCategory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSkillCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillCategoryResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update skill category",
        "tags": [
          "Training - Skills"
        ]
      },
      "delete": {
        "operationId": "SkillController_deleteCategory",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete skill category",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/skills": {
      "post": {
        "operationId": "SkillController_createSkill",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSkillDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create skill",
        "tags": [
          "Training - Skills"
        ]
      },
      "get": {
        "operationId": "SkillController_getSkills",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "category_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-category",
              "type": "string"
            }
          },
          {
            "name": "skill_type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "TECHNICAL",
              "type": "string",
              "enum": [
                "TECHNICAL",
                "SOFT",
                "LEADERSHIP",
                "FUNCTIONAL",
                "COMPLIANCE"
              ]
            }
          },
          {
            "name": "market_demand",
            "required": false,
            "in": "query",
            "schema": {
              "example": "HIGH",
              "type": "string",
              "enum": [
                "HIGH",
                "MEDIUM",
                "LOW"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "TypeScript",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSkillResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all skills",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/skills/high-demand": {
      "get": {
        "operationId": "SkillController_getHighDemandSkills",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SkillResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get high demand skills",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/skills/{id}": {
      "get": {
        "operationId": "SkillController_getSkill",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get skill by ID",
        "tags": [
          "Training - Skills"
        ]
      },
      "put": {
        "operationId": "SkillController_updateSkill",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSkillDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update skill",
        "tags": [
          "Training - Skills"
        ]
      },
      "delete": {
        "operationId": "SkillController_deleteSkill",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete skill",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/skills/category/{categoryId}": {
      "get": {
        "operationId": "SkillController_getSkillsByCategory",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SkillResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get skills by category",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/skills/employee": {
      "post": {
        "operationId": "SkillController_assignSkillToEmployee",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmployeeSkillDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeSkillResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Assign skill to employee",
        "tags": [
          "Training - Skills"
        ]
      },
      "get": {
        "operationId": "SkillController_getEmployeeSkills",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "employee_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-employee",
              "type": "string"
            }
          },
          {
            "name": "skill_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-skill",
              "type": "string"
            }
          },
          {
            "name": "current_level",
            "required": false,
            "in": "query",
            "schema": {
              "example": "COMPETENT",
              "type": "string",
              "enum": [
                "BEGINNER",
                "DEVELOPING",
                "COMPETENT",
                "PROFICIENT",
                "EXPERT"
              ]
            }
          },
          {
            "name": "target_level",
            "required": false,
            "in": "query",
            "schema": {
              "example": "EXPERT",
              "type": "string",
              "enum": [
                "BEGINNER",
                "DEVELOPING",
                "COMPETENT",
                "PROFICIENT",
                "EXPERT"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "TypeScript",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEmployeeSkillResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all employee skills",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/skills/employee/{employeeId}/matrix": {
      "get": {
        "operationId": "SkillController_getEmployeeSkillMatrix",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeSkillMatrixDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get employee skill matrix",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/skills/employee/{employeeId}/gap-analysis": {
      "get": {
        "operationId": "SkillController_getSkillGapAnalysis",
        "parameters": [
          {
            "name": "employeeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get employee skill gap analysis",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/skills/employee-skill/{id}": {
      "get": {
        "operationId": "SkillController_getEmployeeSkill",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeSkillResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get employee skill by ID",
        "tags": [
          "Training - Skills"
        ]
      },
      "put": {
        "operationId": "SkillController_updateEmployeeSkill",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmployeeSkillDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeSkillResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update employee skill",
        "tags": [
          "Training - Skills"
        ]
      },
      "delete": {
        "operationId": "SkillController_removeEmployeeSkill",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove skill from employee",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/skills/employee-skill/{id}/assess": {
      "post": {
        "operationId": "SkillController_assessEmployeeSkill",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmployeeSkillAssessmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmployeeSkillResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Assess employee skill",
        "tags": [
          "Training - Skills"
        ]
      }
    },
    "/training/courses": {
      "post": {
        "operationId": "CourseController_createCourse",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create training course",
        "tags": [
          "Training - Courses"
        ]
      },
      "get": {
        "operationId": "CourseController_getCourses",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "course_type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "INTERNAL",
              "type": "string",
              "enum": [
                "INTERNAL",
                "EXTERNAL",
                "ONLINE",
                "VENDOR"
              ]
            }
          },
          {
            "name": "delivery_method",
            "required": false,
            "in": "query",
            "schema": {
              "example": "ONLINE",
              "type": "string",
              "enum": [
                "CLASSROOM",
                "ONLINE",
                "BLENDED",
                "SELF_PACED",
                "ON_THE_JOB"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "example": "ACTIVE",
              "type": "string",
              "enum": [
                "DRAFT",
                "ACTIVE",
                "PAUSED",
                "RETIRED",
                "ARCHIVED"
              ]
            }
          },
          {
            "name": "certificate_awarded",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "TypeScript",
              "type": "string"
            }
          },
          {
            "name": "skill_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-skill",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedCourseResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all training courses",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/catalog": {
      "get": {
        "operationId": "CourseController_getCourseCatalog",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseCatalogDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get course catalog",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/{id}": {
      "get": {
        "operationId": "CourseController_getCourse",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get course by ID",
        "tags": [
          "Training - Courses"
        ]
      },
      "put": {
        "operationId": "CourseController_updateCourse",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCourseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update training course",
        "tags": [
          "Training - Courses"
        ]
      },
      "delete": {
        "operationId": "CourseController_deleteCourse",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete training course",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/{id}/status": {
      "patch": {
        "operationId": "CourseController_updateCourseStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update course status",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/{id}/duplicate": {
      "post": {
        "operationId": "CourseController_duplicateCourse",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourseResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Duplicate a course",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/skill/{skillId}": {
      "get": {
        "operationId": "CourseController_getCoursesBySkill",
        "parameters": [
          {
            "name": "skillId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourseResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get courses by skill",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/sessions": {
      "post": {
        "operationId": "CourseController_createSession",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSessionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create training session",
        "tags": [
          "Training - Courses"
        ]
      },
      "get": {
        "operationId": "CourseController_getSessions",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "course_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-course",
              "type": "string"
            }
          },
          {
            "name": "instructor_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-instructor",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "example": "SCHEDULED",
              "type": "string",
              "enum": [
                "SCHEDULED",
                "IN_PROGRESS",
                "COMPLETED",
                "CANCELLED",
                "POSTPONED"
              ]
            }
          },
          {
            "name": "start_date_from",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "start_date_to",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "TypeScript",
              "type": "string"
            }
          },
          {
            "name": "available_only",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all training sessions",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/sessions/upcoming": {
      "get": {
        "operationId": "CourseController_getUpcomingSessions",
        "parameters": [
          {
            "name": "courseId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get upcoming sessions",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/sessions/{id}": {
      "get": {
        "operationId": "CourseController_getSession",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get session by ID",
        "tags": [
          "Training - Courses"
        ]
      },
      "put": {
        "operationId": "CourseController_updateSession",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSessionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update training session",
        "tags": [
          "Training - Courses"
        ]
      },
      "delete": {
        "operationId": "CourseController_deleteSession",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete training session",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/sessions/{id}/availability": {
      "get": {
        "operationId": "CourseController_getSessionAvailability",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionAvailabilityDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get session availability",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/sessions/{id}/status": {
      "patch": {
        "operationId": "CourseController_updateSessionStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update session status",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/instructor/{instructorId}/sessions": {
      "get": {
        "operationId": "CourseController_getInstructorSessions",
        "parameters": [
          {
            "name": "instructorId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get sessions by instructor",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/courses/{id}/sessions": {
      "get": {
        "operationId": "CourseController_getCourseSessions",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "course_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-course",
              "type": "string"
            }
          },
          {
            "name": "instructor_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-instructor",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "example": "SCHEDULED",
              "type": "string",
              "enum": [
                "SCHEDULED",
                "IN_PROGRESS",
                "COMPLETED",
                "CANCELLED",
                "POSTPONED"
              ]
            }
          },
          {
            "name": "start_date_from",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "start_date_to",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "TypeScript",
              "type": "string"
            }
          },
          {
            "name": "available_only",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSessionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get sessions for a specific course",
        "tags": [
          "Training - Courses"
        ]
      }
    },
    "/training/tenant-learning-content": {
      "post": {
        "operationId": "TenantLearningContentController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantLearningContentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create tenant learning content",
        "tags": [
          "Training - Tenant Learning Content"
        ]
      },
      "get": {
        "operationId": "TenantLearningContentController_findAll",
        "parameters": [
          {
            "name": "template_id",
            "required": false,
            "in": "query",
            "description": "Filter by template ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "content_type",
            "required": false,
            "in": "query",
            "description": "Filter by content type",
            "schema": {
              "type": "string",
              "enum": [
                "VIDEO",
                "DOCUMENT",
                "PRESENTATION",
                "INTERACTIVE",
                "ASSESSMENT",
                "WEBINAR",
                "COURSE"
              ]
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Filter by category",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "learning_level",
            "required": false,
            "in": "query",
            "description": "Filter by learning level",
            "schema": {
              "type": "string",
              "enum": [
                "BEGINNER",
                "INTERMEDIATE",
                "ADVANCED",
                "EXPERT"
              ]
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "compliance_requirement",
            "required": false,
            "in": "query",
            "description": "Filter by compliance requirement",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in title and description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTenantLearningContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all tenant learning contents",
        "tags": [
          "Training - Tenant Learning Content"
        ]
      }
    },
    "/training/tenant-learning-content/category/{category}": {
      "get": {
        "operationId": "TenantLearningContentController_getByCategory",
        "parameters": [
          {
            "name": "category",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantLearningContentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get contents by category",
        "tags": [
          "Training - Tenant Learning Content"
        ]
      }
    },
    "/training/tenant-learning-content/mandatory/{role}": {
      "get": {
        "operationId": "TenantLearningContentController_getMandatoryForRole",
        "parameters": [
          {
            "name": "role",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantLearningContentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get mandatory contents for role",
        "tags": [
          "Training - Tenant Learning Content"
        ]
      }
    },
    "/training/tenant-learning-content/compliance": {
      "get": {
        "operationId": "TenantLearningContentController_getComplianceContents",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantLearningContentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get compliance required contents",
        "tags": [
          "Training - Tenant Learning Content"
        ]
      }
    },
    "/training/tenant-learning-content/{id}": {
      "get": {
        "operationId": "TenantLearningContentController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get tenant learning content by ID",
        "tags": [
          "Training - Tenant Learning Content"
        ]
      },
      "put": {
        "operationId": "TenantLearningContentController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantLearningContentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update tenant learning content",
        "tags": [
          "Training - Tenant Learning Content"
        ]
      },
      "delete": {
        "operationId": "TenantLearningContentController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete tenant learning content",
        "tags": [
          "Training - Tenant Learning Content"
        ]
      }
    },
    "/training/tenant-learning-content/{id}/clone": {
      "post": {
        "operationId": "TenantLearningContentController_clone",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CloneContentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clone tenant learning content",
        "tags": [
          "Training - Tenant Learning Content"
        ]
      }
    },
    "/training/tenant-learning-content/{id}/activate": {
      "patch": {
        "operationId": "TenantLearningContentController_activate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Activate tenant learning content",
        "tags": [
          "Training - Tenant Learning Content"
        ]
      }
    },
    "/training/tenant-learning-content/{id}/deactivate": {
      "patch": {
        "operationId": "TenantLearningContentController_deactivate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningContentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deactivate tenant learning content",
        "tags": [
          "Training - Tenant Learning Content"
        ]
      }
    },
    "/training/tenant-learning-path": {
      "post": {
        "operationId": "TenantLearningPathController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantLearningPathDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningPathResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create tenant learning path",
        "tags": [
          "Training - Tenant Learning Path"
        ]
      },
      "get": {
        "operationId": "TenantLearningPathController_findAll",
        "parameters": [
          {
            "name": "template_id",
            "required": false,
            "in": "query",
            "description": "Filter by template ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "path_type",
            "required": false,
            "in": "query",
            "description": "Filter by path type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mandatory",
            "required": false,
            "in": "query",
            "description": "Filter by mandatory status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "certification_available",
            "required": false,
            "in": "query",
            "description": "Filter by certification availability",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in title and description",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTenantLearningPathResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all tenant learning paths",
        "tags": [
          "Training - Tenant Learning Path"
        ]
      }
    },
    "/training/tenant-learning-path/mandatory": {
      "get": {
        "operationId": "TenantLearningPathController_getMandatoryPaths",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantLearningPathResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get mandatory learning paths",
        "tags": [
          "Training - Tenant Learning Path"
        ]
      }
    },
    "/training/tenant-learning-path/type/{pathType}": {
      "get": {
        "operationId": "TenantLearningPathController_getPathsByType",
        "parameters": [
          {
            "name": "pathType",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantLearningPathResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get learning paths by type",
        "tags": [
          "Training - Tenant Learning Path"
        ]
      }
    },
    "/training/tenant-learning-path/{id}": {
      "get": {
        "operationId": "TenantLearningPathController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningPathResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get tenant learning path by ID",
        "tags": [
          "Training - Tenant Learning Path"
        ]
      },
      "put": {
        "operationId": "TenantLearningPathController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTenantLearningPathDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningPathResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update tenant learning path",
        "tags": [
          "Training - Tenant Learning Path"
        ]
      },
      "delete": {
        "operationId": "TenantLearningPathController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete tenant learning path",
        "tags": [
          "Training - Tenant Learning Path"
        ]
      }
    },
    "/training/tenant-learning-path/{id}/clone": {
      "post": {
        "operationId": "TenantLearningPathController_clone",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClonePathDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningPathResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clone tenant learning path",
        "tags": [
          "Training - Tenant Learning Path"
        ]
      }
    },
    "/training/tenant-learning-path/{id}/modules": {
      "post": {
        "operationId": "TenantLearningPathController_addModule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddModuleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningPathResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add module to learning path",
        "tags": [
          "Training - Tenant Learning Path"
        ]
      }
    },
    "/training/tenant-learning-path/{id}/modules/{moduleId}": {
      "delete": {
        "operationId": "TenantLearningPathController_removeModule",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "moduleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantLearningPathResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Remove module from learning path",
        "tags": [
          "Training - Tenant Learning Path"
        ]
      }
    },
    "/analytics/templates": {
      "post": {
        "operationId": "ReportTemplateController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReportTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new report template",
        "tags": [
          "Analytics - Templates"
        ]
      },
      "get": {
        "operationId": "ReportTemplateController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "schema": {
              "example": "PAYROLL",
              "type": "string",
              "enum": [
                "EMPLOYEE",
                "PERFORMANCE",
                "PAYROLL",
                "RECRUITMENT",
                "ATTENDANCE",
                "LEAVE",
                "TRAINING",
                "CUSTOM"
              ]
            }
          },
          {
            "name": "report_type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "STANDARD",
              "type": "string",
              "enum": [
                "STANDARD",
                "CUSTOM",
                "DASHBOARD"
              ]
            }
          },
          {
            "name": "access_level",
            "required": false,
            "in": "query",
            "schema": {
              "example": "DEPARTMENT",
              "type": "string",
              "enum": [
                "PRIVATE",
                "DEPARTMENT",
                "COMPANY",
                "PUBLIC"
              ]
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "payroll",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReportTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all report templates",
        "tags": [
          "Analytics - Templates"
        ]
      }
    },
    "/analytics/templates/predefined": {
      "get": {
        "operationId": "ReportTemplateController_getPredefined",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportTemplateResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get predefined report templates",
        "tags": [
          "Analytics - Templates"
        ]
      }
    },
    "/analytics/templates/{id}": {
      "get": {
        "operationId": "ReportTemplateController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a report template by ID",
        "tags": [
          "Analytics - Templates"
        ]
      },
      "put": {
        "operationId": "ReportTemplateController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReportTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a report template",
        "tags": [
          "Analytics - Templates"
        ]
      },
      "delete": {
        "operationId": "ReportTemplateController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a report template",
        "tags": [
          "Analytics - Templates"
        ]
      }
    },
    "/analytics/templates/{id}/duplicate": {
      "post": {
        "operationId": "ReportTemplateController_duplicate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportTemplateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Duplicate a report template",
        "tags": [
          "Analytics - Templates"
        ]
      }
    },
    "/analytics/instances/generate": {
      "post": {
        "operationId": "ReportInstanceController_generate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateReportInstanceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportInstanceResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate a new report instance",
        "tags": [
          "Analytics - Instances"
        ]
      }
    },
    "/analytics/instances": {
      "get": {
        "operationId": "ReportInstanceController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "template_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-template",
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "example": "COMPLETED",
              "type": "string",
              "enum": [
                "PENDING",
                "GENERATING",
                "COMPLETED",
                "FAILED",
                "EXPIRED"
              ]
            }
          },
          {
            "name": "file_format",
            "required": false,
            "in": "query",
            "schema": {
              "example": "PDF",
              "type": "string",
              "enum": [
                "PDF",
                "EXCEL",
                "CSV",
                "JSON"
              ]
            }
          },
          {
            "name": "generated_from",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "generated_to",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "sales",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReportInstanceResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all report instances",
        "tags": [
          "Analytics - Instances"
        ]
      }
    },
    "/analytics/instances/recent": {
      "get": {
        "operationId": "ReportInstanceController_getRecent",
        "parameters": [
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportInstanceResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get recent report instances for current user",
        "tags": [
          "Analytics - Instances"
        ]
      }
    },
    "/analytics/instances/{id}": {
      "get": {
        "operationId": "ReportInstanceController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportInstanceResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a report instance by ID",
        "tags": [
          "Analytics - Instances"
        ]
      }
    },
    "/analytics/instances/{id}/status": {
      "get": {
        "operationId": "ReportInstanceController_getStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportGenerationStatusDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get generation status of a report instance",
        "tags": [
          "Analytics - Instances"
        ]
      }
    },
    "/analytics/instances/{id}/download": {
      "get": {
        "operationId": "ReportInstanceController_download",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Report file"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Download a generated report",
        "tags": [
          "Analytics - Instances"
        ]
      }
    },
    "/analytics/instances/cleanup-expired": {
      "post": {
        "operationId": "ReportInstanceController_cleanupExpired",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clean up expired report instances",
        "tags": [
          "Analytics - Instances"
        ]
      }
    },
    "/analytics/dashboards": {
      "post": {
        "operationId": "DashboardController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDashboardDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new dashboard",
        "tags": [
          "Analytics - Dashboards"
        ]
      },
      "get": {
        "operationId": "DashboardController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "dashboard_type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "OVERVIEW",
              "type": "string",
              "enum": [
                "OVERVIEW",
                "DEPARTMENT",
                "EXECUTIVE",
                "OPERATIONAL",
                "CUSTOM"
              ]
            }
          },
          {
            "name": "is_default",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "overview",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedDashboardResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all dashboards",
        "tags": [
          "Analytics - Dashboards"
        ]
      }
    },
    "/analytics/dashboards/default": {
      "get": {
        "operationId": "DashboardController_getDefault",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get default dashboard",
        "tags": [
          "Analytics - Dashboards"
        ]
      }
    },
    "/analytics/dashboards/{id}": {
      "get": {
        "operationId": "DashboardController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a dashboard by ID",
        "tags": [
          "Analytics - Dashboards"
        ]
      },
      "put": {
        "operationId": "DashboardController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDashboardDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a dashboard",
        "tags": [
          "Analytics - Dashboards"
        ]
      },
      "delete": {
        "operationId": "DashboardController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a dashboard",
        "tags": [
          "Analytics - Dashboards"
        ]
      }
    },
    "/analytics/dashboards/{id}/data": {
      "get": {
        "operationId": "DashboardController_getDashboardData",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardDataResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get dashboard data with all widgets",
        "tags": [
          "Analytics - Dashboards"
        ]
      }
    },
    "/analytics/dashboards/{id}/duplicate": {
      "post": {
        "operationId": "DashboardController_duplicate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Duplicate a dashboard",
        "tags": [
          "Analytics - Dashboards"
        ]
      }
    },
    "/analytics/metrics/employees": {
      "get": {
        "operationId": "AnalyticsController_getEmployeeMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get employee metrics",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/analytics/metrics/departments": {
      "get": {
        "operationId": "AnalyticsController_getDepartmentMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get department metrics",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/analytics/metrics/payroll": {
      "get": {
        "operationId": "AnalyticsController_getPayrollMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get payroll metrics",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/analytics/metrics/attendance": {
      "get": {
        "operationId": "AnalyticsController_getAttendanceMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get attendance metrics",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/analytics/metrics/performance": {
      "get": {
        "operationId": "AnalyticsController_getPerformanceMetrics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get performance metrics",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/analytics/cache/clear": {
      "post": {
        "operationId": "AnalyticsController_clearCache",
        "parameters": [
          {
            "name": "pattern",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Clear analytics cache",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/analytics/cache/stats": {
      "get": {
        "operationId": "AnalyticsController_getCacheStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get cache statistics",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/analytics/templates/initialize": {
      "post": {
        "operationId": "AnalyticsController_initializeTemplates",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Initialize predefined report templates",
        "tags": [
          "Analytics - Reports"
        ]
      }
    },
    "/case-management/cases": {
      "post": {
        "operationId": "CaseController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCaseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new case",
        "tags": [
          "Cases - Management"
        ]
      },
      "get": {
        "operationId": "CaseController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "example": "OPEN",
              "type": "string",
              "enum": [
                "OPEN",
                "IN_PROGRESS",
                "RESOLVED",
                "CLOSED",
                "CANCELLED"
              ]
            }
          },
          {
            "name": "priority",
            "required": false,
            "in": "query",
            "schema": {
              "example": "HIGH",
              "type": "string",
              "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "CRITICAL"
              ]
            }
          },
          {
            "name": "category_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-category",
              "type": "string"
            }
          },
          {
            "name": "assigned_to",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-assignee",
              "type": "string"
            }
          },
          {
            "name": "reported_by",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-reporter",
              "type": "string"
            }
          },
          {
            "name": "created_from",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "created_to",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all cases with filters",
        "tags": [
          "Cases - Management"
        ]
      }
    },
    "/case-management/cases/statistics": {
      "get": {
        "operationId": "CaseController_getStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get case statistics",
        "tags": [
          "Cases - Management"
        ]
      }
    },
    "/case-management/cases/{id}": {
      "get": {
        "operationId": "CaseController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a case by ID",
        "tags": [
          "Cases - Management"
        ]
      },
      "patch": {
        "operationId": "CaseController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCaseDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a case",
        "tags": [
          "Cases - Management"
        ]
      }
    },
    "/case-management/cases/{id}/resolve": {
      "post": {
        "operationId": "CaseController_resolve",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveCaseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Resolve and close a case",
        "tags": [
          "Cases - Management"
        ]
      }
    },
    "/case-management/cases/{id}/assign": {
      "post": {
        "operationId": "CaseController_assignCase",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Assign a case to an employee",
        "tags": [
          "Cases - Management"
        ]
      }
    },
    "/case-management/cases/{id}/escalate": {
      "post": {
        "operationId": "CaseController_escalateCase",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Escalate case priority",
        "tags": [
          "Cases - Management"
        ]
      }
    },
    "/case-management/activities": {
      "post": {
        "operationId": "CaseActivityController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCaseActivityDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new case activity",
        "tags": [
          "Cases - Activities"
        ]
      },
      "get": {
        "operationId": "CaseActivityController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "case_id",
            "required": true,
            "in": "query",
            "schema": {
              "example": "uuid-of-case",
              "type": "string"
            }
          },
          {
            "name": "activity_type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "MEETING",
              "type": "string",
              "enum": [
                "NOTE",
                "MEETING",
                "DOCUMENT",
                "DECISION",
                "INVESTIGATION",
                "INTERVIEW",
                "EVIDENCE",
                "ESCALATION"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all activities for a case",
        "tags": [
          "Cases - Activities"
        ]
      }
    },
    "/case-management/activities/timeline/{caseId}": {
      "get": {
        "operationId": "CaseActivityController_getTimeline",
        "parameters": [
          {
            "name": "caseId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get activity timeline for a case",
        "tags": [
          "Cases - Activities"
        ]
      }
    },
    "/case-management/activities/{id}": {
      "get": {
        "operationId": "CaseActivityController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a case activity by ID",
        "tags": [
          "Cases - Activities"
        ]
      },
      "patch": {
        "operationId": "CaseActivityController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCaseActivityDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a case activity",
        "tags": [
          "Cases - Activities"
        ]
      },
      "delete": {
        "operationId": "CaseActivityController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a case activity",
        "tags": [
          "Cases - Activities"
        ]
      }
    },
    "/case-management/activities/bulk/{caseId}": {
      "post": {
        "operationId": "CaseActivityController_addBulkActivities",
        "parameters": [
          {
            "name": "caseId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Add multiple activities to a case",
        "tags": [
          "Cases - Activities"
        ]
      }
    },
    "/case-management/categories": {
      "post": {
        "operationId": "CaseCategoryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCaseCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new case category",
        "tags": [
          "Cases - Categories"
        ]
      },
      "get": {
        "operationId": "CaseCategoryController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "disciplinary",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all case categories",
        "tags": [
          "Cases - Categories"
        ]
      }
    },
    "/case-management/categories/active": {
      "get": {
        "operationId": "CaseCategoryController_getActiveCategories",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all active categories",
        "tags": [
          "Cases - Categories"
        ]
      }
    },
    "/case-management/categories/statistics": {
      "get": {
        "operationId": "CaseCategoryController_getStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get category statistics",
        "tags": [
          "Cases - Categories"
        ]
      }
    },
    "/case-management/categories/{id}": {
      "get": {
        "operationId": "CaseCategoryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a case category by ID",
        "tags": [
          "Cases - Categories"
        ]
      },
      "patch": {
        "operationId": "CaseCategoryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCaseCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a case category",
        "tags": [
          "Cases - Categories"
        ]
      },
      "delete": {
        "operationId": "CaseCategoryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a case category",
        "tags": [
          "Cases - Categories"
        ]
      }
    },
    "/notifications/templates": {
      "post": {
        "operationId": "NotificationTemplateController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new notification template",
        "tags": [
          "Notifications - Templates"
        ]
      },
      "get": {
        "operationId": "NotificationTemplateController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "template_type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "PERFORMANCE_REVIEW",
              "type": "string"
            }
          },
          {
            "name": "channel",
            "required": false,
            "in": "query",
            "schema": {
              "example": "EMAIL",
              "type": "string",
              "enum": [
                "EMAIL",
                "IN_APP",
                "SMS",
                "SLACK"
              ]
            }
          },
          {
            "name": "is_active",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "review",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all notification templates",
        "tags": [
          "Notifications - Templates"
        ]
      }
    },
    "/notifications/templates/by-type/{type}": {
      "get": {
        "operationId": "NotificationTemplateController_getByType",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get active templates by type",
        "tags": [
          "Notifications - Templates"
        ]
      }
    },
    "/notifications/templates/by-name/{name}": {
      "get": {
        "operationId": "NotificationTemplateController_getByName",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get template by name",
        "tags": [
          "Notifications - Templates"
        ]
      }
    },
    "/notifications/templates/{id}": {
      "get": {
        "operationId": "NotificationTemplateController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a notification template by ID",
        "tags": [
          "Notifications - Templates"
        ]
      },
      "patch": {
        "operationId": "NotificationTemplateController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationTemplateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a notification template",
        "tags": [
          "Notifications - Templates"
        ]
      },
      "delete": {
        "operationId": "NotificationTemplateController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a notification template",
        "tags": [
          "Notifications - Templates"
        ]
      }
    },
    "/notifications/templates/{id}/duplicate": {
      "post": {
        "operationId": "NotificationTemplateController_duplicate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Duplicate a notification template",
        "tags": [
          "Notifications - Templates"
        ]
      }
    },
    "/notifications/templates/{id}/preview": {
      "post": {
        "operationId": "NotificationTemplateController_preview",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Preview rendered template with variables",
        "tags": [
          "Notifications - Templates"
        ]
      }
    },
    "/notifications/queue/send": {
      "post": {
        "operationId": "NotificationQueueController_sendNotification",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send a notification",
        "tags": [
          "Notifications - Queue"
        ]
      }
    },
    "/notifications/queue/send-bulk": {
      "post": {
        "operationId": "NotificationQueueController_sendBulkNotifications",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkSendNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send notifications to multiple recipients",
        "tags": [
          "Notifications - Queue"
        ]
      }
    },
    "/notifications/queue": {
      "get": {
        "operationId": "NotificationQueueController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "example": "PENDING",
              "type": "string",
              "enum": [
                "PENDING",
                "SENT",
                "FAILED",
                "DELIVERED",
                "READ"
              ]
            }
          },
          {
            "name": "channel",
            "required": false,
            "in": "query",
            "schema": {
              "example": "EMAIL",
              "type": "string",
              "enum": [
                "EMAIL",
                "IN_APP",
                "SMS",
                "SLACK"
              ]
            }
          },
          {
            "name": "priority",
            "required": false,
            "in": "query",
            "schema": {
              "example": "HIGH",
              "type": "string",
              "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "CRITICAL"
              ]
            }
          },
          {
            "name": "recipient_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-recipient",
              "type": "string"
            }
          },
          {
            "name": "created_from",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "created_to",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "search term",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all notifications in queue",
        "tags": [
          "Notifications - Queue"
        ]
      }
    },
    "/notifications/queue/statistics": {
      "get": {
        "operationId": "NotificationQueueController_getStatistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get notification statistics",
        "tags": [
          "Notifications - Queue"
        ]
      }
    },
    "/notifications/queue/recipient/{recipientId}": {
      "get": {
        "operationId": "NotificationQueueController_getRecipientNotifications",
        "parameters": [
          {
            "name": "recipientId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get notifications for a specific recipient",
        "tags": [
          "Notifications - Queue"
        ]
      }
    },
    "/notifications/queue/{id}": {
      "get": {
        "operationId": "NotificationQueueController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a notification by ID",
        "tags": [
          "Notifications - Queue"
        ]
      },
      "delete": {
        "operationId": "NotificationQueueController_cancelNotification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel a pending notification",
        "tags": [
          "Notifications - Queue"
        ]
      }
    },
    "/notifications/queue/{id}/retry": {
      "post": {
        "operationId": "NotificationQueueController_retryNotification",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetryNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Retry a failed notification",
        "tags": [
          "Notifications - Queue"
        ]
      }
    },
    "/compliance/inspections": {
      "post": {
        "operationId": "ComplianceInspectionController_initiateInspection",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiateInspectionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Initiate a new compliance inspection case",
        "tags": [
          "Compliance - Inspections"
        ]
      },
      "get": {
        "operationId": "ComplianceInspectionController_getInspectionCases",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "example": "NOTICE_RECEIVED",
              "type": "string",
              "enum": [
                "NOTICE_RECEIVED",
                "EVIDENCE_GATHERING",
                "PACKAGE_GENERATED",
                "SUBMITTED",
                "UNDER_REVIEW",
                "CONCLUDED"
              ]
            }
          },
          {
            "name": "inspection_type_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-inspection-type",
              "type": "string"
            }
          },
          {
            "name": "assigned_to",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-assignee",
              "type": "string"
            }
          },
          {
            "name": "notice_from",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "notice_to",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "deadline_before",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-02-01",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "HMRC",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all inspection cases",
        "tags": [
          "Compliance - Inspections"
        ]
      }
    },
    "/compliance/inspections/{id}": {
      "get": {
        "operationId": "ComplianceInspectionController_getInspectionCase",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific inspection case",
        "tags": [
          "Compliance - Inspections"
        ]
      }
    },
    "/compliance/inspections/{id}/status": {
      "put": {
        "operationId": "ComplianceInspectionController_updateInspectionStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInspectionStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update inspection case status",
        "tags": [
          "Compliance - Inspections"
        ]
      }
    },
    "/compliance/inspections/{id}/conclude": {
      "put": {
        "operationId": "ComplianceInspectionController_concludeInspection",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConcludeInspectionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Conclude an inspection case",
        "tags": [
          "Compliance - Inspections"
        ]
      }
    },
    "/compliance/templates": {
      "post": {
        "operationId": "ComplianceTemplateController_createTemplate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComplianceTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new compliance check template",
        "tags": [
          "Compliance - Templates"
        ]
      },
      "get": {
        "operationId": "ComplianceTemplateController_getTemplates",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all compliance templates",
        "tags": [
          "Compliance - Templates"
        ]
      }
    },
    "/compliance/templates/{id}": {
      "get": {
        "operationId": "ComplianceTemplateController_getTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific compliance template",
        "tags": [
          "Compliance - Templates"
        ]
      },
      "put": {
        "operationId": "ComplianceTemplateController_updateTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a compliance template",
        "tags": [
          "Compliance - Templates"
        ]
      },
      "delete": {
        "operationId": "ComplianceTemplateController_deactivateTemplate",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Deactivate a compliance template",
        "tags": [
          "Compliance - Templates"
        ]
      }
    },
    "/compliance/templates/by-inspection-type/{inspectionTypeId}": {
      "get": {
        "operationId": "ComplianceTemplateController_getTemplatesByInspectionType",
        "parameters": [
          {
            "name": "inspectionTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get templates for a specific inspection type",
        "tags": [
          "Compliance - Templates"
        ]
      }
    },
    "/compliance/evidence-packages": {
      "post": {
        "operationId": "EvidencePackageController_generateEvidencePackage",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateEvidencePackageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate a new evidence package",
        "tags": [
          "Compliance - Evidence Packages"
        ]
      },
      "get": {
        "operationId": "EvidencePackageController_getEvidencePackages",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "inspection_case_id",
            "required": false,
            "in": "query",
            "schema": {
              "example": "uuid-of-inspection-case",
              "type": "string"
            }
          },
          {
            "name": "collection_status",
            "required": false,
            "in": "query",
            "schema": {
              "example": "COMPLETED",
              "type": "string",
              "enum": [
                "PENDING",
                "COLLECTING",
                "PROCESSING",
                "PACKAGING",
                "COMPLETED",
                "FAILED"
              ]
            }
          },
          {
            "name": "package_type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "INITIAL_RESPONSE",
              "type": "string",
              "enum": [
                "INITIAL_RESPONSE",
                "SUPPLEMENTARY",
                "FINAL_SUBMISSION"
              ]
            }
          },
          {
            "name": "created_from",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01",
              "type": "string"
            }
          },
          {
            "name": "created_to",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-12-31",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "PKG-2024",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all evidence packages",
        "tags": [
          "Compliance - Evidence Packages"
        ]
      }
    },
    "/compliance/evidence-packages/{id}/status": {
      "get": {
        "operationId": "EvidencePackageController_getPackageStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get package generation status",
        "tags": [
          "Compliance - Evidence Packages"
        ]
      }
    },
    "/compliance/evidence-packages/{id}/collect": {
      "post": {
        "operationId": "EvidencePackageController_collectEvidence",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Start evidence collection for a package",
        "tags": [
          "Compliance - Evidence Packages"
        ]
      }
    },
    "/compliance/evidence-packages/{id}/items": {
      "get": {
        "operationId": "EvidencePackageController_getEvidenceItems",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get evidence items in a package",
        "tags": [
          "Compliance - Evidence Packages"
        ]
      }
    },
    "/compliance/evidence-packages/{id}/verify": {
      "post": {
        "operationId": "EvidencePackageController_verifyPackageIntegrity",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verify package integrity",
        "tags": [
          "Compliance - Evidence Packages"
        ]
      }
    },
    "/compliance/evidence-packages/{id}/download": {
      "get": {
        "operationId": "EvidencePackageController_downloadEvidencePackage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Download evidence package",
        "tags": [
          "Compliance - Evidence Packages"
        ]
      }
    },
    "/compliance/evidence-timeline/{packageId}/generate": {
      "post": {
        "operationId": "EvidenceTimelineController_generateTimeline",
        "parameters": [
          {
            "name": "packageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate timeline from evidence items",
        "tags": [
          "Compliance - Evidence Timeline"
        ]
      }
    },
    "/compliance/evidence-timeline": {
      "get": {
        "operationId": "EvidenceTimelineController_getEvidenceTimeline",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "evidence_package_id",
            "required": true,
            "in": "query",
            "schema": {
              "example": "uuid-of-evidence-package",
              "type": "string"
            }
          },
          {
            "name": "event_date_from",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2023-04-01",
              "type": "string"
            }
          },
          {
            "name": "event_date_to",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-03-31",
              "type": "string"
            }
          },
          {
            "name": "event_type",
            "required": false,
            "in": "query",
            "schema": {
              "example": "PAYROLL_CHANGE",
              "type": "string"
            }
          },
          {
            "name": "event_significance",
            "required": false,
            "in": "query",
            "schema": {
              "example": "CRITICAL",
              "type": "string"
            }
          },
          {
            "name": "compliance_impact",
            "required": false,
            "in": "query",
            "schema": {
              "example": "HIGH",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get evidence timeline for a package",
        "tags": [
          "Compliance - Evidence Timeline"
        ]
      }
    },
    "/compliance/evidence-timeline/{packageId}/statistics": {
      "get": {
        "operationId": "EvidenceTimelineController_getTimelineStatistics",
        "parameters": [
          {
            "name": "packageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get timeline statistics",
        "tags": [
          "Compliance - Evidence Timeline"
        ]
      }
    },
    "/compliance/evidence-timeline/{id}": {
      "put": {
        "operationId": "EvidenceTimelineController_updateTimelineEvent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a timeline event",
        "tags": [
          "Compliance - Evidence Timeline"
        ]
      }
    },
    "/compliance/evidence-timeline/{id}/verify": {
      "post": {
        "operationId": "EvidenceTimelineController_verifyTimelineEvent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verify a timeline event",
        "tags": [
          "Compliance - Evidence Timeline"
        ]
      }
    },
    "/compliance/workplace/dashboard/{companyId}": {
      "get": {
        "operationId": "WorkplaceComplianceController_getComplianceDashboard",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Compliance dashboard data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceDashboardDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get compliance dashboard for a company",
        "tags": [
          "Workplace - Dashboard"
        ]
      }
    },
    "/compliance/workplace/check/{companyId}": {
      "post": {
        "operationId": "WorkplaceComplianceController_runComplianceCheck",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComplianceCheckConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Compliance check result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceCheckResultDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Run compliance check for a company",
        "tags": [
          "Workplace - Dashboard"
        ]
      }
    },
    "/compliance/workplace/items": {
      "post": {
        "operationId": "WorkplaceComplianceController_createComplianceItem",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkplaceComplianceItemDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Compliance item created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkplaceComplianceItemResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new compliance item",
        "tags": [
          "Workplace - Dashboard"
        ]
      },
      "get": {
        "operationId": "WorkplaceComplianceController_getComplianceItems",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_mandatory",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of compliance items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all compliance items",
        "tags": [
          "Workplace - Dashboard"
        ]
      }
    },
    "/compliance/workplace/items/{itemId}": {
      "get": {
        "operationId": "WorkplaceComplianceController_getComplianceItem",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Compliance item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Compliance item details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkplaceComplianceItemResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get compliance item by ID",
        "tags": [
          "Workplace - Dashboard"
        ]
      },
      "put": {
        "operationId": "WorkplaceComplianceController_updateComplianceItem",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Compliance item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkplaceComplianceItemDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Compliance item updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkplaceComplianceItemResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update compliance item",
        "tags": [
          "Workplace - Dashboard"
        ]
      },
      "delete": {
        "operationId": "WorkplaceComplianceController_deleteComplianceItem",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "path",
            "description": "Compliance item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Compliance item deleted"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete compliance item",
        "tags": [
          "Workplace - Dashboard"
        ]
      }
    },
    "/compliance/workplace/status/{companyId}": {
      "get": {
        "operationId": "WorkplaceComplianceController_getCompanyComplianceStatus",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "COMPLIANT",
                "NON_COMPLIANT",
                "OVERDUE",
                "PENDING"
              ]
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "INSURANCE",
                "SAFETY",
                "TRAINING",
                "CERTIFICATION"
              ]
            }
          },
          {
            "name": "risk_level",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "CRITICAL"
              ]
            }
          },
          {
            "name": "responsible_person_id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "due_date_from",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "due_date_to",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Company compliance status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get compliance status for a company",
        "tags": [
          "Workplace - Dashboard"
        ]
      }
    },
    "/compliance/workplace/status": {
      "post": {
        "operationId": "WorkplaceComplianceController_createComplianceStatus",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyComplianceStatusDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Compliance status created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyComplianceStatusResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create company compliance status",
        "tags": [
          "Workplace - Dashboard"
        ]
      }
    },
    "/compliance/workplace/status/{statusId}": {
      "put": {
        "operationId": "WorkplaceComplianceController_updateComplianceStatus",
        "parameters": [
          {
            "name": "statusId",
            "required": true,
            "in": "path",
            "description": "Compliance status ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyComplianceStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Compliance status updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyComplianceStatusResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update company compliance status",
        "tags": [
          "Workplace - Dashboard"
        ]
      }
    },
    "/compliance/workplace/status/expiring/{days}": {
      "get": {
        "operationId": "WorkplaceComplianceController_getExpiringComplianceItems",
        "parameters": [
          {
            "name": "days",
            "required": true,
            "in": "path",
            "description": "Number of days to look ahead",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of expiring compliance items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyComplianceStatusResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get expiring compliance items",
        "tags": [
          "Workplace - Dashboard"
        ]
      }
    },
    "/compliance/workplace/status/overdue": {
      "get": {
        "operationId": "WorkplaceComplianceController_getOverdueComplianceItems",
        "parameters": [
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of overdue compliance items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyComplianceStatusResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get overdue compliance items",
        "tags": [
          "Workplace - Dashboard"
        ]
      }
    },
    "/compliance/insurance": {
      "post": {
        "operationId": "InsuranceManagementController_addInsurancePolicy",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInsurancePolicyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Insurance policy created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsurancePolicyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Add a new insurance policy",
        "tags": [
          "Workplace - Insurance"
        ]
      }
    },
    "/compliance/insurance/company/{companyId}": {
      "get": {
        "operationId": "InsuranceManagementController_getCompanyInsurancePolicies",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policy_type",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "EMPLOYERS_LIABILITY",
                "PUBLIC_LIABILITY",
                "PROFESSIONAL_INDEMNITY",
                "PROPERTY",
                "VEHICLE",
                "CYBER",
                "OTHER"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "ACTIVE",
                "EXPIRED",
                "CANCELLED",
                "PENDING_RENEWAL"
              ]
            }
          },
          {
            "name": "company_id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiry_date_from",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expiry_date_to",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "insurer_name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of insurance policies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all insurance policies for a company",
        "tags": [
          "Workplace - Insurance"
        ]
      }
    },
    "/compliance/insurance/expiring": {
      "get": {
        "operationId": "InsuranceManagementController_getExpiringPolicies",
        "parameters": [
          {
            "name": "days",
            "required": false,
            "in": "query",
            "description": "Number of days to look ahead (default: 90)",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of expiring policies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InsurancePolicyResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get expiring insurance policies",
        "tags": [
          "Workplace - Insurance"
        ]
      }
    },
    "/compliance/insurance/{policyId}": {
      "get": {
        "operationId": "InsuranceManagementController_getInsurancePolicy",
        "parameters": [
          {
            "name": "policyId",
            "required": true,
            "in": "path",
            "description": "Insurance policy ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insurance policy details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsurancePolicyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get insurance policy by ID",
        "tags": [
          "Workplace - Insurance"
        ]
      },
      "put": {
        "operationId": "InsuranceManagementController_updatePolicy",
        "parameters": [
          {
            "name": "policyId",
            "required": true,
            "in": "path",
            "description": "Insurance policy ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInsurancePolicyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Insurance policy updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsurancePolicyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update insurance policy",
        "tags": [
          "Workplace - Insurance"
        ]
      },
      "delete": {
        "operationId": "InsuranceManagementController_deletePolicy",
        "parameters": [
          {
            "name": "policyId",
            "required": true,
            "in": "path",
            "description": "Insurance policy ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Insurance policy deleted"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete insurance policy",
        "tags": [
          "Workplace - Insurance"
        ]
      }
    },
    "/compliance/insurance/{policyId}/renew": {
      "put": {
        "operationId": "InsuranceManagementController_renewPolicy",
        "parameters": [
          {
            "name": "policyId",
            "required": true,
            "in": "path",
            "description": "Insurance policy ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewInsurancePolicyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Insurance policy renewed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsurancePolicyResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Renew insurance policy",
        "tags": [
          "Workplace - Insurance"
        ]
      }
    },
    "/compliance/insurance/coverage/check/{companyId}": {
      "get": {
        "operationId": "InsuranceManagementController_checkInsuranceCoverage",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insurance coverage analysis",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Check insurance coverage adequacy for a company",
        "tags": [
          "Workplace - Insurance"
        ]
      }
    },
    "/compliance/insurance/compliance/status/{companyId}": {
      "get": {
        "operationId": "InsuranceManagementController_getInsuranceComplianceStatus",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insurance compliance status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get insurance compliance status for a company",
        "tags": [
          "Workplace - Insurance"
        ]
      }
    },
    "/compliance/safety-inspections": {
      "post": {
        "operationId": "SafetyInspectionController_createInspection",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSafetyInspectionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Safety inspection created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafetyInspectionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new safety inspection",
        "tags": [
          "Workplace - Safety"
        ]
      }
    },
    "/compliance/safety-inspections/company/{companyId}": {
      "get": {
        "operationId": "SafetyInspectionController_getCompanyInspections",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inspection_type",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "FIRE_SAFETY",
                "EQUIPMENT_CHECK",
                "WORKPLACE_ASSESSMENT",
                "ELECTRICAL_SAFETY",
                "MANUAL_HANDLING",
                "DSE_ASSESSMENT",
                "COSHH",
                "OTHER"
              ]
            }
          },
          {
            "name": "overall_result",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "PASS",
                "FAIL",
                "CONDITIONAL_PASS",
                "PENDING"
              ]
            }
          },
          {
            "name": "company_id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inspector_id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inspection_date_from",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "inspection_date_to",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "next_due_from",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "next_due_to",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "type": "number"
            }
          },
          {
            "name": "to_date",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from_date",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of safety inspections",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all safety inspections for a company",
        "tags": [
          "Workplace - Safety"
        ]
      }
    },
    "/compliance/safety-inspections/company/{companyId}/due": {
      "get": {
        "operationId": "SafetyInspectionController_getDueInspections",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of due inspections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SafetyInspectionResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get due safety inspections for a company",
        "tags": [
          "Workplace - Safety"
        ]
      }
    },
    "/compliance/safety-inspections/overdue": {
      "get": {
        "operationId": "SafetyInspectionController_getOverdueInspections",
        "parameters": [
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of overdue inspections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SafetyInspectionResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get overdue safety inspections",
        "tags": [
          "Workplace - Safety"
        ]
      }
    },
    "/compliance/safety-inspections/{inspectionId}": {
      "get": {
        "operationId": "SafetyInspectionController_getInspection",
        "parameters": [
          {
            "name": "inspectionId",
            "required": true,
            "in": "path",
            "description": "Safety inspection ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Safety inspection details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafetyInspectionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get safety inspection by ID",
        "tags": [
          "Workplace - Safety"
        ]
      },
      "put": {
        "operationId": "SafetyInspectionController_updateInspection",
        "parameters": [
          {
            "name": "inspectionId",
            "required": true,
            "in": "path",
            "description": "Safety inspection ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSafetyInspectionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Safety inspection updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafetyInspectionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update safety inspection",
        "tags": [
          "Workplace - Safety"
        ]
      },
      "delete": {
        "operationId": "SafetyInspectionController_deleteInspection",
        "parameters": [
          {
            "name": "inspectionId",
            "required": true,
            "in": "path",
            "description": "Safety inspection ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Safety inspection deleted"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete safety inspection",
        "tags": [
          "Workplace - Safety"
        ]
      }
    },
    "/compliance/safety-inspections/{inspectionId}/complete": {
      "put": {
        "operationId": "SafetyInspectionController_completeInspection",
        "parameters": [
          {
            "name": "inspectionId",
            "required": true,
            "in": "path",
            "description": "Safety inspection ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Safety inspection completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafetyInspectionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Complete and finalize a safety inspection",
        "tags": [
          "Workplace - Safety"
        ]
      }
    },
    "/compliance/safety-inspections/{inspectionId}/report": {
      "get": {
        "operationId": "SafetyInspectionController_generateInspectionReport",
        "parameters": [
          {
            "name": "inspectionId",
            "required": true,
            "in": "path",
            "description": "Safety inspection ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Safety inspection report PDF",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Generate and download safety inspection report",
        "tags": [
          "Workplace - Safety"
        ]
      }
    },
    "/compliance/safety-inspections/{inspectionId}/remedial-actions": {
      "post": {
        "operationId": "SafetyInspectionController_addRemedialActions",
        "parameters": [
          {
            "name": "inspectionId",
            "required": true,
            "in": "path",
            "description": "Safety inspection ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remedial actions added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafetyInspectionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Add remedial actions to an inspection",
        "tags": [
          "Workplace - Safety"
        ]
      }
    },
    "/compliance/safety-inspections/statistics/{companyId}": {
      "get": {
        "operationId": "SafetyInspectionController_getInspectionStatistics",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from_date",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to_date",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Safety inspection statistics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get safety inspection statistics for a company",
        "tags": [
          "Workplace - Safety"
        ]
      }
    },
    "/compliance/risk-assessments": {
      "post": {
        "operationId": "RiskAssessmentController_createRiskAssessment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRiskAssessmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Risk assessment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskAssessmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new risk assessment",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      }
    },
    "/compliance/risk-assessments/company/{companyId}": {
      "get": {
        "operationId": "RiskAssessmentController_getCompanyRiskAssessments",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assessment_type",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "WORKPLACE",
                "FIRE",
                "MANUAL_HANDLING",
                "DSE",
                "COSHH",
                "LONE_WORKING",
                "YOUNG_PERSON",
                "NEW_MOTHER",
                "STRESS",
                "NOISE",
                "VIBRATION",
                "GENERAL"
              ]
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "IN_REVIEW",
                "APPROVED",
                "EXPIRED",
                "ARCHIVED"
              ]
            }
          },
          {
            "name": "overall_risk_rating",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "LOW",
                "MEDIUM",
                "HIGH",
                "CRITICAL"
              ]
            }
          },
          {
            "name": "department_id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assessor_id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assessment_date_from",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assessment_date_to",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "next_assessment_from",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "next_assessment_to",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include_expired",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 20,
              "type": "number"
            }
          },
          {
            "name": "overall_risk_level",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of risk assessments",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all risk assessments for a company",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      }
    },
    "/compliance/risk-assessments/company/{companyId}/active": {
      "get": {
        "operationId": "RiskAssessmentController_getActiveRiskAssessments",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of active risk assessments",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskAssessmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get active risk assessments for a company",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      }
    },
    "/compliance/risk-assessments/due-for-review": {
      "get": {
        "operationId": "RiskAssessmentController_getAssessmentsDueForReview",
        "parameters": [
          {
            "name": "companyId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "days",
            "required": false,
            "in": "query",
            "description": "Days to look ahead (default: 30)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of assessments due for review",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskAssessmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get risk assessments due for review",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      }
    },
    "/compliance/risk-assessments/{assessmentId}": {
      "get": {
        "operationId": "RiskAssessmentController_getRiskAssessment",
        "parameters": [
          {
            "name": "assessmentId",
            "required": true,
            "in": "path",
            "description": "Risk assessment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Risk assessment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskAssessmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get risk assessment by ID",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      },
      "put": {
        "operationId": "RiskAssessmentController_updateRiskAssessment",
        "parameters": [
          {
            "name": "assessmentId",
            "required": true,
            "in": "path",
            "description": "Risk assessment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRiskAssessmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Risk assessment updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskAssessmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update risk assessment",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      },
      "delete": {
        "operationId": "RiskAssessmentController_deleteRiskAssessment",
        "parameters": [
          {
            "name": "assessmentId",
            "required": true,
            "in": "path",
            "description": "Risk assessment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Risk assessment deleted"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete risk assessment",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      }
    },
    "/compliance/risk-assessments/{assessmentId}/approve": {
      "put": {
        "operationId": "RiskAssessmentController_approveRiskAssessment",
        "parameters": [
          {
            "name": "assessmentId",
            "required": true,
            "in": "path",
            "description": "Risk assessment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Risk assessment approved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskAssessmentResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Approve a risk assessment",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      }
    },
    "/compliance/risk-assessments/{assessmentId}/risk-matrix": {
      "post": {
        "operationId": "RiskAssessmentController_performRiskMatrixAnalysis",
        "parameters": [
          {
            "name": "assessmentId",
            "required": true,
            "in": "path",
            "description": "Risk assessment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Risk matrix analysis result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RiskMatrixDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Perform risk matrix analysis",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      }
    },
    "/compliance/risk-assessments/{assessmentId}/action-plan": {
      "post": {
        "operationId": "RiskAssessmentController_createActionPlan",
        "parameters": [
          {
            "name": "assessmentId",
            "required": true,
            "in": "path",
            "description": "Risk assessment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionPlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action plan created/updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionPlanDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create or update action plan for risk assessment",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      }
    },
    "/compliance/risk-assessments/{assessmentId}/follow-up-tasks": {
      "get": {
        "operationId": "RiskAssessmentController_getFollowUpTasks",
        "parameters": [
          {
            "name": "assessmentId",
            "required": true,
            "in": "path",
            "description": "Risk assessment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of follow-up tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get follow-up tasks for a risk assessment",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      }
    },
    "/compliance/risk-assessments/high-risk/{companyId}": {
      "get": {
        "operationId": "RiskAssessmentController_getHighRiskItems",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "Company ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of high-risk items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get high-risk items for a company",
        "tags": [
          "Workplace - Risk Assessment"
        ]
      }
    },
    "/compliance/accident-reports": {
      "post": {
        "operationId": "AccidentReportController_createAccidentReport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccidentReportDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccidentReportResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new accident report",
        "tags": [
          "Workplace - Accidents"
        ]
      }
    },
    "/compliance/accident-reports/statistics/{companyId}": {
      "get": {
        "operationId": "AccidentReportController_getAccidentStatistics",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccidentStatisticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get accident statistics for a company",
        "tags": [
          "Workplace - Accidents"
        ]
      }
    },
    "/compliance/accident-reports/riddor-reportable": {
      "get": {
        "operationId": "AccidentReportController_getRIDDORReportableAccidents",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "companyId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get RIDDOR reportable accidents",
        "tags": [
          "Workplace - Accidents"
        ]
      }
    },
    "/compliance/accident-reports/{id}": {
      "put": {
        "operationId": "AccidentReportController_updateAccidentReport",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAccidentReportDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccidentReportResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update accident report",
        "tags": [
          "Workplace - Accidents"
        ]
      },
      "delete": {
        "operationId": "AccidentReportController_deleteAccidentReport",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete accident report",
        "tags": [
          "Workplace - Accidents"
        ]
      }
    },
    "/compliance/training": {
      "post": {
        "operationId": "TrainingComplianceController_createTrainingCompliance",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTrainingComplianceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TrainingComplianceResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new training compliance record",
        "tags": [
          "Workplace - Training Compliance"
        ]
      }
    },
    "/compliance/certificates-licenses": {
      "post": {
        "operationId": "CertificateLicenseController_createCertificate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCertificateLicenseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateLicenseResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new certificate or license",
        "tags": [
          "Workplace - Certificates"
        ]
      }
    },
    "/compliance/certificates-licenses/expiring": {
      "get": {
        "operationId": "CertificateLicenseController_getExpiringCertificates",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "companyId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "days",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get expiring certificates and licenses",
        "tags": [
          "Workplace - Certificates"
        ]
      }
    },
    "/compliance/certificates-licenses/verification/{certificateNumber}": {
      "get": {
        "operationId": "CertificateLicenseController_verifyCertificate",
        "parameters": [
          {
            "name": "certificateNumber",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CertificateLicenseVerificationDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Verify certificate authenticity",
        "tags": [
          "Workplace - Certificates"
        ]
      }
    },
    "/compliance/reminders": {
      "post": {
        "operationId": "ComplianceReminderController_createReminder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComplianceReminderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComplianceReminderResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new compliance reminder",
        "tags": [
          "Workplace - Reminders"
        ]
      }
    }
  },
  "info": {
    "title": "PrimeForge HR API",
    "description": "\nThe PrimeForge HR Service provides comprehensive human resources management capabilities for the PrimeForge platform.\n\n## Features\n- Employee management\n- Organization structure management\n- HR rates and payroll calculations\n- Department and job management\n- People administration\n- Company hierarchy management\n\n## Authentication\nMost endpoints require JWT authentication. Include the access token in the Authorization header:\n`Authorization: Bearer <your_access_token>`\n\n## Rate Limiting\n- General endpoints: 100 requests per minute per user\n- Admin endpoints: 50 requests per minute per admin user\n\n## Multi-tenancy\nThis service supports multi-tenancy. The tenant context is automatically extracted from the JWT token.\n    ",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Organization - Companies",
      "description": "Company management and hierarchy"
    },
    {
      "name": "Organization - Departments",
      "description": "Department structure and management"
    },
    {
      "name": "Organization - Jobs",
      "description": "Job positions and role definitions"
    },
    {
      "name": "People - Employees",
      "description": "Employee records and information management"
    },
    {
      "name": "People - Assignments",
      "description": "Job assignments and position management"
    },
    {
      "name": "Recruitment - Job Postings",
      "description": "Job advertisements and postings"
    },
    {
      "name": "Recruitment - Candidates",
      "description": "Candidate applications and profiles"
    },
    {
      "name": "Recruitment - Interviews",
      "description": "Interview scheduling and management"
    },
    {
      "name": "Recruitment - Offers",
      "description": "Job offers and negotiations"
    },
    {
      "name": "Time - Attendance",
      "description": "Clock in/out and attendance records"
    },
    {
      "name": "Time - Timesheets",
      "description": "Timesheet submission and approval"
    },
    {
      "name": "Time - Leave Management",
      "description": "Leave requests, types, and balances"
    },
    {
      "name": "Time - Overtime",
      "description": "Overtime requests and approvals"
    },
    {
      "name": "Time - Shifts",
      "description": "Shift templates and scheduling"
    },
    {
      "name": "Performance - Reviews",
      "description": "Performance review management"
    },
    {
      "name": "Performance - Goals",
      "description": "Goal setting and tracking"
    },
    {
      "name": "Performance - Feedback",
      "description": "Continuous feedback and check-ins"
    },
    {
      "name": "Performance - 360 Feedback",
      "description": "Multi-rater feedback processes"
    },
    {
      "name": "Performance - Improvement Plans",
      "description": "Performance improvement plans (PIPs)"
    },
    {
      "name": "Performance - Cycles",
      "description": "Review cycles and periods"
    },
    {
      "name": "Training - Courses",
      "description": "Training course catalog and enrollment"
    },
    {
      "name": "Training - Skills",
      "description": "Skills tracking and development"
    },
    {
      "name": "Compensation - Pay Elements",
      "description": "Compensation components and structures"
    },
    {
      "name": "Compensation - Pay Assignments",
      "description": "Employee compensation setup"
    },
    {
      "name": "Compensation - Rate Groups",
      "description": "Rate structures and categories"
    },
    {
      "name": "Compensation - Rate Entries",
      "description": "Detailed rate configurations"
    },
    {
      "name": "Payroll - Pay Schedules",
      "description": "Payment schedules and frequencies"
    },
    {
      "name": "Payroll - Pay Runs",
      "description": "Payroll processing and calculations"
    },
    {
      "name": "Payroll - Payslips",
      "description": "Payslip generation and distribution"
    },
    {
      "name": "Compliance - Templates",
      "description": "Compliance templates and frameworks"
    },
    {
      "name": "Compliance - Inspections",
      "description": "Compliance inspections and audits"
    },
    {
      "name": "Compliance - Evidence Packages",
      "description": "Evidence packaging and submission"
    },
    {
      "name": "Compliance - Evidence Timeline",
      "description": "Evidence timeline and tracking"
    },
    {
      "name": "Workplace - Safety",
      "description": "Workplace safety inspections and records"
    },
    {
      "name": "Workplace - Risk Assessment",
      "description": "Risk assessments and mitigation"
    },
    {
      "name": "Workplace - Insurance",
      "description": "Insurance policies and coverage"
    },
    {
      "name": "Workplace - Accidents",
      "description": "Accident reporting and investigation"
    },
    {
      "name": "Workplace - Certificates",
      "description": "Certificates, licenses, and qualifications"
    },
    {
      "name": "Workplace - Training Compliance",
      "description": "Mandatory workplace training"
    },
    {
      "name": "Workplace - Reminders",
      "description": "Compliance reminders and notifications"
    },
    {
      "name": "Workplace - Dashboard",
      "description": "Workplace compliance overview"
    },
    {
      "name": "ESS - Employee Profile",
      "description": "Employee self-service profile management"
    },
    {
      "name": "ESS - Documents",
      "description": "Personal document management"
    },
    {
      "name": "ESS - Leave Requests",
      "description": "Self-service leave applications"
    },
    {
      "name": "ESS - Payslips",
      "description": "View and download payslips"
    },
    {
      "name": "Cases - Management",
      "description": "HR case tracking and resolution"
    },
    {
      "name": "Cases - Categories",
      "description": "Case categorization and types"
    },
    {
      "name": "Cases - Activities",
      "description": "Case activities and updates"
    },
    {
      "name": "Analytics - Reports",
      "description": "HR reports and analytics"
    },
    {
      "name": "Analytics - Dashboards",
      "description": "Interactive dashboards and visualizations"
    },
    {
      "name": "Analytics - Templates",
      "description": "Report templates and configurations"
    },
    {
      "name": "Analytics - Instances",
      "description": "Report generation and scheduling"
    },
    {
      "name": "Notifications - Queue",
      "description": "Notification queue and delivery"
    },
    {
      "name": "Notifications - Templates",
      "description": "Notification templates and settings"
    },
    {
      "name": "Admin - Configuration",
      "description": "System configuration and settings"
    },
    {
      "name": "Admin - Audit",
      "description": "Audit logs and compliance tracking"
    },
    {
      "name": "System - Health",
      "description": "System health checks and monitoring"
    }
  ],
  "servers": [
    {
      "url": "http://0.0.0.0:4030",
      "description": "Development Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "JWT-auth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Enter JWT token",
        "in": "header"
      }
    },
    "schemas": {
      "AuditLogResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "user_email": {
            "type": "string"
          },
          "action": {
            "type": "string",
            "enum": [
              "CREATE",
              "UPDATE",
              "DELETE",
              "VIEW",
              "EXPORT",
              "LOGIN",
              "LOGOUT",
              "APPROVE",
              "REJECT",
              "ASSIGN",
              "UNASSIGN"
            ]
          },
          "resource_type": {
            "type": "string"
          },
          "resource_id": {
            "type": "string"
          },
          "resource_name": {
            "type": "string"
          },
          "old_values": {
            "type": "object"
          },
          "new_values": {
            "type": "object"
          },
          "changes": {
            "type": "object"
          },
          "metadata": {
            "type": "object"
          },
          "ip_address": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "session_id": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "error_message": {
            "type": "string"
          },
          "performed_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "user_id",
          "user_email",
          "action",
          "resource_type",
          "success",
          "performed_at"
        ]
      },
      "ReportSortDto": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "example": "created_at"
          },
          "order": {
            "type": "string",
            "example": "desc",
            "enum": [
              "asc",
              "desc"
            ]
          }
        },
        "required": [
          "field",
          "order"
        ]
      },
      "CompanyInfoDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "logo": {
            "type": "string",
            "example": "https://example.com/logo.png"
          },
          "address": {
            "type": "string",
            "example": "123 Business St, London, UK"
          },
          "registration_number": {
            "type": "string",
            "example": "12345678"
          },
          "vat_number": {
            "type": "string",
            "example": "GB123456789"
          }
        },
        "required": [
          "name"
        ]
      },
      "GenerateReportDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "employee_list",
            "enum": [
              "employee_list",
              "employee_detail",
              "payroll_summary",
              "payroll_detail",
              "leave_summary",
              "leave_balance",
              "attendance_report",
              "department_summary",
              "audit_log",
              "compliance_report",
              "performance_review",
              "headcount_report",
              "turnover_report",
              "training_report"
            ],
            "description": "Type of report to generate"
          },
          "format": {
            "type": "string",
            "example": "pdf",
            "enum": [
              "pdf",
              "excel",
              "csv",
              "json"
            ],
            "description": "Output format for the report"
          },
          "title": {
            "type": "string",
            "example": "Monthly Employee Report"
          },
          "description": {
            "type": "string",
            "example": "Employee report for December 2024"
          },
          "filters": {
            "type": "object",
            "example": {
              "department_id": "uuid",
              "status": "active"
            },
            "description": "Filters to apply to the report data"
          },
          "sort": {
            "$ref": "#/components/schemas/ReportSortDto"
          },
          "includeCharts": {
            "type": "boolean",
            "example": true
          },
          "includeSummary": {
            "type": "boolean",
            "example": true
          },
          "includeTimestamp": {
            "type": "boolean",
            "example": true
          },
          "companyInfo": {
            "$ref": "#/components/schemas/CompanyInfoDto"
          }
        },
        "required": [
          "type",
          "format"
        ]
      },
      "CreateReportScheduleDto": {
        "type": "object",
        "properties": {
          "report_type": {
            "type": "string",
            "example": "payroll_summary",
            "enum": [
              "employee_list",
              "employee_detail",
              "payroll_summary",
              "payroll_detail",
              "leave_summary",
              "leave_balance",
              "attendance_report",
              "department_summary",
              "audit_log",
              "compliance_report",
              "performance_review",
              "headcount_report",
              "turnover_report",
              "training_report"
            ]
          },
          "report_options": {
            "$ref": "#/components/schemas/GenerateReportDto"
          },
          "schedule": {
            "type": "string",
            "example": "0 9 * * MON",
            "description": "Cron expression for schedule"
          },
          "recipients": {
            "example": [
              "hr@example.com",
              "manager@example.com"
            ],
            "description": "Email addresses to send the report to",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "report_type",
          "report_options",
          "schedule",
          "recipients"
        ]
      },
      "UpdateReportScheduleDto": {
        "type": "object",
        "properties": {
          "report_options": {
            "$ref": "#/components/schemas/GenerateReportDto"
          },
          "schedule": {
            "type": "string",
            "example": "0 9 * * MON",
            "description": "Cron expression for schedule"
          },
          "recipients": {
            "example": [
              "hr@example.com"
            ],
            "description": "Email addresses to send the report to",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "CreateCompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company name",
            "example": "Acme Corporation Ltd"
          },
          "company_number": {
            "type": "string",
            "description": "Company registration number",
            "example": "12345678"
          },
          "company_type": {
            "type": "string",
            "description": "Company type",
            "enum": [
              "LIMITED",
              "PLC",
              "LLP",
              "SOLE_TRADER",
              "CHARITY"
            ],
            "default": "LIMITED"
          },
          "company_status": {
            "type": "string",
            "description": "Company status",
            "enum": [
              "ACTIVE",
              "DISSOLVED",
              "LIQUIDATION",
              "DORMANT"
            ],
            "default": "ACTIVE"
          },
          "incorporation_date": {
            "type": "string",
            "description": "Incorporation date",
            "example": "2020-01-01"
          },
          "registered_office_address": {
            "type": "string",
            "description": "Registered office address"
          },
          "company_director": {
            "type": "string",
            "description": "Company director name"
          },
          "company_secretary": {
            "type": "string",
            "description": "Company secretary name"
          },
          "shareholders": {
            "type": "object",
            "description": "Shareholders information as JSON"
          },
          "utr_number": {
            "type": "string",
            "description": "UTR number"
          },
          "vat_number": {
            "type": "string",
            "description": "VAT number"
          },
          "paye_reference": {
            "type": "string",
            "description": "PAYE reference"
          },
          "account_office_reference": {
            "type": "string",
            "description": "Account office reference"
          },
          "sic_code": {
            "type": "string",
            "description": "SIC code"
          },
          "website": {
            "type": "string",
            "description": "Company website URL"
          },
          "email": {
            "type": "string",
            "description": "Company email address"
          },
          "phone": {
            "type": "string",
            "description": "Company phone number"
          }
        },
        "required": [
          "name",
          "company_number"
        ]
      },
      "CompanyResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Company ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "name": {
            "type": "string",
            "description": "Company name"
          },
          "company_number": {
            "type": "string",
            "description": "Company registration number"
          },
          "company_type": {
            "type": "string",
            "description": "Company type",
            "enum": [
              "LIMITED",
              "PLC",
              "LLP",
              "SOLE_TRADER",
              "CHARITY"
            ]
          },
          "company_status": {
            "type": "string",
            "description": "Company status",
            "enum": [
              "ACTIVE",
              "DISSOLVED",
              "LIQUIDATION",
              "DORMANT"
            ]
          },
          "incorporation_date": {
            "type": "object",
            "description": "Incorporation date"
          },
          "registered_office_address": {
            "type": "object",
            "description": "Registered office address"
          },
          "company_director": {
            "type": "object",
            "description": "Company director name"
          },
          "company_secretary": {
            "type": "object",
            "description": "Company secretary name"
          },
          "shareholders": {
            "type": "object",
            "description": "Shareholders information"
          },
          "utr_number": {
            "type": "object",
            "description": "UTR number"
          },
          "vat_number": {
            "type": "object",
            "description": "VAT number"
          },
          "paye_reference": {
            "type": "object",
            "description": "PAYE reference"
          },
          "account_office_reference": {
            "type": "object",
            "description": "Account office reference"
          },
          "sic_code": {
            "type": "object",
            "description": "SIC code"
          },
          "website": {
            "type": "object",
            "description": "Company website URL"
          },
          "email": {
            "type": "object",
            "description": "Company email address"
          },
          "phone": {
            "type": "object",
            "description": "Company phone number"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "company_number",
          "company_type",
          "company_status",
          "updated_at",
          "created_at"
        ]
      },
      "PaginatedCompanyResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of companies",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateCompanyDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Company name"
          },
          "company_type": {
            "type": "string",
            "description": "Company type",
            "enum": [
              "LIMITED",
              "PLC",
              "LLP",
              "SOLE_TRADER",
              "CHARITY"
            ]
          },
          "company_status": {
            "type": "string",
            "description": "Company status",
            "enum": [
              "ACTIVE",
              "DISSOLVED",
              "LIQUIDATION",
              "DORMANT"
            ]
          },
          "incorporation_date": {
            "type": "string",
            "description": "Incorporation date"
          },
          "registered_office_address": {
            "type": "string",
            "description": "Registered office address"
          },
          "company_director": {
            "type": "string",
            "description": "Company director name"
          },
          "company_secretary": {
            "type": "string",
            "description": "Company secretary name"
          },
          "shareholders": {
            "type": "object",
            "description": "Shareholders information as JSON"
          },
          "utr_number": {
            "type": "string",
            "description": "UTR number"
          },
          "vat_number": {
            "type": "string",
            "description": "VAT number"
          },
          "paye_reference": {
            "type": "string",
            "description": "PAYE reference"
          },
          "account_office_reference": {
            "type": "string",
            "description": "Account office reference"
          },
          "sic_code": {
            "type": "string",
            "description": "SIC code"
          },
          "website": {
            "type": "string",
            "description": "Company website URL"
          },
          "email": {
            "type": "string",
            "description": "Company email address"
          },
          "phone": {
            "type": "string",
            "description": "Company phone number"
          }
        }
      },
      "CreateDepartmentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Department name",
            "example": "Software Development"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "department_function": {
            "type": "string",
            "description": "Department function",
            "enum": [
              "EXECUTIVE_MANAGEMENT",
              "HR",
              "FINANCE",
              "ACCOUNTING",
              "PAYROLL",
              "LEGAL",
              "COMPLIANCE",
              "RISK_MANAGEMENT",
              "SALES",
              "BUSINESS_DEVELOPMENT",
              "MARKETING",
              "DIGITAL_MARKETING",
              "PRODUCT_MANAGEMENT",
              "OPERATIONS",
              "CUSTOMER_SUPPORT",
              "CUSTOMER_SUCCESS",
              "PUBLIC_RELATIONS",
              "R_D",
              "IT",
              "SOFTWARE_DEVELOPMENT",
              "DATA_SCIENCE",
              "CYBERSECURITY",
              "TECHNICAL_SUPPORT",
              "PROCUREMENT",
              "SUPPLY_CHAIN_MANAGEMENT",
              "LOGISTICS",
              "WAREHOUSE",
              "MANUFACTURING",
              "QUALITY_ASSURANCE",
              "HEALTH_AND_SAFETY",
              "FACILITIES_MANAGEMENT",
              "TRAINING_AND_DEVELOPMENT",
              "CORPORATE_STRATEGY",
              "INVESTOR_RELATIONS",
              "CORPORATE_SOCIAL_RESPONSIBILITY",
              "OTHER"
            ],
            "example": "SOFTWARE_DEVELOPMENT"
          },
          "head_of_department_id": {
            "type": "string",
            "description": "Head of department employee ID",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parent_department_id": {
            "type": "string",
            "description": "Parent department ID",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "name",
          "company_id",
          "department_function"
        ]
      },
      "DepartmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Department ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "name": {
            "type": "string",
            "description": "Department name"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID"
          },
          "department_function": {
            "type": "string",
            "description": "Department function",
            "enum": [
              "EXECUTIVE_MANAGEMENT",
              "HR",
              "FINANCE",
              "ACCOUNTING",
              "PAYROLL",
              "LEGAL",
              "COMPLIANCE",
              "RISK_MANAGEMENT",
              "SALES",
              "BUSINESS_DEVELOPMENT",
              "MARKETING",
              "DIGITAL_MARKETING",
              "PRODUCT_MANAGEMENT",
              "OPERATIONS",
              "CUSTOMER_SUPPORT",
              "CUSTOMER_SUCCESS",
              "PUBLIC_RELATIONS",
              "R_D",
              "IT",
              "SOFTWARE_DEVELOPMENT",
              "DATA_SCIENCE",
              "CYBERSECURITY",
              "TECHNICAL_SUPPORT",
              "PROCUREMENT",
              "SUPPLY_CHAIN_MANAGEMENT",
              "LOGISTICS",
              "WAREHOUSE",
              "MANUFACTURING",
              "QUALITY_ASSURANCE",
              "HEALTH_AND_SAFETY",
              "FACILITIES_MANAGEMENT",
              "TRAINING_AND_DEVELOPMENT",
              "CORPORATE_STRATEGY",
              "INVESTOR_RELATIONS",
              "CORPORATE_SOCIAL_RESPONSIBILITY",
              "OTHER"
            ]
          },
          "head_of_department_id": {
            "type": "object",
            "description": "Head of department employee ID"
          },
          "parent_department_id": {
            "type": "object",
            "description": "Parent department ID"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "company_id",
          "department_function",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedDepartmentResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of departments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepartmentResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "DepartmentWithRelationsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Department ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "name": {
            "type": "string",
            "description": "Department name"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID"
          },
          "department_function": {
            "type": "string",
            "description": "Department function",
            "enum": [
              "EXECUTIVE_MANAGEMENT",
              "HR",
              "FINANCE",
              "ACCOUNTING",
              "PAYROLL",
              "LEGAL",
              "COMPLIANCE",
              "RISK_MANAGEMENT",
              "SALES",
              "BUSINESS_DEVELOPMENT",
              "MARKETING",
              "DIGITAL_MARKETING",
              "PRODUCT_MANAGEMENT",
              "OPERATIONS",
              "CUSTOMER_SUPPORT",
              "CUSTOMER_SUCCESS",
              "PUBLIC_RELATIONS",
              "R_D",
              "IT",
              "SOFTWARE_DEVELOPMENT",
              "DATA_SCIENCE",
              "CYBERSECURITY",
              "TECHNICAL_SUPPORT",
              "PROCUREMENT",
              "SUPPLY_CHAIN_MANAGEMENT",
              "LOGISTICS",
              "WAREHOUSE",
              "MANUFACTURING",
              "QUALITY_ASSURANCE",
              "HEALTH_AND_SAFETY",
              "FACILITIES_MANAGEMENT",
              "TRAINING_AND_DEVELOPMENT",
              "CORPORATE_STRATEGY",
              "INVESTOR_RELATIONS",
              "CORPORATE_SOCIAL_RESPONSIBILITY",
              "OTHER"
            ]
          },
          "head_of_department_id": {
            "type": "object",
            "description": "Head of department employee ID"
          },
          "parent_department_id": {
            "type": "object",
            "description": "Parent department ID"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "company": {
            "type": "object",
            "description": "Company information"
          },
          "head_of_department": {
            "type": "object",
            "description": "Head of department employee information"
          },
          "parent_department": {
            "type": "object",
            "description": "Parent department information"
          },
          "sub_departments": {
            "description": "Sub-departments",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assignments_count": {
            "type": "number",
            "description": "Current assignments count"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "company_id",
          "department_function",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateDepartmentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Department name",
            "example": "Software Development"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "department_function": {
            "type": "string",
            "description": "Department function",
            "enum": [
              "EXECUTIVE_MANAGEMENT",
              "HR",
              "FINANCE",
              "ACCOUNTING",
              "PAYROLL",
              "LEGAL",
              "COMPLIANCE",
              "RISK_MANAGEMENT",
              "SALES",
              "BUSINESS_DEVELOPMENT",
              "MARKETING",
              "DIGITAL_MARKETING",
              "PRODUCT_MANAGEMENT",
              "OPERATIONS",
              "CUSTOMER_SUPPORT",
              "CUSTOMER_SUCCESS",
              "PUBLIC_RELATIONS",
              "R_D",
              "IT",
              "SOFTWARE_DEVELOPMENT",
              "DATA_SCIENCE",
              "CYBERSECURITY",
              "TECHNICAL_SUPPORT",
              "PROCUREMENT",
              "SUPPLY_CHAIN_MANAGEMENT",
              "LOGISTICS",
              "WAREHOUSE",
              "MANUFACTURING",
              "QUALITY_ASSURANCE",
              "HEALTH_AND_SAFETY",
              "FACILITIES_MANAGEMENT",
              "TRAINING_AND_DEVELOPMENT",
              "CORPORATE_STRATEGY",
              "INVESTOR_RELATIONS",
              "CORPORATE_SOCIAL_RESPONSIBILITY",
              "OTHER"
            ],
            "example": "SOFTWARE_DEVELOPMENT"
          },
          "head_of_department_id": {
            "type": "string",
            "description": "Head of department employee ID",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "parent_department_id": {
            "type": "string",
            "description": "Parent department ID",
            "format": "uuid",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        }
      },
      "CreateJobDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Job title"
          },
          "soc_2020_code": {
            "type": "string",
            "description": "SOC 2020 code"
          },
          "employment_type": {
            "type": "string",
            "description": "Employment type",
            "enum": [
              "PERMANENT",
              "TEMPORARY",
              "CONTRACT",
              "INTERNSHIP",
              "PART_TIME",
              "ZERO_HOUR",
              "OTHER"
            ],
            "default": "PERMANENT"
          },
          "job_level": {
            "type": "string",
            "description": "Job level",
            "enum": [
              "ENTRY",
              "JUNIOR",
              "MID",
              "SENIOR",
              "LEAD",
              "MANAGER",
              "DIRECTOR",
              "EXECUTIVE",
              "OTHER"
            ],
            "default": "ENTRY"
          },
          "salary_grade": {
            "type": "string",
            "description": "Salary grade"
          },
          "minimum_salary": {
            "type": "number",
            "description": "Minimum salary",
            "example": 30000,
            "minimum": 0
          },
          "maximum_salary": {
            "type": "number",
            "description": "Maximum salary",
            "example": 60000,
            "minimum": 0
          },
          "salary_currency": {
            "type": "string",
            "description": "Salary currency",
            "default": "GBP"
          },
          "pay_frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ],
            "default": "MONTHLY"
          },
          "work_pattern": {
            "type": "string",
            "description": "Work pattern",
            "enum": [
              "FULL_TIME",
              "PART_TIME",
              "FLEXIBLE",
              "OTHER"
            ],
            "default": "FULL_TIME"
          },
          "work_location": {
            "type": "string",
            "description": "Work location",
            "enum": [
              "ON_SITE",
              "REMOTE",
              "HYBRID",
              "OTHER"
            ],
            "default": "ON_SITE"
          },
          "weekly_hours": {
            "type": "number",
            "description": "Weekly hours",
            "example": 37.5,
            "default": 37.5,
            "minimum": 0
          },
          "job_description": {
            "type": "string",
            "description": "Job description"
          },
          "job_responsibilities": {
            "type": "string",
            "description": "Job responsibilities"
          },
          "job_requirements": {
            "type": "string",
            "description": "Job requirements"
          },
          "job_benefits": {
            "type": "string",
            "description": "Job benefits"
          },
          "job_status": {
            "type": "string",
            "description": "Job status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "FROZEN",
              "DISCONTINUED"
            ],
            "default": "ACTIVE"
          }
        },
        "required": [
          "company_id",
          "name"
        ]
      },
      "JobResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Job ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID"
          },
          "name": {
            "type": "string",
            "description": "Job title"
          },
          "soc_2020_code": {
            "type": "object",
            "description": "SOC 2020 code"
          },
          "employment_type": {
            "type": "string",
            "description": "Employment type",
            "enum": [
              "PERMANENT",
              "TEMPORARY",
              "CONTRACT",
              "INTERNSHIP",
              "PART_TIME",
              "ZERO_HOUR",
              "OTHER"
            ]
          },
          "job_level": {
            "type": "string",
            "description": "Job level",
            "enum": [
              "ENTRY",
              "JUNIOR",
              "MID",
              "SENIOR",
              "LEAD",
              "MANAGER",
              "DIRECTOR",
              "EXECUTIVE",
              "OTHER"
            ]
          },
          "salary_grade": {
            "type": "object",
            "description": "Salary grade"
          },
          "minimum_salary": {
            "type": "object",
            "description": "Minimum salary"
          },
          "maximum_salary": {
            "type": "object",
            "description": "Maximum salary"
          },
          "salary_currency": {
            "type": "object",
            "description": "Salary currency"
          },
          "pay_frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ]
          },
          "work_pattern": {
            "type": "string",
            "description": "Work pattern",
            "enum": [
              "FULL_TIME",
              "PART_TIME",
              "FLEXIBLE",
              "OTHER"
            ]
          },
          "work_location": {
            "type": "string",
            "description": "Work location",
            "enum": [
              "ON_SITE",
              "REMOTE",
              "HYBRID",
              "OTHER"
            ]
          },
          "weekly_hours": {
            "type": "object",
            "description": "Weekly hours"
          },
          "job_description": {
            "type": "object",
            "description": "Job description"
          },
          "job_responsibilities": {
            "type": "object",
            "description": "Job responsibilities"
          },
          "job_requirements": {
            "type": "object",
            "description": "Job requirements"
          },
          "job_benefits": {
            "type": "object",
            "description": "Job benefits"
          },
          "job_status": {
            "type": "string",
            "description": "Job status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "FROZEN",
              "DISCONTINUED"
            ]
          }
        },
        "required": [
          "id",
          "tenant_id",
          "company_id",
          "name",
          "employment_type",
          "job_level",
          "pay_frequency",
          "work_pattern",
          "work_location",
          "job_status"
        ]
      },
      "PaginatedJobResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of jobs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateJobDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Job title"
          },
          "soc_2020_code": {
            "type": "string",
            "description": "SOC 2020 code"
          },
          "employment_type": {
            "type": "string",
            "description": "Employment type",
            "enum": [
              "PERMANENT",
              "TEMPORARY",
              "CONTRACT",
              "INTERNSHIP",
              "PART_TIME",
              "ZERO_HOUR",
              "OTHER"
            ],
            "default": "PERMANENT"
          },
          "job_level": {
            "type": "string",
            "description": "Job level",
            "enum": [
              "ENTRY",
              "JUNIOR",
              "MID",
              "SENIOR",
              "LEAD",
              "MANAGER",
              "DIRECTOR",
              "EXECUTIVE",
              "OTHER"
            ],
            "default": "ENTRY"
          },
          "salary_grade": {
            "type": "string",
            "description": "Salary grade"
          },
          "minimum_salary": {
            "type": "number",
            "description": "Minimum salary",
            "example": 30000,
            "minimum": 0
          },
          "maximum_salary": {
            "type": "number",
            "description": "Maximum salary",
            "example": 60000,
            "minimum": 0
          },
          "salary_currency": {
            "type": "string",
            "description": "Salary currency",
            "default": "GBP"
          },
          "pay_frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ],
            "default": "MONTHLY"
          },
          "work_pattern": {
            "type": "string",
            "description": "Work pattern",
            "enum": [
              "FULL_TIME",
              "PART_TIME",
              "FLEXIBLE",
              "OTHER"
            ],
            "default": "FULL_TIME"
          },
          "work_location": {
            "type": "string",
            "description": "Work location",
            "enum": [
              "ON_SITE",
              "REMOTE",
              "HYBRID",
              "OTHER"
            ],
            "default": "ON_SITE"
          },
          "weekly_hours": {
            "type": "number",
            "description": "Weekly hours",
            "example": 37.5,
            "default": 37.5,
            "minimum": 0
          },
          "job_description": {
            "type": "string",
            "description": "Job description"
          },
          "job_responsibilities": {
            "type": "string",
            "description": "Job responsibilities"
          },
          "job_requirements": {
            "type": "string",
            "description": "Job requirements"
          },
          "job_benefits": {
            "type": "string",
            "description": "Job benefits"
          },
          "job_status": {
            "type": "string",
            "description": "Job status",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "FROZEN",
              "DISCONTINUED"
            ],
            "default": "ACTIVE"
          }
        }
      },
      "CreateEmployeeDto": {
        "type": "object",
        "properties": {
          "employee_no": {
            "type": "string",
            "description": "Employee number",
            "example": "EMP001"
          },
          "first_name": {
            "type": "string",
            "description": "First name"
          },
          "last_name": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "national_insurance_no": {
            "type": "string",
            "description": "National Insurance number",
            "example": "AB123456C"
          },
          "address": {
            "type": "string",
            "description": "Address"
          },
          "hire_date": {
            "type": "string",
            "description": "Hire date",
            "example": "2024-01-01"
          },
          "title": {
            "type": "string",
            "description": "Title (Mr/Mrs/Dr/etc)"
          },
          "preferred_name": {
            "type": "string",
            "description": "Preferred name"
          },
          "avatar": {
            "type": "string",
            "description": "Avatar URL"
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "example": "07912345678"
          },
          "dob": {
            "type": "string",
            "description": "Date of birth",
            "example": "1990-01-01"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "OTHER",
              "PREFER_NOT_TO_SAY"
            ]
          },
          "right_to_work_status": {
            "type": "string",
            "enum": [
              "VERIFIED",
              "PENDING",
              "EXPIRED",
              "FAILED",
              "NOT_PROVIDED"
            ]
          },
          "employment_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PROBATION",
              "LEAVE_PAID",
              "LEAVE_UNPAID",
              "SUSPENDED",
              "NOTICE_PERIOD",
              "RESIGNED",
              "TERMINATED",
              "RETIRED",
              "CONTRACT_ENDED",
              "INACTIVE"
            ],
            "default": "ACTIVE"
          },
          "contract_type": {
            "type": "string",
            "enum": [
              "PERMANENT",
              "FIXED_TERM",
              "ZERO_HOURS",
              "APPRENTICE",
              "CONTRACTOR"
            ]
          },
          "contract_start_date": {
            "type": "string",
            "description": "Contract start date"
          },
          "contract_end_date": {
            "type": "string",
            "description": "Contract end date"
          },
          "working_hours": {
            "type": "number",
            "description": "Working hours per week",
            "example": 37.5
          },
          "salary_type": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "MONTHLY",
              "WEEKLY",
              "BIWEEKLY",
              "DAILY",
              "HOURLY",
              "COMMISSION",
              "PROJECT_BASED"
            ]
          },
          "salary_amount": {
            "type": "number",
            "description": "Salary amount",
            "example": 50000
          },
          "tax_code": {
            "type": "string",
            "description": "Tax code",
            "example": "1257L"
          },
          "nic_table_letter": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "C",
              "H",
              "J",
              "M",
              "Z"
            ],
            "default": "A"
          },
          "user_id": {
            "type": "string",
            "description": "User ID from auth system",
            "format": "uuid"
          }
        },
        "required": [
          "employee_no",
          "first_name",
          "last_name",
          "email",
          "national_insurance_no",
          "address",
          "hire_date"
        ]
      },
      "EmployeeResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Employee ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_no": {
            "type": "string",
            "description": "Employee number"
          },
          "title": {
            "type": "object",
            "description": "Title"
          },
          "first_name": {
            "type": "string",
            "description": "First name"
          },
          "preferred_name": {
            "type": "object",
            "description": "Preferred name"
          },
          "last_name": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "avatar": {
            "type": "object",
            "description": "Avatar URL"
          },
          "phone": {
            "type": "object",
            "description": "Phone number"
          },
          "dob": {
            "type": "object",
            "description": "Date of birth"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "OTHER",
              "PREFER_NOT_TO_SAY"
            ]
          },
          "national_insurance_no": {
            "type": "string",
            "description": "National Insurance number"
          },
          "right_to_work_status": {
            "type": "string",
            "enum": [
              "VERIFIED",
              "PENDING",
              "EXPIRED",
              "FAILED",
              "NOT_PROVIDED"
            ]
          },
          "address": {
            "type": "string",
            "description": "Address"
          },
          "hire_date": {
            "format": "date-time",
            "type": "string",
            "description": "Hire date"
          },
          "termination_date": {
            "type": "object",
            "description": "Termination date"
          },
          "employment_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PROBATION",
              "LEAVE_PAID",
              "LEAVE_UNPAID",
              "SUSPENDED",
              "NOTICE_PERIOD",
              "RESIGNED",
              "TERMINATED",
              "RETIRED",
              "CONTRACT_ENDED",
              "INACTIVE"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_no",
          "first_name",
          "last_name",
          "email",
          "national_insurance_no",
          "address",
          "hire_date",
          "employment_status",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedEmployeeResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of employees",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "EmployeeDetailResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Employee ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_no": {
            "type": "string",
            "description": "Employee number"
          },
          "title": {
            "type": "object",
            "description": "Title"
          },
          "first_name": {
            "type": "string",
            "description": "First name"
          },
          "preferred_name": {
            "type": "object",
            "description": "Preferred name"
          },
          "last_name": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "avatar": {
            "type": "object",
            "description": "Avatar URL"
          },
          "phone": {
            "type": "object",
            "description": "Phone number"
          },
          "dob": {
            "type": "object",
            "description": "Date of birth"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "OTHER",
              "PREFER_NOT_TO_SAY"
            ]
          },
          "national_insurance_no": {
            "type": "string",
            "description": "National Insurance number"
          },
          "right_to_work_status": {
            "type": "string",
            "enum": [
              "VERIFIED",
              "PENDING",
              "EXPIRED",
              "FAILED",
              "NOT_PROVIDED"
            ]
          },
          "address": {
            "type": "string",
            "description": "Address"
          },
          "hire_date": {
            "format": "date-time",
            "type": "string",
            "description": "Hire date"
          },
          "termination_date": {
            "type": "object",
            "description": "Termination date"
          },
          "employment_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PROBATION",
              "LEAVE_PAID",
              "LEAVE_UNPAID",
              "SUSPENDED",
              "NOTICE_PERIOD",
              "RESIGNED",
              "TERMINATED",
              "RETIRED",
              "CONTRACT_ENDED",
              "INACTIVE"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "contract_type": {
            "type": "string",
            "enum": [
              "PERMANENT",
              "FIXED_TERM",
              "ZERO_HOURS",
              "APPRENTICE",
              "CONTRACTOR"
            ]
          },
          "contract_start_date": {
            "type": "object",
            "description": "Contract start date"
          },
          "contract_end_date": {
            "type": "object",
            "description": "Contract end date"
          },
          "working_hours": {
            "type": "object",
            "description": "Working hours per week"
          },
          "salary_type": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "MONTHLY",
              "WEEKLY",
              "BIWEEKLY",
              "DAILY",
              "HOURLY",
              "COMMISSION",
              "PROJECT_BASED"
            ]
          },
          "salary_amount": {
            "type": "object",
            "description": "Salary amount"
          },
          "tax_code": {
            "type": "object",
            "description": "Tax code"
          },
          "nic_table_letter": {
            "type": "string",
            "enum": [
              "A",
              "B",
              "C",
              "H",
              "J",
              "M",
              "Z"
            ]
          },
          "assignments": {
            "description": "Current assignments",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "manage_departments": {
            "description": "Departments managed by this employee",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_no",
          "first_name",
          "last_name",
          "email",
          "national_insurance_no",
          "address",
          "hire_date",
          "employment_status",
          "created_at",
          "updated_at",
          "nic_table_letter"
        ]
      },
      "UpdateEmployeeDto": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First name"
          },
          "last_name": {
            "type": "string",
            "description": "Last name"
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "example": "07912345678"
          },
          "address": {
            "type": "string",
            "description": "Address"
          },
          "employment_status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "PROBATION",
              "LEAVE_PAID",
              "LEAVE_UNPAID",
              "SUSPENDED",
              "NOTICE_PERIOD",
              "RESIGNED",
              "TERMINATED",
              "RETIRED",
              "CONTRACT_ENDED",
              "INACTIVE"
            ]
          },
          "termination_date": {
            "type": "string",
            "description": "Termination date"
          },
          "contract_type": {
            "type": "string",
            "enum": [
              "PERMANENT",
              "FIXED_TERM",
              "ZERO_HOURS",
              "APPRENTICE",
              "CONTRACTOR"
            ]
          },
          "contract_end_date": {
            "type": "string",
            "description": "Contract end date"
          },
          "working_hours": {
            "type": "string",
            "description": "Working hours per week",
            "example": 37.5
          },
          "salary_amount": {
            "type": "string",
            "description": "Salary amount"
          },
          "tax_code": {
            "type": "string",
            "description": "Tax code"
          }
        }
      },
      "CreateAssignmentDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "format": "uuid"
          },
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "format": "uuid"
          },
          "department_id": {
            "type": "string",
            "description": "Department ID",
            "format": "uuid"
          },
          "start_date": {
            "type": "string",
            "description": "Assignment start date",
            "example": "2024-01-01"
          },
          "end_date": {
            "type": "string",
            "description": "Assignment end date",
            "example": "2024-12-31"
          }
        },
        "required": [
          "employee_id",
          "job_id",
          "department_id",
          "start_date"
        ]
      },
      "AssignmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assignment ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "job_id": {
            "type": "string",
            "description": "Job ID"
          },
          "department_id": {
            "type": "string",
            "description": "Department ID"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Assignment start date"
          },
          "end_date": {
            "type": "object",
            "description": "Assignment end date"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "job_id",
          "department_id",
          "start_date",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedAssignmentResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of assignments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssignmentResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "AssignmentWithRelationsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assignment ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "job_id": {
            "type": "string",
            "description": "Job ID"
          },
          "department_id": {
            "type": "string",
            "description": "Department ID"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Assignment start date"
          },
          "end_date": {
            "type": "object",
            "description": "Assignment end date"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee details"
          },
          "job": {
            "type": "object",
            "description": "Job details"
          },
          "department": {
            "type": "object",
            "description": "Department details"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "job_id",
          "department_id",
          "start_date",
          "created_at",
          "updated_at",
          "employee",
          "job",
          "department"
        ]
      },
      "UpdateAssignmentDto": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "description": "Job ID",
            "format": "uuid"
          },
          "department_id": {
            "type": "string",
            "description": "Department ID",
            "format": "uuid"
          },
          "end_date": {
            "type": "string",
            "description": "Assignment end date",
            "example": "2024-12-31"
          }
        }
      },
      "CreateRateGroupDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Rate group code"
          },
          "title": {
            "type": "string",
            "description": "Rate group title"
          },
          "category": {
            "type": "string",
            "enum": [
              "NMW",
              "SSP",
              "SMP",
              "SPP",
              "ShPP",
              "SPBP",
              "TAX_BAND",
              "NI_THRESHOLD",
              "NI_RATE",
              "PENSION_AE",
              "LEVY",
              "HOLIDAY_DAYS",
              "WORKING_TIME_MAX"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ]
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ],
            "default": "UK"
          }
        },
        "required": [
          "code",
          "title",
          "category",
          "unit"
        ]
      },
      "RateGroupResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rate group ID"
          },
          "code": {
            "type": "string",
            "description": "Rate group code"
          },
          "title": {
            "type": "string",
            "description": "Rate group title"
          },
          "category": {
            "type": "string",
            "enum": [
              "NMW",
              "SSP",
              "SMP",
              "SPP",
              "ShPP",
              "SPBP",
              "TAX_BAND",
              "NI_THRESHOLD",
              "NI_RATE",
              "PENSION_AE",
              "LEVY",
              "HOLIDAY_DAYS",
              "WORKING_TIME_MAX"
            ]
          },
          "description": {
            "type": "object",
            "description": "Description"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ]
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          }
        },
        "required": [
          "id",
          "code",
          "title",
          "category",
          "unit",
          "jurisdiction",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateRateGroupDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Rate group title"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ]
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ]
          }
        }
      },
      "CreateRateEntryDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Rate Group ID",
            "format": "uuid"
          },
          "startsAt": {
            "type": "string",
            "description": "Effective start date",
            "example": "2024-01-01"
          },
          "endsAt": {
            "type": "string",
            "description": "Effective end date",
            "example": "2024-12-31"
          },
          "params": {
            "type": "object",
            "description": "Flexible dimension parameters (JSON)",
            "example": "{\"ageBand\":\"21-22\",\"taxYear\":\"2025/26\"}"
          },
          "valueDecimal": {
            "type": "string",
            "description": "Rate value (decimal)",
            "example": "10.42"
          },
          "valueText": {
            "type": "string",
            "description": "Rate value (text)",
            "example": "90% of AWE"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation",
            "example": "NMW Act 1998 – s.1"
          },
          "url": {
            "type": "string",
            "description": "Reference URL",
            "example": "https://gov.uk/national-minimum-wage"
          }
        },
        "required": [
          "groupId",
          "startsAt",
          "citation",
          "url"
        ]
      },
      "RateEntryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rate Entry ID"
          },
          "groupId": {
            "type": "string",
            "description": "Rate Group ID"
          },
          "startsAt": {
            "format": "date-time",
            "type": "string",
            "description": "Effective start date"
          },
          "endsAt": {
            "type": "object",
            "description": "Effective end date"
          },
          "params": {
            "type": "object",
            "description": "Flexible dimension parameters (JSON)"
          },
          "valueDecimal": {
            "type": "object",
            "description": "Rate value (decimal)"
          },
          "valueText": {
            "type": "object",
            "description": "Rate value (text)"
          },
          "notes": {
            "type": "object",
            "description": "Additional notes"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation"
          },
          "url": {
            "type": "string",
            "description": "Reference URL"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          }
        },
        "required": [
          "id",
          "groupId",
          "startsAt",
          "citation",
          "url",
          "created_at"
        ]
      },
      "Object": {
        "type": "object",
        "properties": {}
      },
      "RateEntryWithGroupDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rate Entry ID"
          },
          "groupId": {
            "type": "string",
            "description": "Rate Group ID"
          },
          "startsAt": {
            "format": "date-time",
            "type": "string",
            "description": "Effective start date"
          },
          "endsAt": {
            "type": "object",
            "description": "Effective end date"
          },
          "params": {
            "type": "object",
            "description": "Flexible dimension parameters (JSON)"
          },
          "valueDecimal": {
            "type": "object",
            "description": "Rate value (decimal)"
          },
          "valueText": {
            "type": "object",
            "description": "Rate value (text)"
          },
          "notes": {
            "type": "object",
            "description": "Additional notes"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation"
          },
          "url": {
            "type": "string",
            "description": "Reference URL"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "group": {
            "type": "object",
            "description": "Rate Group details"
          }
        },
        "required": [
          "id",
          "groupId",
          "startsAt",
          "citation",
          "url",
          "created_at",
          "group"
        ]
      },
      "UpdateRateEntryDto": {
        "type": "object",
        "properties": {
          "endsAt": {
            "type": "string",
            "description": "Effective end date",
            "example": "2024-12-31"
          },
          "params": {
            "type": "object",
            "description": "Flexible dimension parameters (JSON)",
            "example": "{\"ageBand\":\"21-22\",\"taxYear\":\"2025/26\"}"
          },
          "valueDecimal": {
            "type": "string",
            "description": "Rate value (decimal)",
            "example": "10.42"
          },
          "valueText": {
            "type": "string",
            "description": "Rate value (text)",
            "example": "90% of AWE"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation"
          },
          "url": {
            "type": "string",
            "description": "Reference URL"
          }
        }
      },
      "CreateShiftTemplateDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Template name",
            "example": "Early Shift",
            "minLength": 1,
            "maxLength": 255
          },
          "start_minutes": {
            "type": "number",
            "description": "Shift start time as minutes from 00:00",
            "example": 540,
            "minimum": 0,
            "maximum": 1440
          },
          "end_minutes": {
            "type": "number",
            "description": "Shift end time as minutes from 00:00 (wrap > 1440 for overnight)",
            "example": 1020,
            "minimum": 0,
            "maximum": 2880
          },
          "break_minutes": {
            "type": "number",
            "description": "Paid/unpaid break length in minutes",
            "example": 30,
            "default": 0
          },
          "weekly_pattern": {
            "type": "string",
            "description": "Weekly pattern in ISO-8601 RRULE or cron-like string",
            "example": "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR"
          },
          "is_night_shift": {
            "type": "boolean",
            "description": "Whether this is a night shift",
            "example": false,
            "default": false
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Standard office hours"
          }
        },
        "required": [
          "company_id",
          "name",
          "start_minutes",
          "end_minutes"
        ]
      },
      "ShiftTemplateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Shift template ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID"
          },
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "start_minutes": {
            "type": "number",
            "description": "Shift start time as minutes from 00:00"
          },
          "end_minutes": {
            "type": "number",
            "description": "Shift end time as minutes from 00:00"
          },
          "break_minutes": {
            "type": "number",
            "description": "Paid/unpaid break length in minutes"
          },
          "weekly_pattern": {
            "type": "object",
            "description": "Weekly pattern in ISO-8601 RRULE or cron-like string"
          },
          "is_night_shift": {
            "type": "boolean",
            "description": "Whether this is a night shift"
          },
          "notes": {
            "type": "object",
            "description": "Additional notes"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "company_id",
          "name",
          "start_minutes",
          "end_minutes",
          "break_minutes",
          "is_night_shift",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateShiftTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name",
            "example": "Early Shift",
            "minLength": 1,
            "maxLength": 255
          },
          "start_minutes": {
            "type": "number",
            "description": "Shift start time as minutes from 00:00",
            "example": 540,
            "minimum": 0,
            "maximum": 1440
          },
          "end_minutes": {
            "type": "number",
            "description": "Shift end time as minutes from 00:00 (wrap > 1440 for overnight)",
            "example": 1020,
            "minimum": 0,
            "maximum": 2880
          },
          "break_minutes": {
            "type": "number",
            "description": "Paid/unpaid break length in minutes",
            "example": 30
          },
          "weekly_pattern": {
            "type": "string",
            "description": "Weekly pattern in ISO-8601 RRULE or cron-like string",
            "example": "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR"
          },
          "is_night_shift": {
            "type": "boolean",
            "description": "Whether this is a night shift",
            "example": false
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Standard office hours"
          }
        }
      },
      "CreateLeaveTypeDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Short code for the leave type",
            "example": "ANNUAL",
            "minLength": 1,
            "maxLength": 50
          },
          "name": {
            "type": "string",
            "description": "Human-readable name",
            "example": "Annual Leave",
            "minLength": 1,
            "maxLength": 255
          },
          "statutory": {
            "type": "boolean",
            "description": "Whether the leave is statutory under UK law",
            "example": true,
            "default": false
          },
          "max_days_per_year": {
            "type": "number",
            "description": "Maximum entitlement in days per leave year",
            "example": 28,
            "minimum": 0
          },
          "accrual_based": {
            "type": "boolean",
            "description": "Whether entitlement accrues over time",
            "example": true,
            "default": false
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the leave is normally paid",
            "example": true,
            "default": true
          },
          "hr_rate_code": {
            "type": "string",
            "description": "Reference into HR_RATE table for pay calculation",
            "example": "SSP",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "Description of the leave type",
            "example": "UK statutory annual leave entitlement",
            "maxLength": 1000
          },
          "template_id": {
            "type": "string",
            "description": "Reference to the template it was created from",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "custom_rules": {
            "type": "object",
            "description": "Custom rules specific to this tenant",
            "example": {
              "min_notice_days": 7,
              "max_consecutive_days": 14
            },
            "default": {}
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the leave type is active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "LeaveTypeResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "template_id": {
            "type": "object",
            "description": "Reference to the template it was created from",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "Short code for the leave type",
            "example": "ANNUAL"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name",
            "example": "Annual Leave"
          },
          "statutory": {
            "type": "boolean",
            "description": "Whether the leave is statutory under UK law",
            "example": true
          },
          "max_days_per_year": {
            "type": "object",
            "description": "Maximum entitlement in days per leave year",
            "example": 28,
            "nullable": true
          },
          "accrual_based": {
            "type": "boolean",
            "description": "Whether entitlement accrues over time",
            "example": true
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the leave is normally paid",
            "example": true
          },
          "hr_rate_code": {
            "type": "object",
            "description": "Reference into HR_RATE table for pay calculation",
            "example": "SSP",
            "nullable": true
          },
          "description": {
            "type": "object",
            "description": "Description of the leave type",
            "example": "UK statutory annual leave entitlement",
            "nullable": true
          },
          "custom_rules": {
            "type": "object",
            "description": "Custom rules specific to this tenant",
            "example": {}
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the leave type is active",
            "example": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "created_by_id": {
            "type": "object",
            "description": "ID of user who created the record",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "nullable": true
          },
          "updated_by_id": {
            "type": "object",
            "description": "ID of user who last updated the record",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "nullable": true
          },
          "created_by": {
            "type": "object",
            "description": "Email of user who created the record",
            "example": "admin@example.com",
            "nullable": true
          },
          "updated_by": {
            "type": "object",
            "description": "Email of user who last updated the record",
            "example": "admin@example.com",
            "nullable": true
          }
        },
        "required": [
          "id",
          "tenant_id",
          "code",
          "name",
          "statutory",
          "accrual_based",
          "paid",
          "custom_rules",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateLeaveTypeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human-readable name",
            "example": "Annual Leave",
            "minLength": 1,
            "maxLength": 255
          },
          "statutory": {
            "type": "boolean",
            "description": "Whether the leave is statutory under UK law",
            "example": true
          },
          "max_days_per_year": {
            "type": "number",
            "description": "Maximum entitlement in days per leave year",
            "example": 28,
            "minimum": 0
          },
          "accrual_based": {
            "type": "boolean",
            "description": "Whether entitlement accrues over time",
            "example": true
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the leave is normally paid",
            "example": true
          },
          "hr_rate_code": {
            "type": "string",
            "description": "Reference into HR_RATE table for pay calculation",
            "example": "SSP",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "Description of the leave type",
            "example": "UK statutory annual leave entitlement",
            "maxLength": 1000
          },
          "custom_rules": {
            "type": "object",
            "description": "Custom rules specific to this tenant",
            "example": {
              "min_notice_days": 7,
              "max_consecutive_days": 14
            }
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the leave type is active",
            "example": true
          }
        }
      },
      "CreateLeaveRequestDto": {
        "type": "object",
        "properties": {
          "leave_type_id": {
            "type": "string",
            "example": "uuid"
          },
          "start_date": {
            "type": "string",
            "example": "2024-03-15"
          },
          "end_date": {
            "type": "string",
            "example": "2024-03-17"
          },
          "duration_hours": {
            "type": "number",
            "example": 24
          },
          "comments": {
            "type": "string",
            "example": "Family vacation"
          }
        },
        "required": [
          "leave_type_id",
          "start_date",
          "end_date",
          "duration_hours"
        ]
      },
      "LeaveRequestResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "leave_type": {
            "type": "string",
            "example": "Annual Leave"
          },
          "start_date": {
            "type": "string",
            "example": "2024-03-15"
          },
          "end_date": {
            "type": "string",
            "example": "2024-03-17"
          },
          "duration_hours": {
            "type": "number",
            "example": 24
          },
          "status": {
            "type": "string",
            "example": "PENDING"
          },
          "comments": {
            "type": "string",
            "example": "Family vacation"
          },
          "submitted_at": {
            "type": "string",
            "example": "2024-03-10T09:00:00Z"
          },
          "approved_at": {
            "type": "string",
            "example": "2024-03-11T14:30:00Z"
          }
        },
        "required": [
          "id",
          "leave_type",
          "start_date",
          "end_date",
          "duration_hours",
          "status",
          "comments",
          "submitted_at",
          "approved_at"
        ]
      },
      "UpdateLeaveRequestDto": {
        "type": "object",
        "properties": {
          "start_datetime": {
            "type": "string",
            "description": "Leave start date and time",
            "example": "2024-01-15T09:00:00.000Z"
          },
          "end_datetime": {
            "type": "string",
            "description": "Leave end date and time",
            "example": "2024-01-19T17:00:00.000Z"
          },
          "duration_hours": {
            "type": "number",
            "description": "Duration in hours",
            "example": 40,
            "minimum": 0.1
          },
          "comments": {
            "type": "string",
            "description": "Comments for the leave request",
            "example": "Family vacation"
          }
        }
      },
      "ApproveLeaveRequestDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Approval status",
            "enum": [
              "APPROVED",
              "REJECTED"
            ],
            "example": "APPROVED"
          },
          "comments": {
            "type": "string",
            "description": "Approval comments",
            "example": "Approved for the requested dates"
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateScheduledShiftDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "shift_template_id": {
            "type": "string",
            "description": "Shift template ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "start_datetime": {
            "type": "string",
            "description": "Shift start datetime",
            "example": "2024-01-15T09:00:00.000Z"
          },
          "end_datetime": {
            "type": "string",
            "description": "Shift end datetime",
            "example": "2024-01-15T17:00:00.000Z"
          },
          "status": {
            "type": "string",
            "description": "Shift status",
            "enum": [
              "PLANNED",
              "CONFIRMED",
              "COMPLETED",
              "CANCELLED"
            ],
            "default": "PLANNED"
          },
          "remarks": {
            "type": "string",
            "description": "Special remarks for this shift",
            "example": "Training session at 2 PM"
          }
        },
        "required": [
          "employee_id",
          "shift_template_id",
          "start_datetime",
          "end_datetime"
        ]
      },
      "ScheduledShiftResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Scheduled shift ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "shift_template_id": {
            "type": "string",
            "description": "Shift template ID"
          },
          "start_datetime": {
            "format": "date-time",
            "type": "string",
            "description": "Shift start datetime"
          },
          "end_datetime": {
            "format": "date-time",
            "type": "string",
            "description": "Shift end datetime"
          },
          "status": {
            "type": "string",
            "description": "Shift status",
            "enum": [
              "PLANNED",
              "CONFIRMED",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "remarks": {
            "type": "object",
            "description": "Special remarks"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          },
          "shift_template": {
            "type": "object",
            "description": "Shift template information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "shift_template_id",
          "start_datetime",
          "end_datetime",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateScheduledShiftDto": {
        "type": "object",
        "properties": {
          "start_datetime": {
            "type": "string",
            "description": "Shift start datetime",
            "example": "2024-01-15T09:00:00.000Z"
          },
          "end_datetime": {
            "type": "string",
            "description": "Shift end datetime",
            "example": "2024-01-15T17:00:00.000Z"
          },
          "status": {
            "type": "string",
            "description": "Shift status",
            "enum": [
              "PLANNED",
              "CONFIRMED",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "remarks": {
            "type": "string",
            "description": "Special remarks for this shift",
            "example": "Training session at 2 PM"
          }
        }
      },
      "CreateOvertimeRequestDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "start_datetime": {
            "type": "string",
            "description": "Overtime start date and time",
            "example": "2024-01-15T18:00:00.000Z"
          },
          "end_datetime": {
            "type": "string",
            "description": "Overtime end date and time",
            "example": "2024-01-15T20:00:00.000Z"
          },
          "hours": {
            "type": "number",
            "description": "Overtime hours",
            "example": 2,
            "minimum": 0.1
          },
          "reason": {
            "type": "string",
            "description": "Reason for overtime",
            "example": "Project deadline"
          }
        },
        "required": [
          "employee_id",
          "start_datetime",
          "end_datetime",
          "hours"
        ]
      },
      "OvertimeRequestResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Overtime request ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "start_datetime": {
            "format": "date-time",
            "type": "string",
            "description": "Overtime start date and time"
          },
          "end_datetime": {
            "format": "date-time",
            "type": "string",
            "description": "Overtime end date and time"
          },
          "hours": {
            "type": "number",
            "description": "Overtime hours"
          },
          "status": {
            "type": "string",
            "description": "Overtime request status",
            "enum": [
              "PENDING",
              "APPROVED",
              "REJECTED",
              "CANCELLED"
            ]
          },
          "approver_id": {
            "type": "object",
            "description": "Approver user ID"
          },
          "approved_at": {
            "type": "object",
            "description": "Approval timestamp"
          },
          "reason": {
            "type": "object",
            "description": "Reason for overtime"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "start_datetime",
          "end_datetime",
          "hours",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateOvertimeRequestDto": {
        "type": "object",
        "properties": {
          "start_datetime": {
            "type": "string",
            "description": "Overtime start date and time",
            "example": "2024-01-15T18:00:00.000Z"
          },
          "end_datetime": {
            "type": "string",
            "description": "Overtime end date and time",
            "example": "2024-01-15T20:00:00.000Z"
          },
          "hours": {
            "type": "number",
            "description": "Overtime hours",
            "example": 2,
            "minimum": 0.1
          },
          "reason": {
            "type": "string",
            "description": "Reason for overtime",
            "example": "Project deadline"
          }
        }
      },
      "ApproveOvertimeRequestDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Approval status",
            "enum": [
              "APPROVED",
              "REJECTED"
            ],
            "example": "APPROVED"
          },
          "comments": {
            "type": "string",
            "description": "Approval comments",
            "example": "Approved for overtime work"
          }
        },
        "required": [
          "status"
        ]
      },
      "CreateAttendanceRecordDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "shift_id": {
            "type": "string",
            "description": "Scheduled shift ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "clock_in": {
            "type": "string",
            "description": "Clock in time",
            "example": "2024-01-15T09:00:00.000Z"
          },
          "clock_out": {
            "type": "string",
            "description": "Clock out time",
            "example": "2024-01-15T17:00:00.000Z"
          },
          "source": {
            "type": "string",
            "description": "Attendance source",
            "enum": [
              "MOBILE",
              "TERMINAL",
              "WEB",
              "MANUAL",
              "OTHER"
            ],
            "default": "TERMINAL"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude for location tracking",
            "example": 51.5074
          },
          "longitude": {
            "type": "number",
            "description": "Longitude for location tracking",
            "example": -0.1278
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the record is flagged for review",
            "example": false
          }
        },
        "required": [
          "employee_id",
          "clock_in"
        ]
      },
      "AttendanceRecordResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Attendance record ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "shift_id": {
            "type": "object",
            "description": "Scheduled shift ID"
          },
          "clock_in": {
            "format": "date-time",
            "type": "string",
            "description": "Clock in time"
          },
          "clock_out": {
            "type": "object",
            "description": "Clock out time"
          },
          "source": {
            "type": "string",
            "description": "Attendance source",
            "enum": [
              "MOBILE",
              "TERMINAL",
              "WEB",
              "MANUAL",
              "OTHER"
            ]
          },
          "latitude": {
            "type": "object",
            "description": "Latitude for location tracking"
          },
          "longitude": {
            "type": "object",
            "description": "Longitude for location tracking"
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the record is flagged for review"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          },
          "scheduled_shift": {
            "type": "object",
            "description": "Scheduled shift information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "clock_in",
          "source",
          "flagged",
          "created_at",
          "updated_at"
        ]
      },
      "ClockInDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "shift_id": {
            "type": "string",
            "description": "Scheduled shift ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "source": {
            "type": "string",
            "description": "Attendance source",
            "enum": [
              "MOBILE",
              "TERMINAL",
              "WEB",
              "MANUAL",
              "OTHER"
            ],
            "default": "TERMINAL"
          },
          "latitude": {
            "type": "number",
            "description": "Latitude for location tracking",
            "example": 51.5074
          },
          "longitude": {
            "type": "number",
            "description": "Longitude for location tracking",
            "example": -0.1278
          }
        },
        "required": [
          "employee_id"
        ]
      },
      "ClockOutDto": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "Latitude for location tracking",
            "example": 51.5074
          },
          "longitude": {
            "type": "number",
            "description": "Longitude for location tracking",
            "example": -0.1278
          }
        }
      },
      "UpdateAttendanceRecordDto": {
        "type": "object",
        "properties": {
          "clock_in": {
            "type": "string",
            "description": "Clock in time",
            "example": "2024-01-15T09:00:00.000Z"
          },
          "clock_out": {
            "type": "string",
            "description": "Clock out time",
            "example": "2024-01-15T17:00:00.000Z"
          },
          "source": {
            "type": "string",
            "description": "Attendance source",
            "enum": [
              "MOBILE",
              "TERMINAL",
              "WEB",
              "MANUAL",
              "OTHER"
            ]
          },
          "latitude": {
            "type": "number",
            "description": "Latitude for location tracking",
            "example": 51.5074
          },
          "longitude": {
            "type": "number",
            "description": "Longitude for location tracking",
            "example": -0.1278
          },
          "flagged": {
            "type": "boolean",
            "description": "Whether the record is flagged for review",
            "example": false
          }
        }
      },
      "CreateTimesheetDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "period_start": {
            "type": "string",
            "description": "Period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Period end date",
            "example": "2024-01-07T23:59:59.000Z"
          },
          "total_work_hours": {
            "type": "number",
            "description": "Total work hours",
            "example": 40,
            "minimum": 0
          },
          "total_overtime_hours": {
            "type": "number",
            "description": "Total overtime hours",
            "example": 5,
            "minimum": 0
          },
          "total_leave_hours": {
            "type": "number",
            "description": "Total leave hours",
            "example": 8,
            "minimum": 0
          },
          "status": {
            "type": "string",
            "description": "Timesheet status",
            "enum": [
              "OPEN",
              "SUBMITTED",
              "APPROVED",
              "LOCKED"
            ],
            "default": "OPEN"
          }
        },
        "required": [
          "employee_id",
          "period_start",
          "period_end",
          "total_work_hours",
          "total_overtime_hours",
          "total_leave_hours"
        ]
      },
      "TimesheetResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Timesheet ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "period_start": {
            "format": "date-time",
            "type": "string",
            "description": "Period start date"
          },
          "period_end": {
            "format": "date-time",
            "type": "string",
            "description": "Period end date"
          },
          "total_work_hours": {
            "type": "number",
            "description": "Total work hours"
          },
          "total_overtime_hours": {
            "type": "number",
            "description": "Total overtime hours"
          },
          "total_leave_hours": {
            "type": "number",
            "description": "Total leave hours"
          },
          "status": {
            "type": "string",
            "description": "Timesheet status",
            "enum": [
              "OPEN",
              "SUBMITTED",
              "APPROVED",
              "LOCKED"
            ]
          },
          "locked_at": {
            "type": "object",
            "description": "Lock timestamp"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "period_start",
          "period_end",
          "total_work_hours",
          "total_overtime_hours",
          "total_leave_hours",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "GenerateTimesheetDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "period_start": {
            "type": "string",
            "description": "Period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Period end date",
            "example": "2024-01-07T23:59:59.000Z"
          }
        },
        "required": [
          "employee_id",
          "period_start",
          "period_end"
        ]
      },
      "UpdateTimesheetDto": {
        "type": "object",
        "properties": {
          "period_start": {
            "type": "string",
            "description": "Period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Period end date",
            "example": "2024-01-07T23:59:59.000Z"
          },
          "total_work_hours": {
            "type": "number",
            "description": "Total work hours",
            "example": 40,
            "minimum": 0
          },
          "total_overtime_hours": {
            "type": "number",
            "description": "Total overtime hours",
            "example": 5,
            "minimum": 0
          },
          "total_leave_hours": {
            "type": "number",
            "description": "Total leave hours",
            "example": 8,
            "minimum": 0
          },
          "status": {
            "type": "string",
            "description": "Timesheet status",
            "enum": [
              "OPEN",
              "SUBMITTED",
              "APPROVED",
              "LOCKED"
            ]
          }
        }
      },
      "SubmitTimesheetDto": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Comments for submission",
            "example": "Ready for approval"
          }
        }
      },
      "ApproveTimesheetDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Approval status",
            "enum": [
              "APPROVED",
              "LOCKED"
            ],
            "example": "APPROVED"
          },
          "comments": {
            "type": "string",
            "description": "Approval comments",
            "example": "Approved for payroll processing"
          }
        },
        "required": [
          "status"
        ]
      },
      "CreatePayScheduleDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Pay schedule name",
            "example": "Monthly Payroll",
            "minLength": 1,
            "maxLength": 255
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ],
            "example": "MONTHLY"
          },
          "pay_day": {
            "type": "number",
            "description": "Pay day of month (for monthly/yearly frequencies)",
            "example": 25,
            "minimum": 1,
            "maximum": 31
          },
          "week_day": {
            "type": "number",
            "description": "Pay day of week (for weekly/biweekly frequencies)",
            "example": 5,
            "minimum": 1,
            "maximum": 7
          },
          "start_date": {
            "type": "string",
            "description": "Schedule start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Schedule end date",
            "example": "2024-12-31T23:59:59.000Z"
          }
        },
        "required": [
          "company_id",
          "name",
          "frequency",
          "start_date"
        ]
      },
      "PayScheduleResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pay schedule ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID"
          },
          "name": {
            "type": "string",
            "description": "Pay schedule name"
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ]
          },
          "pay_day": {
            "type": "object",
            "description": "Pay day of month"
          },
          "week_day": {
            "type": "object",
            "description": "Pay day of week"
          },
          "start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Schedule start date"
          },
          "end_date": {
            "type": "object",
            "description": "Schedule end date"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "company": {
            "type": "object",
            "description": "Company information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "company_id",
          "name",
          "frequency",
          "start_date",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedPayScheduleResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of pay schedules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayScheduleResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 50
              },
              "total_pages": {
                "type": "number",
                "example": 5
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdatePayScheduleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pay schedule name",
            "example": "Monthly Payroll",
            "minLength": 1,
            "maxLength": 255
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ]
          },
          "pay_day": {
            "type": "number",
            "description": "Pay day of month (for monthly/yearly frequencies)",
            "example": 25,
            "minimum": 1,
            "maximum": 31
          },
          "week_day": {
            "type": "number",
            "description": "Pay day of week (for weekly/biweekly frequencies)",
            "example": 5,
            "minimum": 1,
            "maximum": 7
          },
          "start_date": {
            "type": "string",
            "description": "Schedule start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "Schedule end date",
            "example": "2024-12-31T23:59:59.000Z"
          }
        }
      },
      "CreatePayRunDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string",
            "description": "Company ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "pay_schedule_id": {
            "type": "string",
            "description": "Pay schedule ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "name": {
            "type": "string",
            "description": "Pay run name",
            "example": "January 2024 Monthly Payroll",
            "maxLength": 255
          },
          "period_start": {
            "type": "string",
            "description": "Pay period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Pay period end date",
            "example": "2024-01-31T23:59:59.000Z"
          },
          "pay_date": {
            "type": "string",
            "description": "Pay date",
            "example": "2024-02-05T00:00:00.000Z"
          },
          "status": {
            "type": "string",
            "description": "Pay run status",
            "enum": [
              "DRAFT",
              "PROCESSING",
              "APPROVED",
              "SUBMITTED",
              "FILED",
              "CLOSED"
            ],
            "default": "DRAFT"
          },
          "description": {
            "type": "string",
            "description": "Pay run description",
            "example": "Monthly payroll for January 2024",
            "maxLength": 1000
          }
        },
        "required": [
          "company_id",
          "pay_schedule_id",
          "name",
          "period_start",
          "period_end",
          "pay_date"
        ]
      },
      "PayRunResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pay run ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "company_id": {
            "type": "string",
            "description": "Company ID"
          },
          "pay_schedule_id": {
            "type": "string",
            "description": "Pay schedule ID"
          },
          "name": {
            "type": "string",
            "description": "Pay run name"
          },
          "period_start": {
            "format": "date-time",
            "type": "string",
            "description": "Pay period start date"
          },
          "period_end": {
            "format": "date-time",
            "type": "string",
            "description": "Pay period end date"
          },
          "pay_date": {
            "format": "date-time",
            "type": "string",
            "description": "Pay date"
          },
          "status": {
            "type": "string",
            "description": "Pay run status",
            "enum": [
              "DRAFT",
              "PROCESSING",
              "APPROVED",
              "SUBMITTED",
              "FILED",
              "CLOSED"
            ]
          },
          "hmrc_submission_id": {
            "type": "object",
            "description": "HMRC submission ID"
          },
          "submitted_at": {
            "type": "object",
            "description": "HMRC submission timestamp"
          },
          "description": {
            "type": "object",
            "description": "Pay run description"
          },
          "total_gross_amount": {
            "type": "number",
            "description": "Total gross amount"
          },
          "total_net_amount": {
            "type": "number",
            "description": "Total net amount"
          },
          "total_deductions_amount": {
            "type": "number",
            "description": "Total deductions amount"
          },
          "employee_count": {
            "type": "number",
            "description": "Number of employees"
          },
          "processed_at": {
            "type": "object",
            "description": "Processing timestamp"
          },
          "approved_at": {
            "type": "object",
            "description": "Approved timestamp"
          },
          "approved_by_id": {
            "type": "object",
            "description": "Approver user ID"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "pay_schedule": {
            "type": "object",
            "description": "Pay schedule information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "company_id",
          "pay_schedule_id",
          "name",
          "period_start",
          "period_end",
          "pay_date",
          "status",
          "total_gross_amount",
          "total_net_amount",
          "total_deductions_amount",
          "employee_count",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedPayRunResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of pay runs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayRunResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 50
              },
              "total_pages": {
                "type": "number",
                "example": 5
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdatePayRunDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pay run name",
            "example": "January 2024 Monthly Payroll - Updated",
            "maxLength": 255
          },
          "period_start": {
            "type": "string",
            "description": "Pay period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "period_end": {
            "type": "string",
            "description": "Pay period end date",
            "example": "2024-01-31T23:59:59.000Z"
          },
          "pay_date": {
            "type": "string",
            "description": "Pay date",
            "example": "2024-02-05T00:00:00.000Z"
          },
          "status": {
            "type": "string",
            "description": "Pay run status",
            "enum": [
              "DRAFT",
              "PROCESSING",
              "APPROVED",
              "SUBMITTED",
              "FILED",
              "CLOSED"
            ]
          },
          "description": {
            "type": "string",
            "description": "Pay run description",
            "example": "Updated monthly payroll description",
            "maxLength": 1000
          }
        }
      },
      "ProcessPayRunDto": {
        "type": "object",
        "properties": {
          "force_process": {
            "type": "boolean",
            "description": "Force processing even if validation fails",
            "example": false,
            "default": false
          },
          "processed_notes": {
            "type": "string",
            "description": "Processing comments",
            "example": "Approved for processing",
            "maxLength": 500
          }
        }
      },
      "ApprovePayRunDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Approval status",
            "enum": [
              "DRAFT",
              "PROCESSING",
              "APPROVED",
              "SUBMITTED",
              "FILED",
              "CLOSED"
            ],
            "example": "APPROVED"
          },
          "approved_notes": {
            "type": "string",
            "description": "Approval comments",
            "example": "Approved for payment",
            "maxLength": 500
          }
        },
        "required": [
          "status"
        ]
      },
      "CreatePayslipDto": {
        "type": "object",
        "properties": {
          "pay_run_id": {
            "type": "string",
            "description": "Pay run ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "pay_period_start_date": {
            "type": "string",
            "description": "Pay period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "pay_period_end_date": {
            "type": "string",
            "description": "Pay period end date",
            "example": "2024-01-31T23:59:59.000Z"
          },
          "pay_date": {
            "type": "string",
            "description": "Pay date",
            "example": "2024-02-05T00:00:00.000Z"
          },
          "notes": {
            "type": "string",
            "description": "Payslip notes",
            "example": "Standard monthly payslip",
            "maxLength": 1000
          }
        },
        "required": [
          "pay_run_id",
          "employee_id",
          "pay_period_start_date",
          "pay_period_end_date",
          "pay_date"
        ]
      },
      "PayslipResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payslip ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "pay_run_id": {
            "type": "string",
            "description": "Pay run ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "gross_pay": {
            "type": "number",
            "description": "Gross pay amount"
          },
          "total_deductions": {
            "type": "number",
            "description": "Total deductions"
          },
          "net_pay": {
            "type": "number",
            "description": "Net pay amount"
          },
          "ni_employee": {
            "type": "number",
            "description": "Employee NI contribution"
          },
          "ni_employer": {
            "type": "number",
            "description": "Employer NI contribution"
          },
          "income_tax": {
            "type": "number",
            "description": "Income tax amount"
          },
          "student_loan": {
            "type": "number",
            "description": "Student loan deduction"
          },
          "other_deductions": {
            "type": "number",
            "description": "Other deductions"
          },
          "paye_scheme_id": {
            "type": "object",
            "description": "PAYE scheme ID"
          },
          "pay_period_start_date": {
            "format": "date-time",
            "type": "string",
            "description": "Pay period start date"
          },
          "pay_period_end_date": {
            "format": "date-time",
            "type": "string",
            "description": "Pay period end date"
          },
          "pay_date": {
            "format": "date-time",
            "type": "string",
            "description": "Pay date"
          },
          "notes": {
            "type": "object",
            "description": "Payslip notes"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "pay_run": {
            "type": "object",
            "description": "Pay run information"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "pay_run_id",
          "employee_id",
          "gross_pay",
          "total_deductions",
          "net_pay",
          "ni_employee",
          "ni_employer",
          "income_tax",
          "student_loan",
          "other_deductions",
          "pay_period_start_date",
          "pay_period_end_date",
          "pay_date",
          "created_at",
          "updated_at"
        ]
      },
      "BulkCreatePayslipsDto": {
        "type": "object",
        "properties": {
          "pay_run_id": {
            "type": "string",
            "description": "Pay run ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "employee_ids": {
            "description": "Array of employee IDs",
            "example": [
              "550e8400-e29b-41d4-a716-446655440000",
              "660e8400-e29b-41d4-a716-446655440001"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "auto_calculate": {
            "type": "boolean",
            "description": "Auto-calculate payslip amounts",
            "example": true
          },
          "notes": {
            "type": "string",
            "description": "Bulk creation notes",
            "example": "Bulk payslip creation for monthly run",
            "maxLength": 1000
          }
        },
        "required": [
          "pay_run_id",
          "employee_ids"
        ]
      },
      "PaginatedPayslipResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of payslips",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayslipResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 50
              },
              "total_pages": {
                "type": "number",
                "example": 5
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdatePayslipDto": {
        "type": "object",
        "properties": {
          "pay_run_id": {
            "type": "string",
            "description": "Pay run ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "pay_period_start_date": {
            "type": "string",
            "description": "Pay period start date",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "pay_period_end_date": {
            "type": "string",
            "description": "Pay period end date",
            "example": "2024-01-31T23:59:59.000Z"
          },
          "pay_date": {
            "type": "string",
            "description": "Pay date",
            "example": "2024-02-05T00:00:00.000Z"
          },
          "notes": {
            "type": "string",
            "description": "Payslip notes",
            "example": "Updated payslip with overtime",
            "maxLength": 1000
          }
        }
      },
      "CalculatePayslipDto": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "string",
            "description": "Additional notes for calculation",
            "example": "Include overtime calculation",
            "maxLength": 1000
          }
        }
      },
      "CreatePayElementDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pay element name",
            "example": "Basic Salary",
            "minLength": 2,
            "maxLength": 100
          },
          "code": {
            "type": "string",
            "description": "Pay element code (unique)",
            "example": "BASIC_SALARY",
            "minLength": 2,
            "maxLength": 50
          },
          "type": {
            "type": "string",
            "description": "Pay element type",
            "enum": [
              "EARNING",
              "DEDUCTION",
              "BENEFIT"
            ],
            "example": "EARNING"
          },
          "taxable": {
            "type": "boolean",
            "description": "Whether this element is taxable",
            "example": true,
            "default": true
          },
          "subject_to_ni": {
            "type": "boolean",
            "description": "Whether this element is subject to National Insurance",
            "example": true,
            "default": true
          },
          "subject_to_pension": {
            "type": "boolean",
            "description": "Whether this element is subject to pension contributions",
            "example": false,
            "default": false
          },
          "default_amount": {
            "type": "number",
            "description": "Default amount for this pay element",
            "example": 3000,
            "minimum": 0
          }
        },
        "required": [
          "name",
          "code",
          "type"
        ]
      },
      "PayElementResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Pay element ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "name": {
            "type": "string",
            "description": "Pay element name"
          },
          "code": {
            "type": "string",
            "description": "Pay element code"
          },
          "type": {
            "type": "string",
            "description": "Pay element type",
            "enum": [
              "EARNING",
              "DEDUCTION",
              "BENEFIT"
            ],
            "example": "EARNING"
          },
          "taxable": {
            "type": "boolean",
            "description": "Whether this element is taxable"
          },
          "subject_to_ni": {
            "type": "boolean",
            "description": "Whether this element is subject to National Insurance"
          },
          "subject_to_pension": {
            "type": "boolean",
            "description": "Whether this element is subject to pension contributions"
          },
          "default_amount": {
            "type": "object",
            "description": "Default amount for this pay element"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "code",
          "type",
          "taxable",
          "subject_to_ni",
          "subject_to_pension",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedPayElementResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of pay elements",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayElementResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 50
              },
              "total_pages": {
                "type": "number",
                "example": 5
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdatePayElementDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pay element name",
            "example": "Basic Salary Updated",
            "minLength": 2,
            "maxLength": 100
          },
          "type": {
            "type": "string",
            "description": "Pay element type",
            "enum": [
              "EARNING",
              "DEDUCTION",
              "BENEFIT"
            ],
            "example": "EARNING"
          },
          "taxable": {
            "type": "boolean",
            "description": "Whether this element is taxable",
            "example": true
          },
          "subject_to_ni": {
            "type": "boolean",
            "description": "Whether this element is subject to National Insurance",
            "example": true
          },
          "subject_to_pension": {
            "type": "boolean",
            "description": "Whether this element is subject to pension contributions",
            "example": false
          },
          "default_amount": {
            "type": "number",
            "description": "Default amount for this pay element",
            "example": 3500,
            "minimum": 0
          }
        }
      },
      "CreateEmployeePayAssignmentDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "pay_element_id": {
            "type": "string",
            "description": "Pay element ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "amount": {
            "type": "number",
            "description": "Assignment amount",
            "example": 3000,
            "minimum": 0
          },
          "effective_from": {
            "type": "string",
            "description": "Effective from date",
            "example": "2024-01-01"
          },
          "effective_to": {
            "type": "string",
            "description": "Effective to date (null for open-ended)",
            "example": "2024-12-31"
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ],
            "example": "MONTHLY"
          },
          "paye_scheme_id": {
            "type": "string",
            "description": "PAYE scheme ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          }
        },
        "required": [
          "employee_id",
          "pay_element_id",
          "amount",
          "effective_from",
          "frequency"
        ]
      },
      "EmployeePayAssignmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Assignment ID"
          },
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "pay_element_id": {
            "type": "string",
            "description": "Pay element ID"
          },
          "amount": {
            "type": "number",
            "description": "Assignment amount"
          },
          "effective_from": {
            "format": "date-time",
            "type": "string",
            "description": "Effective from date"
          },
          "effective_to": {
            "type": "object",
            "description": "Effective to date"
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ],
            "example": "MONTHLY"
          },
          "paye_scheme_id": {
            "type": "object",
            "description": "PAYE scheme ID"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last updated timestamp"
          },
          "created_by_id": {
            "type": "object",
            "description": "Created by user ID"
          },
          "updated_by_id": {
            "type": "object",
            "description": "Updated by user ID"
          },
          "created_by": {
            "type": "object",
            "description": "Created by user email"
          },
          "updated_by": {
            "type": "object",
            "description": "Updated by user email"
          },
          "employee": {
            "type": "object",
            "description": "Employee information"
          },
          "pay_element": {
            "type": "object",
            "description": "Pay element information"
          },
          "paye_scheme": {
            "type": "object",
            "description": "PAYE scheme information"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "pay_element_id",
          "amount",
          "effective_from",
          "frequency",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedEmployeePayAssignmentResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of employee pay assignments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeePayAssignmentResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 50
              },
              "total_pages": {
                "type": "number",
                "example": 5
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateEmployeePayAssignmentDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Assignment amount",
            "example": 3500,
            "minimum": 0
          },
          "effective_from": {
            "type": "string",
            "description": "Effective from date",
            "example": "2024-02-01"
          },
          "effective_to": {
            "type": "string",
            "description": "Effective to date (null for open-ended)",
            "example": "2024-12-31"
          },
          "frequency": {
            "type": "string",
            "description": "Pay frequency",
            "enum": [
              "WEEKLY",
              "BIWEEKLY",
              "MONTHLY",
              "YEARLY",
              "HOURLY"
            ],
            "example": "MONTHLY"
          },
          "paye_scheme_id": {
            "type": "string",
            "description": "PAYE scheme ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "updated_by_id": {
            "type": "string",
            "description": "Updated by user ID",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "updated_by": {
            "type": "string",
            "description": "Updated by user email",
            "example": "john.doe@example.com"
          }
        }
      },
      "TerminateAssignmentDto": {
        "type": "object",
        "properties": {
          "effective_to": {
            "type": "string",
            "description": "Termination date",
            "example": "2024-06-30"
          },
          "reason": {
            "type": "string",
            "description": "Termination reason",
            "example": "Employee resignation",
            "maxLength": 500
          }
        },
        "required": [
          "effective_to"
        ]
      },
      "AdminRateGroupResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "code": {
            "type": "string",
            "description": "Unique code for the rate group",
            "example": "NMW_25_26"
          },
          "title": {
            "type": "string",
            "description": "Display title for the rate group",
            "example": "National Minimum Wage 2025-2026"
          },
          "category": {
            "type": "string",
            "enum": [
              "NMW",
              "SSP",
              "SMP",
              "SPP",
              "ShPP",
              "SPBP",
              "TAX_BAND",
              "NI_THRESHOLD",
              "NI_RATE",
              "PENSION_AE",
              "LEVY",
              "HOLIDAY_DAYS",
              "WORKING_TIME_MAX"
            ],
            "description": "Category of the rate",
            "example": "NMW"
          },
          "description": {
            "type": "object",
            "description": "Description of the rate group",
            "example": "UK National Minimum Wage rates for 2025-2026 tax year"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ],
            "description": "Unit of measurement for the rate",
            "example": "HOURLY"
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ],
            "description": "Jurisdiction the rate applies to",
            "example": "UK"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "code",
          "title",
          "category",
          "unit",
          "jurisdiction",
          "created_at",
          "updated_at"
        ]
      },
      "PaginationMetaDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "limit": {
            "type": "number",
            "description": "Items per page",
            "example": 20
          },
          "total": {
            "type": "number",
            "description": "Total number of items",
            "example": 100
          },
          "total_pages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 5
          }
        },
        "required": [
          "page",
          "limit",
          "total",
          "total_pages"
        ]
      },
      "AdminPaginatedRateGroupResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of rate groups",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminRateGroupResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateRateGroupDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique code for the rate group",
            "example": "NMW_25_26"
          },
          "title": {
            "type": "string",
            "description": "Display title for the rate group",
            "example": "National Minimum Wage 2025-2026"
          },
          "category": {
            "type": "string",
            "enum": [
              "NMW",
              "SSP",
              "SMP",
              "SPP",
              "ShPP",
              "SPBP",
              "TAX_BAND",
              "NI_THRESHOLD",
              "NI_RATE",
              "PENSION_AE",
              "LEVY",
              "HOLIDAY_DAYS",
              "WORKING_TIME_MAX"
            ],
            "description": "Category of the rate",
            "example": "NMW"
          },
          "description": {
            "type": "string",
            "description": "Description of the rate group",
            "example": "UK National Minimum Wage rates for 2025-2026 tax year"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ],
            "description": "Unit of measurement for the rate",
            "example": "HOURLY"
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ],
            "description": "Jurisdiction the rate applies to",
            "example": "UK",
            "default": "UK"
          }
        },
        "required": [
          "code",
          "title",
          "category",
          "unit",
          "jurisdiction"
        ]
      },
      "AdminUpdateRateGroupDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Display title for the rate group",
            "example": "National Minimum Wage 2025-2026"
          },
          "category": {
            "type": "string",
            "enum": [
              "NMW",
              "SSP",
              "SMP",
              "SPP",
              "ShPP",
              "SPBP",
              "TAX_BAND",
              "NI_THRESHOLD",
              "NI_RATE",
              "PENSION_AE",
              "LEVY",
              "HOLIDAY_DAYS",
              "WORKING_TIME_MAX"
            ],
            "description": "Category of the rate",
            "example": "NMW"
          },
          "description": {
            "type": "string",
            "description": "Description of the rate group",
            "example": "UK National Minimum Wage rates for 2025-2026 tax year"
          },
          "unit": {
            "type": "string",
            "enum": [
              "HOURLY",
              "WEEKLY",
              "MONTHLY",
              "YEARLY",
              "PERCENT",
              "CURRENCY",
              "DAYS",
              "HOURS"
            ],
            "description": "Unit of measurement for the rate",
            "example": "HOURLY"
          },
          "jurisdiction": {
            "type": "string",
            "enum": [
              "UK",
              "ENGLAND",
              "WALES",
              "SCOTLAND",
              "N_IRELAND"
            ],
            "description": "Jurisdiction the rate applies to",
            "example": "UK"
          }
        },
        "required": [
          "unit"
        ]
      },
      "AdminBulkImportRateGroupDto": {
        "type": "object",
        "properties": {
          "duplicateHandling": {
            "type": "string",
            "description": "Import option for duplicate records",
            "enum": [
              "overwrite",
              "skip"
            ],
            "example": "overwrite",
            "default": "overwrite"
          }
        },
        "required": [
          "duplicateHandling"
        ]
      },
      "AdminRateEntryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "group_id": {
            "type": "string",
            "description": "Rate group ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "starts_at": {
            "format": "date-time",
            "type": "string",
            "description": "Effective start date (inclusive)",
            "example": "2025-04-01T00:00:00.000Z"
          },
          "ends_at": {
            "type": "object",
            "description": "Effective end date (null = open-ended)",
            "example": "2026-03-31T23:59:59.999Z"
          },
          "params": {
            "type": "object",
            "description": "Parameters for the rate entry",
            "example": {
              "ageBand": "21-22",
              "taxYear": "2025/26"
            }
          },
          "value_decimal": {
            "type": "object",
            "description": "Decimal value for the rate",
            "example": "11.44"
          },
          "value_text": {
            "type": "object",
            "description": "Text value for complex rates",
            "example": "90% of AWE"
          },
          "notes": {
            "type": "object",
            "description": "Additional notes"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation",
            "example": "NMW Act 1998 – s.1"
          },
          "url": {
            "type": "string",
            "description": "Reference URL",
            "example": "https://gov.uk/national-minimum-wage-rates"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "group_id",
          "starts_at",
          "citation",
          "url",
          "created_at"
        ]
      },
      "AdminPaginatedRateEntryResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of rate entries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminRateEntryResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "i": {
        "type": "object",
        "properties": {}
      },
      "AdminCreateRateEntryDto": {
        "type": "object",
        "properties": {
          "group_id": {
            "type": "string",
            "description": "Rate group ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "starts_at": {
            "type": "string",
            "description": "Effective start date (inclusive)",
            "example": "2025-04-01T00:00:00.000Z"
          },
          "ends_at": {
            "type": "string",
            "description": "Effective end date (null = open-ended)",
            "example": "2026-03-31T23:59:59.999Z"
          },
          "params": {
            "type": "object",
            "description": "Parameters for the rate entry (age band, tax year, etc.)",
            "example": {
              "ageBand": "21-22",
              "taxYear": "2025/26"
            }
          },
          "value_decimal": {
            "description": "Decimal value for the rate",
            "example": "11.44",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "value_text": {
            "type": "string",
            "description": "Text value for complex rates",
            "example": "90% of AWE"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Rate for apprentices under 19 or in first year"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation",
            "example": "NMW Act 1998 – s.1"
          },
          "url": {
            "type": "string",
            "description": "Reference URL",
            "example": "https://gov.uk/national-minimum-wage-rates"
          }
        },
        "required": [
          "group_id",
          "starts_at",
          "citation",
          "url"
        ]
      },
      "AdminUpdateRateEntryDto": {
        "type": "object",
        "properties": {
          "ends_at": {
            "type": "string",
            "description": "Effective end date (null = open-ended)",
            "example": "2026-03-31T23:59:59.999Z"
          },
          "params": {
            "type": "object",
            "description": "Parameters for the rate entry (age band, tax year, etc.)",
            "example": {
              "ageBand": "21-22",
              "taxYear": "2025/26"
            }
          },
          "value_decimal": {
            "description": "Decimal value for the rate",
            "example": "11.44",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "value_text": {
            "type": "string",
            "description": "Text value for complex rates",
            "example": "90% of AWE"
          },
          "notes": {
            "type": "string",
            "description": "Additional notes",
            "example": "Rate for apprentices under 19 or in first year"
          },
          "citation": {
            "type": "string",
            "description": "Legal citation",
            "example": "NMW Act 1998 – s.1"
          },
          "url": {
            "type": "string",
            "description": "Reference URL",
            "example": "https://gov.uk/national-minimum-wage-rates"
          }
        }
      },
      "AdminBulkImportRateEntryDto": {
        "type": "object",
        "properties": {
          "duplicateHandling": {
            "type": "string",
            "description": "Import option for duplicate records",
            "enum": [
              "overwrite",
              "skip"
            ],
            "example": "overwrite",
            "default": "overwrite"
          }
        },
        "required": [
          "duplicateHandling"
        ]
      },
      "AdminPublicHolidayResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "region": {
            "type": "string",
            "description": "Region the holiday applies to",
            "example": "England & Wales"
          },
          "date": {
            "format": "date-time",
            "type": "string",
            "description": "Calendar date of the public holiday",
            "example": "2025-12-25T00:00:00.000Z"
          },
          "name": {
            "type": "string",
            "description": "Official holiday name",
            "example": "Christmas Day"
          },
          "description": {
            "type": "object",
            "description": "Additional description of the holiday",
            "example": "Christmas Day is a public holiday celebrating the birth of Jesus Christ"
          },
          "year": {
            "type": "number",
            "description": "Year of the holiday",
            "example": 2025
          }
        },
        "required": [
          "id",
          "region",
          "date",
          "name",
          "year"
        ]
      },
      "AdminPaginatedPublicHolidayResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of public holidays",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminPublicHolidayResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreatePublicHolidayDto": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "description": "Region the holiday applies to",
            "example": "England & Wales"
          },
          "date": {
            "type": "string",
            "description": "Calendar date of the public holiday",
            "example": "2025-12-25"
          },
          "name": {
            "type": "string",
            "description": "Official holiday name",
            "example": "Christmas Day"
          },
          "description": {
            "type": "string",
            "description": "Additional description of the holiday",
            "example": "Christmas Day is a public holiday celebrating the birth of Jesus Christ"
          },
          "year": {
            "type": "number",
            "description": "Year of the holiday",
            "example": 2025
          }
        },
        "required": [
          "region",
          "date",
          "name",
          "year"
        ]
      },
      "AdminUpdatePublicHolidayDto": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "description": "Region the holiday applies to",
            "example": "England & Wales"
          },
          "date": {
            "type": "string",
            "description": "Calendar date of the public holiday",
            "example": "2025-12-25"
          },
          "name": {
            "type": "string",
            "description": "Official holiday name",
            "example": "Christmas Day"
          },
          "description": {
            "type": "string",
            "description": "Additional description of the holiday",
            "example": "Christmas Day is a public holiday celebrating the birth of Jesus Christ"
          },
          "year": {
            "type": "number",
            "description": "Year of the holiday",
            "example": 2025
          }
        }
      },
      "AdminBulkImportPublicHolidayDto": {
        "type": "object",
        "properties": {
          "duplicateHandling": {
            "type": "string",
            "description": "Import option for duplicate records",
            "enum": [
              "overwrite",
              "skip"
            ],
            "example": "overwrite",
            "default": "overwrite"
          }
        },
        "required": [
          "duplicateHandling"
        ]
      },
      "AdminStatutoryWorkingHourRuleResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Name of the working hour rule",
            "example": "UK Working Time Regulations 1998"
          },
          "max_avg_weekly_hours": {
            "type": "number",
            "description": "Maximum average weekly hours allowed",
            "example": 48
          },
          "averaging_period_weeks": {
            "type": "number",
            "description": "Number of weeks over which the average is calculated",
            "example": 17
          },
          "min_daily_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest between shifts (hours)",
            "example": 11
          },
          "min_weekly_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest each week (hours)",
            "example": 24
          },
          "min_break_minutes_per_shift": {
            "type": "number",
            "description": "Minimum break during a shift (>6 h) in minutes",
            "example": 20
          },
          "legal_source": {
            "type": "string",
            "description": "Source or legal citation (for audit trail)",
            "example": "The Working Time Regulations 1998 (SI 1998/1833)"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "max_avg_weekly_hours",
          "averaging_period_weeks",
          "min_daily_rest_hours",
          "min_weekly_rest_hours",
          "min_break_minutes_per_shift",
          "legal_source",
          "updated_at"
        ]
      },
      "AdminPaginatedStatutoryWorkingHourRuleResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of statutory working hour rules",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminStatutoryWorkingHourRuleResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateStatutoryWorkingHourRuleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the working hour rule",
            "example": "UK Working Time Regulations 1998"
          },
          "max_avg_weekly_hours": {
            "type": "number",
            "description": "Maximum average weekly hours allowed",
            "example": 48
          },
          "averaging_period_weeks": {
            "type": "number",
            "description": "Number of weeks over which the average is calculated",
            "example": 17
          },
          "min_daily_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest between shifts (hours)",
            "example": 11
          },
          "min_weekly_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest each week (hours)",
            "example": 24
          },
          "min_break_minutes_per_shift": {
            "type": "number",
            "description": "Minimum break during a shift (>6 h) in minutes",
            "example": 20
          },
          "legal_source": {
            "type": "string",
            "description": "Source or legal citation (for audit trail)",
            "example": "The Working Time Regulations 1998 (SI 1998/1833)"
          }
        },
        "required": [
          "name",
          "max_avg_weekly_hours",
          "averaging_period_weeks",
          "min_daily_rest_hours",
          "min_weekly_rest_hours",
          "min_break_minutes_per_shift",
          "legal_source"
        ]
      },
      "AdminUpdateStatutoryWorkingHourRuleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the working hour rule",
            "example": "UK Working Time Regulations 1998"
          },
          "max_avg_weekly_hours": {
            "type": "number",
            "description": "Maximum average weekly hours allowed",
            "example": 48
          },
          "averaging_period_weeks": {
            "type": "number",
            "description": "Number of weeks over which the average is calculated",
            "example": 17
          },
          "min_daily_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest between shifts (hours)",
            "example": 11
          },
          "min_weekly_rest_hours": {
            "type": "number",
            "description": "Minimum uninterrupted rest each week (hours)",
            "example": 24
          },
          "min_break_minutes_per_shift": {
            "type": "number",
            "description": "Minimum break during a shift (>6 h) in minutes",
            "example": 20
          },
          "legal_source": {
            "type": "string",
            "description": "Source or legal citation (for audit trail)",
            "example": "The Working Time Regulations 1998 (SI 1998/1833)"
          }
        }
      },
      "AdminBulkImportStatutoryWorkingHourRuleDto": {
        "type": "object",
        "properties": {
          "duplicateHandling": {
            "type": "string",
            "description": "Import option for duplicate records",
            "enum": [
              "overwrite",
              "skip"
            ],
            "example": "overwrite",
            "default": "overwrite"
          }
        },
        "required": [
          "duplicateHandling"
        ]
      },
      "AdminStatutoryPayRateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "code": {
            "type": "string",
            "description": "Code matching HR_RATE.code",
            "example": "OVERTIME_1_5X"
          },
          "name": {
            "type": "string",
            "description": "Descriptive label for the pay rate",
            "example": "Overtime 1.5x"
          },
          "rate_multiplier": {
            "description": "Multiplier applied to basic hourly rate",
            "example": "1.50",
            "allOf": [
              {
                "$ref": "#/components/schemas/i"
              }
            ]
          },
          "effective_from": {
            "format": "date-time",
            "type": "string",
            "description": "Valid-from date",
            "example": "2025-04-01T00:00:00.000Z"
          },
          "effective_to": {
            "type": "object",
            "description": "Valid-to date (null = open-ended)",
            "example": "2026-03-31T00:00:00.000Z"
          },
          "legal_source": {
            "type": "object",
            "description": "Legal source or citation",
            "example": "Working Time Regulations 1998"
          }
        },
        "required": [
          "id",
          "code",
          "name",
          "rate_multiplier",
          "effective_from"
        ]
      },
      "AdminPaginatedStatutoryPayRateResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of statutory pay rates",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminStatutoryPayRateResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateStatutoryPayRateDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code matching HR_RATE.code",
            "example": "OVERTIME_1_5X"
          },
          "name": {
            "type": "string",
            "description": "Descriptive label for the pay rate",
            "example": "Overtime 1.5x"
          },
          "rate_multiplier": {
            "type": "string",
            "description": "Multiplier applied to basic hourly rate",
            "example": "1.50"
          },
          "effective_from": {
            "type": "string",
            "description": "Valid-from date",
            "example": "2025-04-01"
          },
          "effective_to": {
            "type": "string",
            "description": "Valid-to date (null = open-ended)",
            "example": "2026-03-31"
          },
          "legal_source": {
            "type": "string",
            "description": "Legal source or citation",
            "example": "Working Time Regulations 1998"
          }
        },
        "required": [
          "code",
          "name",
          "rate_multiplier",
          "effective_from"
        ]
      },
      "AdminUpdateStatutoryPayRateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Descriptive label for the pay rate",
            "example": "Overtime 1.5x"
          },
          "rate_multiplier": {
            "type": "string",
            "description": "Multiplier applied to basic hourly rate",
            "example": "1.50"
          },
          "effective_from": {
            "type": "string",
            "description": "Valid-from date",
            "example": "2025-04-01"
          },
          "effective_to": {
            "type": "string",
            "description": "Valid-to date (null = open-ended)",
            "example": "2026-03-31"
          },
          "legal_source": {
            "type": "string",
            "description": "Legal source or citation",
            "example": "Working Time Regulations 1998"
          }
        }
      },
      "AdminBulkImportStatutoryPayRateDto": {
        "type": "object",
        "properties": {
          "duplicateHandling": {
            "type": "string",
            "description": "Import option for duplicate records",
            "enum": [
              "overwrite",
              "skip"
            ],
            "example": "overwrite",
            "default": "overwrite"
          }
        },
        "required": [
          "duplicateHandling"
        ]
      },
      "AdminLeaveTypeTemplateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "code": {
            "type": "string",
            "description": "Short code for the leave type",
            "example": "ANNUAL"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name",
            "example": "Annual Leave"
          },
          "statutory": {
            "type": "boolean",
            "description": "Whether the leave is statutory under UK law"
          },
          "max_days_per_year": {
            "type": "object",
            "description": "Maximum entitlement in days per leave year",
            "example": 28
          },
          "accrual_based": {
            "type": "boolean",
            "description": "Whether entitlement accrues over time"
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the leave is normally paid"
          },
          "hr_rate_code": {
            "type": "object",
            "description": "Reference into HR_RATE table for pay calculation",
            "example": "STATUTORY_SICK_PAY"
          },
          "description": {
            "type": "object",
            "description": "Description of the leave type"
          },
          "jurisdictions": {
            "description": "Which jurisdictions this applies to",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string",
            "description": "Version tracking for regulatory updates",
            "example": "1.0.0"
          },
          "last_review_date": {
            "type": "object",
            "description": "When this template was last reviewed for compliance",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the template is active"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "tenant_usage_count": {
            "type": "number",
            "description": "Number of tenants using this template",
            "example": 10
          }
        },
        "required": [
          "id",
          "code",
          "name",
          "statutory",
          "accrual_based",
          "paid",
          "jurisdictions",
          "version",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedLeaveTypeTemplateResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of leave type templates",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminLeaveTypeTemplateResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateLeaveTypeTemplateDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Short code for the leave type (e.g. \"ANNUAL\", \"SICK\")",
            "example": "ANNUAL"
          },
          "name": {
            "type": "string",
            "description": "Human-readable name",
            "example": "Annual Leave"
          },
          "statutory": {
            "type": "boolean",
            "description": "Whether the leave is statutory under UK law",
            "default": false
          },
          "max_days_per_year": {
            "type": "number",
            "description": "Maximum entitlement in days per leave year",
            "example": 28
          },
          "accrual_based": {
            "type": "boolean",
            "description": "Whether entitlement accrues over time",
            "default": false
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the leave is normally paid",
            "default": true
          },
          "hr_rate_code": {
            "type": "string",
            "description": "Reference into HR_RATE table for pay calculation",
            "example": "STATUTORY_SICK_PAY"
          },
          "description": {
            "type": "string",
            "description": "Description of the leave type",
            "example": "Standard annual leave entitlement for UK employees"
          },
          "jurisdictions": {
            "description": "Which jurisdictions this applies to",
            "default": [
              "UK"
            ],
            "example": [
              "England",
              "Scotland",
              "Wales",
              "Northern Ireland"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string",
            "description": "Version tracking for regulatory updates",
            "default": "1.0.0",
            "example": "1.0.0"
          },
          "last_review_date": {
            "type": "string",
            "description": "When this template was last reviewed for compliance",
            "example": "2024-01-01"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the template is active",
            "default": true
          }
        },
        "required": [
          "code",
          "name"
        ]
      },
      "AdminUpdateLeaveTypeTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Human-readable name",
            "example": "Annual Leave"
          },
          "statutory": {
            "type": "boolean",
            "description": "Whether the leave is statutory under UK law"
          },
          "max_days_per_year": {
            "type": "number",
            "description": "Maximum entitlement in days per leave year",
            "example": 28
          },
          "accrual_based": {
            "type": "boolean",
            "description": "Whether entitlement accrues over time"
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the leave is normally paid"
          },
          "hr_rate_code": {
            "type": "string",
            "description": "Reference into HR_RATE table for pay calculation",
            "example": "STATUTORY_SICK_PAY"
          },
          "description": {
            "type": "string",
            "description": "Description of the leave type"
          },
          "jurisdictions": {
            "description": "Which jurisdictions this applies to",
            "example": [
              "England",
              "Scotland",
              "Wales",
              "Northern Ireland"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string",
            "description": "Version tracking for regulatory updates",
            "example": "1.0.1"
          },
          "last_review_date": {
            "type": "string",
            "description": "When this template was last reviewed for compliance",
            "example": "2024-01-01"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the template is active"
          }
        }
      },
      "AdminBulkImportLeaveTypeTemplateDto": {
        "type": "object",
        "properties": {
          "update_existing": {
            "type": "boolean",
            "description": "Whether to update existing templates with the same code",
            "default": false
          },
          "skip_invalid": {
            "type": "boolean",
            "description": "Whether to skip invalid rows and continue importing",
            "default": true
          }
        }
      },
      "AdminDeployLeaveTypeTemplateDto": {
        "type": "object",
        "properties": {
          "tenant_ids": {
            "description": "List of tenant IDs to deploy the template to",
            "example": [
              "tenant-1",
              "tenant-2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "overwrite": {
            "type": "boolean",
            "description": "Whether to overwrite existing leave types with the same code",
            "default": false
          },
          "activate": {
            "type": "boolean",
            "description": "Whether to make the deployed leave type active immediately",
            "default": true
          }
        },
        "required": [
          "tenant_ids"
        ]
      },
      "AdminLearningContentTemplateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "title_en": {
            "type": "string"
          },
          "description_en": {
            "type": "object"
          },
          "content_type": {
            "type": "string",
            "enum": [
              "VIDEO",
              "DOCUMENT",
              "PRESENTATION",
              "INTERACTIVE",
              "ASSESSMENT",
              "WEBINAR",
              "COURSE"
            ]
          },
          "category": {
            "type": "string"
          },
          "learning_level": {
            "type": "string",
            "enum": [
              "BEGINNER",
              "INTERMEDIATE",
              "ADVANCED",
              "EXPERT"
            ]
          },
          "target_audience": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_minutes": {
            "type": "number"
          },
          "primary_file_path": {
            "type": "object"
          },
          "learning_objectives": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_assessment": {
            "type": "boolean"
          },
          "certification_available": {
            "type": "boolean"
          },
          "mandatory_for_roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "compliance_requirement": {
            "type": "boolean"
          },
          "version": {
            "type": "string"
          },
          "last_review_date": {
            "type": "object"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "tenant_usage_count": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "code",
          "title_en",
          "content_type",
          "category",
          "learning_level",
          "target_audience",
          "estimated_duration_minutes",
          "learning_objectives",
          "has_assessment",
          "certification_available",
          "mandatory_for_roles",
          "compliance_requirement",
          "version",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedLearningContentTemplateResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of learning content templates",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminLearningContentTemplateResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateLearningContentTemplateDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique code for the learning content",
            "example": "UK_GDPR_BASICS"
          },
          "title_en": {
            "type": "string",
            "description": "Title in English",
            "example": "UK GDPR Basics"
          },
          "description_en": {
            "type": "string",
            "description": "Description in English",
            "example": "Introduction to UK GDPR compliance requirements"
          },
          "content_type": {
            "type": "string",
            "enum": [
              "VIDEO",
              "DOCUMENT",
              "PRESENTATION",
              "INTERACTIVE",
              "ASSESSMENT",
              "WEBINAR",
              "COURSE"
            ],
            "description": "Type of learning content",
            "example": "VIDEO"
          },
          "category": {
            "type": "string",
            "description": "Category of the content",
            "example": "Compliance"
          },
          "learning_level": {
            "type": "string",
            "enum": [
              "BEGINNER",
              "INTERMEDIATE",
              "ADVANCED",
              "EXPERT"
            ],
            "description": "Learning level",
            "default": "BEGINNER"
          },
          "target_audience": {
            "description": "Target audience roles",
            "example": [
              "HR_MANAGER",
              "EMPLOYEE"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_minutes": {
            "type": "number",
            "description": "Estimated duration in minutes",
            "default": 30,
            "example": 45
          },
          "primary_file_path": {
            "type": "string",
            "description": "Path to primary file",
            "example": "/content/uk-gdpr-basics.mp4"
          },
          "learning_objectives": {
            "description": "Learning objectives",
            "example": [
              "Understand GDPR principles",
              "Know data subject rights"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_assessment": {
            "type": "boolean",
            "description": "Whether content has assessment",
            "default": false
          },
          "certification_available": {
            "type": "boolean",
            "description": "Whether certification is available",
            "default": false
          },
          "mandatory_for_roles": {
            "description": "Roles for which this is mandatory",
            "example": [
              "DATA_PROCESSOR"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "compliance_requirement": {
            "type": "boolean",
            "description": "Whether this is a compliance requirement",
            "default": false
          },
          "version": {
            "type": "string",
            "description": "Version of the content",
            "default": "1.0.0",
            "example": "1.0.0"
          },
          "last_review_date": {
            "type": "string",
            "description": "Last review date",
            "example": "2024-01-01"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the template is active",
            "default": true
          }
        },
        "required": [
          "code",
          "title_en",
          "content_type",
          "category",
          "target_audience",
          "mandatory_for_roles"
        ]
      },
      "AdminUpdateLearningContentTemplateDto": {
        "type": "object",
        "properties": {
          "title_en": {
            "type": "string",
            "description": "Title in English",
            "example": "UK GDPR Basics"
          },
          "description_en": {
            "type": "string",
            "description": "Description in English"
          },
          "content_type": {
            "type": "string",
            "enum": [
              "VIDEO",
              "DOCUMENT",
              "PRESENTATION",
              "INTERACTIVE",
              "ASSESSMENT",
              "WEBINAR",
              "COURSE"
            ],
            "description": "Type of learning content"
          },
          "category": {
            "type": "string",
            "description": "Category of the content",
            "example": "Compliance"
          },
          "learning_level": {
            "type": "string",
            "enum": [
              "BEGINNER",
              "INTERMEDIATE",
              "ADVANCED",
              "EXPERT"
            ],
            "description": "Learning level"
          },
          "target_audience": {
            "description": "Target audience roles",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_minutes": {
            "type": "number",
            "description": "Estimated duration in minutes"
          },
          "primary_file_path": {
            "type": "string",
            "description": "Path to primary file"
          },
          "learning_objectives": {
            "description": "Learning objectives",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_assessment": {
            "type": "boolean",
            "description": "Whether content has assessment"
          },
          "certification_available": {
            "type": "boolean",
            "description": "Whether certification is available"
          },
          "mandatory_for_roles": {
            "description": "Roles for which this is mandatory",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "compliance_requirement": {
            "type": "boolean",
            "description": "Whether this is a compliance requirement"
          },
          "version": {
            "type": "string",
            "description": "Version of the content"
          },
          "last_review_date": {
            "type": "string",
            "description": "Last review date"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the template is active"
          }
        }
      },
      "AdminLearningPathTemplateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "title_en": {
            "type": "string"
          },
          "description_en": {
            "type": "object"
          },
          "path_type": {
            "type": "string"
          },
          "target_audience": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_hours": {
            "type": "number"
          },
          "certification_available": {
            "type": "boolean"
          },
          "mandatory": {
            "type": "boolean"
          },
          "modules": {
            "type": "object"
          },
          "version": {
            "type": "string"
          },
          "last_review_date": {
            "type": "object"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "tenant_usage_count": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "code",
          "title_en",
          "path_type",
          "target_audience",
          "estimated_duration_hours",
          "certification_available",
          "mandatory",
          "modules",
          "version",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedLearningPathTemplateResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of learning path templates",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminLearningPathTemplateResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateLearningPathTemplateDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique code for the learning path",
            "example": "UK_HR_ONBOARDING"
          },
          "title_en": {
            "type": "string",
            "description": "Title in English",
            "example": "UK HR Onboarding Path"
          },
          "description_en": {
            "type": "string",
            "description": "Description in English",
            "example": "Complete onboarding path for new HR employees in UK"
          },
          "path_type": {
            "type": "string",
            "description": "Type of learning path",
            "example": "ONBOARDING"
          },
          "target_audience": {
            "description": "Target audience roles",
            "example": [
              "HR_MANAGER",
              "HR_ASSISTANT"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_hours": {
            "type": "number",
            "description": "Estimated duration in hours",
            "example": 8
          },
          "certification_available": {
            "type": "boolean",
            "description": "Whether certification is available upon completion",
            "default": false
          },
          "mandatory": {
            "type": "boolean",
            "description": "Whether this path is mandatory",
            "default": false
          },
          "modules": {
            "type": "object",
            "description": "Learning modules in the path",
            "example": [
              {
                "id": "1",
                "title": "Introduction",
                "order": 1,
                "contentIds": [
                  "content1",
                  "content2"
                ]
              },
              {
                "id": "2",
                "title": "Core Training",
                "order": 2,
                "contentIds": [
                  "content3"
                ]
              }
            ],
            "default": []
          },
          "version": {
            "type": "string",
            "description": "Version of the path",
            "default": "1.0.0",
            "example": "1.0.0"
          },
          "last_review_date": {
            "type": "string",
            "description": "Last review date",
            "example": "2024-01-01"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the template is active",
            "default": true
          }
        },
        "required": [
          "code",
          "title_en",
          "path_type",
          "target_audience",
          "estimated_duration_hours"
        ]
      },
      "AdminUpdateLearningPathTemplateDto": {
        "type": "object",
        "properties": {
          "title_en": {
            "type": "string",
            "description": "Title in English"
          },
          "description_en": {
            "type": "string",
            "description": "Description in English"
          },
          "path_type": {
            "type": "string",
            "description": "Type of learning path"
          },
          "target_audience": {
            "description": "Target audience roles",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_hours": {
            "type": "number",
            "description": "Estimated duration in hours"
          },
          "certification_available": {
            "type": "boolean",
            "description": "Whether certification is available upon completion"
          },
          "mandatory": {
            "type": "boolean",
            "description": "Whether this path is mandatory"
          },
          "modules": {
            "type": "object",
            "description": "Learning modules in the path"
          },
          "version": {
            "type": "string",
            "description": "Version of the path"
          },
          "last_review_date": {
            "type": "string",
            "description": "Last review date"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the template is active"
          }
        }
      },
      "AdminComplianceCheckTemplateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "template_code": {
            "type": "string"
          },
          "template_name": {
            "type": "string"
          },
          "inspection_type_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "checklist_items": {
            "type": "object"
          },
          "evidence_requirements": {
            "type": "object"
          },
          "automation_rules": {
            "type": "object"
          },
          "quality_checks": {
            "type": "object"
          },
          "output_templates": {
            "type": "object"
          },
          "version": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "is_system_template": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "template_code",
          "template_name",
          "inspection_type_ids",
          "checklist_items",
          "evidence_requirements",
          "version",
          "is_active",
          "is_system_template",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedComplianceCheckTemplateResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of compliance check templates",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminComplianceCheckTemplateResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateComplianceCheckTemplateDto": {
        "type": "object",
        "properties": {
          "template_code": {
            "type": "string",
            "description": "Unique template code",
            "example": "UK_FIRE_SAFETY_CHECK",
            "maxLength": 100
          },
          "template_name": {
            "type": "string",
            "description": "Template name",
            "example": "UK Fire Safety Compliance Check",
            "maxLength": 200
          },
          "inspection_type_ids": {
            "description": "Applicable inspection type IDs",
            "example": [
              "type-1",
              "type-2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "checklist_items": {
            "type": "object",
            "description": "Checklist items configuration",
            "example": [
              {
                "id": "1",
                "title": "Fire exits clear",
                "required": true
              },
              {
                "id": "2",
                "title": "Extinguishers in date",
                "required": true
              }
            ]
          },
          "evidence_requirements": {
            "type": "object",
            "description": "Evidence requirements configuration",
            "example": [
              {
                "type": "PHOTO",
                "description": "Photo of fire exit",
                "required": true
              },
              {
                "type": "DOCUMENT",
                "description": "Inspection certificate",
                "required": false
              }
            ]
          },
          "automation_rules": {
            "type": "object",
            "description": "Automation processing rules",
            "example": {
              "autoApprove": false,
              "notificationRules": {}
            }
          },
          "quality_checks": {
            "type": "object",
            "description": "Quality check rules",
            "example": {
              "minPhotos": 2,
              "requireSignature": true
            }
          },
          "output_templates": {
            "type": "object",
            "description": "Output document templates",
            "example": {
              "certificateTemplate": "template-1",
              "reportTemplate": "template-2"
            }
          },
          "version": {
            "type": "string",
            "description": "Version of the template",
            "default": "1.0.0",
            "example": "1.0.0",
            "maxLength": 20
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the template is active",
            "default": true
          },
          "is_system_template": {
            "type": "boolean",
            "description": "Whether this is a system template",
            "default": false
          }
        },
        "required": [
          "template_code",
          "template_name",
          "inspection_type_ids",
          "checklist_items",
          "evidence_requirements"
        ]
      },
      "AdminUpdateComplianceCheckTemplateDto": {
        "type": "object",
        "properties": {
          "template_name": {
            "type": "string",
            "description": "Template name",
            "maxLength": 200
          },
          "inspection_type_ids": {
            "description": "Applicable inspection type IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "checklist_items": {
            "type": "object",
            "description": "Checklist items configuration"
          },
          "evidence_requirements": {
            "type": "object",
            "description": "Evidence requirements configuration"
          },
          "automation_rules": {
            "type": "object",
            "description": "Automation processing rules"
          },
          "quality_checks": {
            "type": "object",
            "description": "Quality check rules"
          },
          "output_templates": {
            "type": "object",
            "description": "Output document templates"
          },
          "version": {
            "type": "string",
            "description": "Version of the template",
            "maxLength": 20
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the template is active"
          },
          "is_system_template": {
            "type": "boolean",
            "description": "Whether this is a system template"
          }
        }
      },
      "SystemHealthDto": {
        "type": "object",
        "properties": {
          "component": {
            "type": "string",
            "description": "Component name",
            "example": "Database"
          },
          "status": {
            "type": "string",
            "description": "Health status",
            "example": "healthy"
          },
          "response_time_ms": {
            "type": "number",
            "description": "Response time in ms",
            "example": 45
          },
          "last_checked": {
            "format": "date-time",
            "type": "string",
            "description": "Last check timestamp"
          },
          "details": {
            "type": "object",
            "description": "Additional details"
          }
        },
        "required": [
          "component",
          "status",
          "response_time_ms",
          "last_checked",
          "details"
        ]
      },
      "SystemMetricDto": {
        "type": "object",
        "properties": {
          "metric_name": {
            "type": "string",
            "description": "Metric name",
            "example": "total_employees"
          },
          "value": {
            "type": "number",
            "description": "Metric value",
            "example": 1250
          },
          "change_percentage": {
            "type": "number",
            "description": "Change from previous period",
            "example": 12.5
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Timestamp of the metric"
          }
        },
        "required": [
          "metric_name",
          "value",
          "change_percentage",
          "timestamp"
        ]
      },
      "TenantUsageStatisticsDto": {
        "type": "object",
        "properties": {
          "tenant_id": {
            "type": "string",
            "description": "Tenant ID"
          },
          "tenant_name": {
            "type": "string",
            "description": "Tenant name"
          },
          "employee_count": {
            "type": "number",
            "description": "Total number of employees"
          },
          "active_employees": {
            "type": "number",
            "description": "Active employees"
          },
          "department_count": {
            "type": "number",
            "description": "Total departments"
          },
          "leave_request_count": {
            "type": "number",
            "description": "Total leave requests"
          },
          "pending_leave_requests": {
            "type": "number",
            "description": "Pending leave requests"
          },
          "payroll_run_count": {
            "type": "number",
            "description": "Total payroll runs"
          },
          "storage_used_mb": {
            "type": "number",
            "description": "Storage used in MB"
          },
          "last_activity": {
            "format": "date-time",
            "type": "string",
            "description": "Last activity timestamp"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Account created date"
          }
        },
        "required": [
          "tenant_id",
          "tenant_name",
          "employee_count",
          "active_employees",
          "department_count",
          "leave_request_count",
          "pending_leave_requests",
          "payroll_run_count",
          "storage_used_mb",
          "last_activity",
          "created_at"
        ]
      },
      "CrossTenantStatisticsDto": {
        "type": "object",
        "properties": {
          "total_tenants": {
            "type": "number",
            "description": "Total number of tenants"
          },
          "active_tenants": {
            "type": "number",
            "description": "Active tenants"
          },
          "total_employees": {
            "type": "number",
            "description": "Total employees across all tenants"
          },
          "total_departments": {
            "type": "number",
            "description": "Total departments across all tenants"
          },
          "total_leave_requests": {
            "type": "number",
            "description": "Total leave requests across all tenants"
          },
          "total_payroll_runs": {
            "type": "number",
            "description": "Total payroll runs across all tenants"
          },
          "avg_employees_per_tenant": {
            "type": "number",
            "description": "Average employees per tenant"
          },
          "total_storage_gb": {
            "type": "number",
            "description": "Total storage used in GB"
          },
          "tenant_breakdown": {
            "description": "Statistics by tenant",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantUsageStatisticsDto"
            }
          }
        },
        "required": [
          "total_tenants",
          "active_tenants",
          "total_employees",
          "total_departments",
          "total_leave_requests",
          "total_payroll_runs",
          "avg_employees_per_tenant",
          "total_storage_gb",
          "tenant_breakdown"
        ]
      },
      "TemplateUsageStatisticsDto": {
        "type": "object",
        "properties": {
          "template_type": {
            "type": "string",
            "description": "Template type",
            "example": "LeaveTypeTemplate"
          },
          "template_id": {
            "type": "string",
            "description": "Template ID"
          },
          "template_code": {
            "type": "string",
            "description": "Template code"
          },
          "template_name": {
            "type": "string",
            "description": "Template name"
          },
          "tenant_count": {
            "type": "number",
            "description": "Number of tenants using this template"
          },
          "usage_percentage": {
            "type": "number",
            "description": "Percentage of tenants using this template"
          },
          "last_deployed": {
            "format": "date-time",
            "type": "string",
            "description": "Last deployed date"
          },
          "tenant_ids": {
            "description": "List of tenant IDs using this template",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "template_type",
          "template_id",
          "template_code",
          "template_name",
          "tenant_count",
          "usage_percentage",
          "last_deployed",
          "tenant_ids"
        ]
      },
      "ComplianceStatisticsDto": {
        "type": "object",
        "properties": {
          "total_compliance_checks": {
            "type": "number",
            "description": "Total compliance checks configured"
          },
          "active_checks": {
            "type": "number",
            "description": "Active compliance checks"
          },
          "system_checks": {
            "type": "number",
            "description": "System-wide compliance checks"
          },
          "tenant_checks": {
            "type": "number",
            "description": "Tenant-specific checks"
          },
          "avg_compliance_score": {
            "type": "number",
            "description": "Average compliance score"
          },
          "fully_compliant_tenants": {
            "type": "number",
            "description": "Tenants with full compliance"
          },
          "non_compliant_tenants": {
            "type": "number",
            "description": "Tenants with compliance issues"
          },
          "common_issues": {
            "type": "array",
            "description": "Most common compliance issues",
            "items": {
              "type": "object",
              "properties": {
                "issue": {
                  "type": "string"
                },
                "count": {
                  "type": "number"
                }
              }
            }
          }
        },
        "required": [
          "total_compliance_checks",
          "active_checks",
          "system_checks",
          "tenant_checks",
          "avg_compliance_score",
          "fully_compliant_tenants",
          "non_compliant_tenants",
          "common_issues"
        ]
      },
      "PayrollStatisticsDto": {
        "type": "object",
        "properties": {
          "total_payroll_runs": {
            "type": "number",
            "description": "Total payroll runs across all tenants"
          },
          "successful_runs": {
            "type": "number",
            "description": "Successful payroll runs"
          },
          "failed_runs": {
            "type": "number",
            "description": "Failed payroll runs"
          },
          "total_gross_pay": {
            "type": "number",
            "description": "Total gross pay processed"
          },
          "total_net_pay": {
            "type": "number",
            "description": "Total net pay processed"
          },
          "total_tax_deducted": {
            "type": "number",
            "description": "Total tax deducted"
          },
          "avg_pay_per_employee": {
            "type": "number",
            "description": "Average pay per employee"
          },
          "frequency_breakdown": {
            "type": "object",
            "description": "Payroll frequency breakdown",
            "additionalProperties": true
          }
        },
        "required": [
          "total_payroll_runs",
          "successful_runs",
          "failed_runs",
          "total_gross_pay",
          "total_net_pay",
          "total_tax_deducted",
          "avg_pay_per_employee",
          "frequency_breakdown"
        ]
      },
      "AdminDashboardSummaryDto": {
        "type": "object",
        "properties": {
          "system_health": {
            "description": "System health status",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SystemHealthDto"
            }
          },
          "key_metrics": {
            "description": "Key system metrics",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SystemMetricDto"
            }
          },
          "tenant_statistics": {
            "description": "Cross-tenant statistics",
            "allOf": [
              {
                "$ref": "#/components/schemas/CrossTenantStatisticsDto"
              }
            ]
          },
          "template_usage": {
            "description": "Template usage statistics",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateUsageStatisticsDto"
            }
          },
          "compliance_overview": {
            "description": "Compliance overview",
            "allOf": [
              {
                "$ref": "#/components/schemas/ComplianceStatisticsDto"
              }
            ]
          },
          "payroll_statistics": {
            "description": "Payroll statistics",
            "allOf": [
              {
                "$ref": "#/components/schemas/PayrollStatisticsDto"
              }
            ]
          },
          "generated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Report generated timestamp"
          }
        },
        "required": [
          "system_health",
          "key_metrics",
          "tenant_statistics",
          "template_usage",
          "compliance_overview",
          "payroll_statistics",
          "generated_at"
        ]
      },
      "AdminTemplateCustomizationConfigResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "template_id": {
            "type": "string"
          },
          "template_type": {
            "type": "string"
          },
          "customization_level": {
            "type": "string",
            "enum": [
              "BASIC",
              "INTERMEDIATE",
              "ADVANCED",
              "EXPERT"
            ]
          },
          "supported_customizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customizable_elements": {
            "type": "object",
            "additionalProperties": true
          },
          "element_constraints": {
            "type": "object",
            "additionalProperties": true
          },
          "conditional_logic": {
            "type": "object",
            "additionalProperties": true
          },
          "validation_schema": {
            "type": "object",
            "additionalProperties": true
          },
          "preview_template": {
            "type": "object",
            "additionalProperties": true
          },
          "version_control_enabled": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "template_id",
          "template_type",
          "customization_level",
          "supported_customizations",
          "customizable_elements",
          "version_control_enabled",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedTemplateCustomizationConfigResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of template customization configs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminTemplateCustomizationConfigResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateTemplateCustomizationConfigDto": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "description": "Template ID this configuration is for",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "template_type": {
            "type": "string",
            "description": "Type of template",
            "example": "LeaveTypeTemplate"
          },
          "customization_level": {
            "type": "string",
            "description": "Customization level",
            "enum": [
              "BASIC",
              "INTERMEDIATE",
              "ADVANCED",
              "EXPERT"
            ],
            "default": "BASIC"
          },
          "supported_customizations": {
            "description": "List of supported customization types",
            "example": [
              "fields",
              "workflow",
              "notifications"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customizable_elements": {
            "type": "object",
            "description": "Elements that can be customized",
            "additionalProperties": true,
            "example": {
              "fields": [
                "max_days",
                "accrual_rate"
              ],
              "workflow": [
                "approval_steps",
                "notifications"
              ]
            }
          },
          "element_constraints": {
            "type": "object",
            "description": "Constraints on element customization",
            "additionalProperties": true,
            "example": {
              "max_days": {
                "min": 1,
                "max": 365
              },
              "approval_steps": {
                "max": 5
              }
            }
          },
          "conditional_logic": {
            "type": "object",
            "description": "Conditional logic for customizations",
            "additionalProperties": true
          },
          "validation_schema": {
            "type": "object",
            "description": "Validation schema for customizations",
            "additionalProperties": true
          },
          "preview_template": {
            "type": "object",
            "description": "Preview template for customizations",
            "additionalProperties": true
          },
          "version_control_enabled": {
            "type": "boolean",
            "description": "Enable version control for customizations",
            "default": true
          }
        },
        "required": [
          "template_id",
          "template_type",
          "supported_customizations",
          "customizable_elements"
        ]
      },
      "AdminUpdateTemplateCustomizationConfigDto": {
        "type": "object",
        "properties": {
          "template_type": {
            "type": "string",
            "description": "Type of template"
          },
          "customization_level": {
            "type": "string",
            "description": "Customization level",
            "enum": [
              "BASIC",
              "INTERMEDIATE",
              "ADVANCED",
              "EXPERT"
            ]
          },
          "supported_customizations": {
            "description": "List of supported customization types",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customizable_elements": {
            "type": "object",
            "description": "Elements that can be customized",
            "additionalProperties": true
          },
          "element_constraints": {
            "type": "object",
            "description": "Constraints on element customization",
            "additionalProperties": true
          },
          "conditional_logic": {
            "type": "object",
            "description": "Conditional logic for customizations",
            "additionalProperties": true
          },
          "validation_schema": {
            "type": "object",
            "description": "Validation schema for customizations",
            "additionalProperties": true
          },
          "preview_template": {
            "type": "object",
            "description": "Preview template for customizations",
            "additionalProperties": true
          },
          "version_control_enabled": {
            "type": "boolean",
            "description": "Enable version control for customizations"
          }
        }
      },
      "AdminComplianceInspectionTypeResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "inspection_code": {
            "type": "string"
          },
          "inspection_name": {
            "type": "string"
          },
          "regulator_name": {
            "type": "string"
          },
          "scope_definition": {
            "type": "object",
            "additionalProperties": true
          },
          "legal_framework": {
            "type": "object",
            "additionalProperties": true
          },
          "typical_notice_period_days": {
            "type": "number"
          },
          "standard_response_days": {
            "type": "number"
          },
          "response_requirements": {
            "type": "object",
            "additionalProperties": true
          },
          "required_evidence_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optional_evidence_types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "risk_level": {
            "type": "string"
          },
          "potential_penalties": {
            "type": "object",
            "additionalProperties": true
          },
          "is_active": {
            "type": "boolean"
          },
          "version": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "inspection_code",
          "inspection_name",
          "regulator_name",
          "scope_definition",
          "legal_framework",
          "typical_notice_period_days",
          "standard_response_days",
          "required_evidence_types",
          "optional_evidence_types",
          "risk_level",
          "is_active",
          "version",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedComplianceInspectionTypeResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of compliance inspection types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminComplianceInspectionTypeResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateComplianceInspectionTypeDto": {
        "type": "object",
        "properties": {
          "inspection_code": {
            "type": "string",
            "description": "Unique inspection code",
            "example": "HSE_ANNUAL_2024",
            "maxLength": 100
          },
          "inspection_name": {
            "type": "string",
            "description": "Inspection name",
            "example": "Annual Health & Safety Executive Inspection",
            "maxLength": 200
          },
          "regulator_name": {
            "type": "string",
            "description": "Name of the regulatory body",
            "example": "Health and Safety Executive",
            "maxLength": 100
          },
          "scope_definition": {
            "type": "object",
            "description": "Inspection scope definition",
            "additionalProperties": true,
            "example": {
              "scope": "workplace_safety",
              "timeRange": "annual",
              "entityTypes": [
                "office",
                "warehouse",
                "factory"
              ]
            }
          },
          "legal_framework": {
            "type": "object",
            "description": "Legal framework and regulations",
            "additionalProperties": true,
            "example": {
              "legalBasis": "Health and Safety at Work Act 1974",
              "regulations": [
                "CDM 2015",
                "RIDDOR 2013"
              ],
              "guidance": [
                "HSG65",
                "L153"
              ]
            }
          },
          "typical_notice_period_days": {
            "type": "number",
            "description": "Typical notice period in days",
            "default": 21,
            "minimum": 0
          },
          "standard_response_days": {
            "type": "number",
            "description": "Standard response time in days",
            "default": 14,
            "minimum": 0
          },
          "response_requirements": {
            "type": "object",
            "description": "Response requirements",
            "additionalProperties": true,
            "example": {
              "format": "digital",
              "submissionMethods": [
                "email",
                "portal"
              ],
              "requiredSections": [
                "risk_assessment",
                "incident_log"
              ]
            }
          },
          "required_evidence_types": {
            "description": "Required evidence type IDs",
            "example": [
              "risk_assessment",
              "training_records"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optional_evidence_types": {
            "description": "Optional evidence type IDs",
            "example": [
              "improvement_plans",
              "audit_reports"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "risk_level": {
            "type": "string",
            "description": "Risk level",
            "default": "MEDIUM",
            "example": "HIGH"
          },
          "potential_penalties": {
            "type": "object",
            "description": "Potential penalties and consequences",
            "additionalProperties": true,
            "example": {
              "monetary": "£10,000 - £50,000",
              "operational": "Suspension of operations"
            }
          },
          "is_active": {
            "type": "boolean",
            "description": "Active status",
            "default": true
          },
          "version": {
            "type": "string",
            "description": "Version",
            "default": "1.0.0",
            "maxLength": 20
          }
        },
        "required": [
          "inspection_code",
          "inspection_name",
          "regulator_name",
          "scope_definition",
          "legal_framework",
          "required_evidence_types"
        ]
      },
      "AdminUpdateComplianceInspectionTypeDto": {
        "type": "object",
        "properties": {
          "inspection_name": {
            "type": "string",
            "description": "Inspection name",
            "maxLength": 200
          },
          "regulator_name": {
            "type": "string",
            "description": "Name of the regulatory body",
            "maxLength": 100
          },
          "scope_definition": {
            "type": "object",
            "description": "Inspection scope definition",
            "additionalProperties": true
          },
          "legal_framework": {
            "type": "object",
            "description": "Legal framework and regulations",
            "additionalProperties": true
          },
          "typical_notice_period_days": {
            "type": "number",
            "description": "Typical notice period in days",
            "minimum": 0
          },
          "standard_response_days": {
            "type": "number",
            "description": "Standard response time in days",
            "minimum": 0
          },
          "response_requirements": {
            "type": "object",
            "description": "Response requirements",
            "additionalProperties": true
          },
          "required_evidence_types": {
            "description": "Required evidence type IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optional_evidence_types": {
            "description": "Optional evidence type IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "risk_level": {
            "type": "string",
            "description": "Risk level"
          },
          "potential_penalties": {
            "type": "object",
            "description": "Potential penalties and consequences",
            "additionalProperties": true
          },
          "is_active": {
            "type": "boolean",
            "description": "Active status"
          },
          "version": {
            "type": "string",
            "description": "Version",
            "maxLength": 20
          }
        }
      },
      "AdminEvidenceTypeResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "evidence_code": {
            "type": "string"
          },
          "evidence_name": {
            "type": "string"
          },
          "evidence_category": {
            "type": "string"
          },
          "description": {
            "type": "object"
          },
          "data_sources": {
            "type": "object",
            "additionalProperties": true
          },
          "extraction_rules": {
            "type": "object",
            "additionalProperties": true
          },
          "output_format": {
            "type": "object",
            "additionalProperties": true
          },
          "legal_significance": {
            "type": "string"
          },
          "retention_period_years": {
            "type": "number"
          },
          "processing_complexity": {
            "type": "string"
          },
          "estimated_generation_time_minutes": {
            "type": "number"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "evidence_code",
          "evidence_name",
          "evidence_category",
          "data_sources",
          "extraction_rules",
          "output_format",
          "legal_significance",
          "retention_period_years",
          "processing_complexity",
          "estimated_generation_time_minutes",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedEvidenceTypeResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of evidence types",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminEvidenceTypeResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateEvidenceTypeDto": {
        "type": "object",
        "properties": {
          "evidence_code": {
            "type": "string",
            "description": "Unique evidence code",
            "example": "RISK_ASSESSMENT_DOC",
            "maxLength": 100
          },
          "evidence_name": {
            "type": "string",
            "description": "Evidence name",
            "example": "Risk Assessment Documentation",
            "maxLength": 200
          },
          "evidence_category": {
            "type": "string",
            "description": "Evidence category",
            "example": "SAFETY",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "Description of the evidence type",
            "example": "Comprehensive risk assessment documentation for workplace hazards"
          },
          "data_sources": {
            "type": "object",
            "description": "Data sources configuration",
            "additionalProperties": true,
            "example": {
              "primaryTable": "risk_assessments",
              "relatedTables": [
                "risk_controls",
                "risk_reviews"
              ],
              "joinConditions": [
                "risk_assessment_id"
              ]
            }
          },
          "extraction_rules": {
            "type": "object",
            "description": "Extraction rules",
            "additionalProperties": true,
            "example": {
              "extractionRules": [
                "active_only",
                "last_12_months"
              ],
              "sorting": "date_desc",
              "grouping": "by_department"
            }
          },
          "output_format": {
            "type": "object",
            "description": "Output format configuration",
            "additionalProperties": true,
            "example": {
              "fileType": "pdf",
              "template": "risk_assessment_template",
              "mergeStrategy": "single_document"
            }
          },
          "legal_significance": {
            "type": "string",
            "description": "Legal significance level",
            "default": "IMPORTANT",
            "enum": [
              "CRITICAL",
              "IMPORTANT",
              "STANDARD",
              "LOW"
            ],
            "maxLength": 20
          },
          "retention_period_years": {
            "type": "number",
            "description": "Retention period in years",
            "default": 6,
            "minimum": 0
          },
          "processing_complexity": {
            "type": "string",
            "description": "Processing complexity",
            "default": "SIMPLE",
            "enum": [
              "SIMPLE",
              "MODERATE",
              "COMPLEX",
              "VERY_COMPLEX"
            ],
            "maxLength": 20
          },
          "estimated_generation_time_minutes": {
            "type": "number",
            "description": "Estimated generation time in minutes",
            "default": 5,
            "minimum": 0
          },
          "is_active": {
            "type": "boolean",
            "description": "Is active",
            "default": true
          }
        },
        "required": [
          "evidence_code",
          "evidence_name",
          "evidence_category",
          "data_sources",
          "extraction_rules",
          "output_format"
        ]
      },
      "AdminUpdateEvidenceTypeDto": {
        "type": "object",
        "properties": {
          "evidence_name": {
            "type": "string",
            "description": "Evidence name",
            "maxLength": 200
          },
          "evidence_category": {
            "type": "string",
            "description": "Evidence category",
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "Description of the evidence type"
          },
          "data_sources": {
            "type": "object",
            "description": "Data sources configuration",
            "additionalProperties": true
          },
          "extraction_rules": {
            "type": "object",
            "description": "Extraction rules",
            "additionalProperties": true
          },
          "output_format": {
            "type": "object",
            "description": "Output format configuration",
            "additionalProperties": true
          },
          "legal_significance": {
            "type": "string",
            "description": "Legal significance level",
            "enum": [
              "CRITICAL",
              "IMPORTANT",
              "STANDARD",
              "LOW"
            ],
            "maxLength": 20
          },
          "retention_period_years": {
            "type": "number",
            "description": "Retention period in years",
            "minimum": 0
          },
          "processing_complexity": {
            "type": "string",
            "description": "Processing complexity",
            "enum": [
              "SIMPLE",
              "MODERATE",
              "COMPLEX",
              "VERY_COMPLEX"
            ],
            "maxLength": 20
          },
          "estimated_generation_time_minutes": {
            "type": "number",
            "description": "Estimated generation time in minutes",
            "minimum": 0
          },
          "is_active": {
            "type": "boolean",
            "description": "Is active"
          }
        }
      },
      "AdminAnalyticsQueryCacheResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "cache_key": {
            "type": "string",
            "description": "Unique cache key",
            "maxLength": 255
          },
          "query_hash": {
            "type": "string",
            "description": "Query hash for validation",
            "maxLength": 64
          },
          "result_data": {
            "type": "object",
            "description": "Cached result data",
            "additionalProperties": true
          },
          "expires_at": {
            "format": "date-time",
            "type": "string",
            "description": "Cache expiration time"
          },
          "hit_count": {
            "type": "number",
            "description": "Number of cache hits"
          },
          "last_accessed": {
            "format": "date-time",
            "type": "string",
            "description": "Last time the cache was accessed"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "cache_key",
          "query_hash",
          "expires_at",
          "hit_count",
          "last_accessed",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedAnalyticsQueryCacheResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of analytics cache entries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminAnalyticsQueryCacheResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCacheStatisticsDto": {
        "type": "object",
        "properties": {
          "total_entries": {
            "type": "number",
            "description": "Total number of cache entries"
          },
          "active_entries": {
            "type": "number",
            "description": "Number of active (non-expired) entries"
          },
          "expired_entries": {
            "type": "number",
            "description": "Number of expired entries"
          },
          "total_hits": {
            "type": "number",
            "description": "Total cache hits"
          },
          "avg_hit_count": {
            "type": "number",
            "description": "Average hit count per entry"
          },
          "hit_rate": {
            "type": "number",
            "description": "Cache hit rate percentage"
          },
          "total_size_bytes": {
            "type": "number",
            "description": "Total cache size in bytes"
          },
          "top_accessed": {
            "type": "array",
            "description": "Most accessed cache keys",
            "items": {
              "type": "object",
              "properties": {
                "cache_key": {
                  "type": "string"
                },
                "hit_count": {
                  "type": "number"
                },
                "last_accessed": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "generated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Statistics generated at"
          }
        },
        "required": [
          "total_entries",
          "active_entries",
          "expired_entries",
          "total_hits",
          "avg_hit_count",
          "hit_rate",
          "total_size_bytes",
          "top_accessed",
          "generated_at"
        ]
      },
      "AdminClearCacheDto": {
        "type": "object",
        "properties": {
          "expired_only": {
            "type": "boolean",
            "description": "Clear only expired entries",
            "default": false
          },
          "older_than": {
            "type": "string",
            "description": "Clear entries older than this date"
          },
          "hit_count_less_than": {
            "type": "number",
            "description": "Clear entries with hit count less than this value",
            "minimum": 0
          },
          "cache_keys": {
            "description": "Specific cache keys to clear",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AdminOptimizeCacheDto": {
        "type": "object",
        "properties": {
          "remove_low_hit": {
            "type": "boolean",
            "description": "Remove entries with low hit count",
            "default": true
          },
          "min_hit_count": {
            "type": "number",
            "description": "Minimum hit count to keep",
            "default": 5,
            "minimum": 0
          },
          "remove_expired": {
            "type": "boolean",
            "description": "Remove expired entries",
            "default": true
          },
          "compact_large_entries": {
            "type": "boolean",
            "description": "Compact large entries",
            "default": false
          },
          "max_age_days": {
            "type": "number",
            "description": "Maximum age in days to keep",
            "minimum": 1
          }
        }
      },
      "AdminDataUpdateLogResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "update_id": {
            "type": "string",
            "description": "Unique update identifier"
          },
          "component": {
            "type": "string",
            "description": "Component being updated"
          },
          "update_type": {
            "type": "string",
            "description": "Type of update"
          },
          "from_version": {
            "type": "object",
            "description": "Version before update"
          },
          "to_version": {
            "type": "string",
            "description": "Version after update"
          },
          "trigger_type": {
            "type": "string",
            "description": "What triggered the update",
            "enum": [
              "MANUAL",
              "SCHEDULED",
              "SYSTEM_UPDATE",
              "CONTENT_CHANGE",
              "COMPLIANCE_UPDATE"
            ]
          },
          "trigger_source": {
            "type": "object",
            "description": "Source of the trigger"
          },
          "priority": {
            "type": "string",
            "description": "Update priority",
            "default": "medium"
          },
          "started_at": {
            "format": "date-time",
            "type": "string",
            "description": "When the update started"
          },
          "completed_at": {
            "type": "object",
            "description": "When the update completed"
          },
          "status": {
            "type": "string",
            "description": "Current status",
            "enum": [
              "QUEUED",
              "RUNNING",
              "COMPLETED",
              "FAILED",
              "CANCELLED"
            ]
          },
          "total_items": {
            "type": "number",
            "description": "Total items to process"
          },
          "processed_items": {
            "type": "number",
            "description": "Items processed so far"
          },
          "created_items": {
            "type": "number",
            "description": "Items created"
          },
          "updated_items": {
            "type": "number",
            "description": "Items updated"
          },
          "deleted_items": {
            "type": "number",
            "description": "Items deleted"
          },
          "failed_items": {
            "type": "number",
            "description": "Items that failed"
          },
          "execution_details": {
            "type": "object",
            "description": "Execution details",
            "additionalProperties": true
          },
          "error_details": {
            "type": "object",
            "description": "Error details if failed",
            "additionalProperties": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "update_id",
          "component",
          "update_type",
          "to_version",
          "trigger_type",
          "priority",
          "started_at",
          "status",
          "total_items",
          "processed_items",
          "created_items",
          "updated_items",
          "deleted_items",
          "failed_items",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedDataUpdateLogResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of data update logs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminDataUpdateLogResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminDataUpdateLogStatisticsDto": {
        "type": "object",
        "properties": {
          "total_logs": {
            "type": "number",
            "description": "Total number of logs"
          },
          "by_status": {
            "type": "object",
            "description": "Logs by status",
            "additionalProperties": true
          },
          "by_component": {
            "type": "object",
            "description": "Logs by component",
            "additionalProperties": true
          },
          "by_trigger_type": {
            "type": "object",
            "description": "Logs by trigger type",
            "additionalProperties": true
          },
          "avg_execution_time_seconds": {
            "type": "number",
            "description": "Average execution time in seconds"
          },
          "success_rate": {
            "type": "number",
            "description": "Success rate percentage"
          },
          "total_items_processed": {
            "type": "number",
            "description": "Total items processed"
          },
          "recent_failures": {
            "type": "array",
            "description": "Recent failures",
            "items": {
              "type": "object",
              "properties": {
                "update_id": {
                  "type": "string"
                },
                "component": {
                  "type": "string"
                },
                "started_at": {
                  "type": "string",
                  "format": "date-time"
                },
                "error_summary": {
                  "type": "string"
                }
              }
            }
          },
          "generated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Statistics generated at"
          }
        },
        "required": [
          "total_logs",
          "by_status",
          "by_component",
          "by_trigger_type",
          "avg_execution_time_seconds",
          "success_rate",
          "total_items_processed",
          "recent_failures",
          "generated_at"
        ]
      },
      "AdminCleanupDataUpdateLogsDto": {
        "type": "object",
        "properties": {
          "older_than_days": {
            "type": "number",
            "description": "Delete logs older than this many days",
            "default": 90,
            "minimum": 1
          },
          "keep_latest_per_component": {
            "type": "number",
            "description": "Keep only the latest N logs per component",
            "minimum": 1
          },
          "statuses": {
            "type": "array",
            "description": "Delete only logs with these statuses",
            "items": {
              "type": "string",
              "enum": [
                "QUEUED",
                "RUNNING",
                "COMPLETED",
                "FAILED",
                "CANCELLED"
              ]
            }
          },
          "components": {
            "description": "Delete logs for specific components only",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "preserve_errors": {
            "type": "boolean",
            "description": "Preserve logs with errors",
            "default": true
          }
        }
      },
      "AdminPresetContentUpdateQueueResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "content_type": {
            "type": "string"
          },
          "content_code": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "scheduled_at": {
            "format": "date-time",
            "type": "string"
          },
          "content_data": {
            "type": "object",
            "additionalProperties": true
          },
          "previous_version": {
            "type": "object"
          },
          "target_version": {
            "type": "string"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "QUEUED",
              "RUNNING",
              "COMPLETED",
              "FAILED",
              "CANCELLED"
            ]
          },
          "retry_count": {
            "type": "number"
          },
          "max_retries": {
            "type": "number"
          },
          "started_at": {
            "type": "object"
          },
          "completed_at": {
            "type": "object"
          },
          "error_message": {
            "type": "object"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "content_type",
          "content_code",
          "action",
          "priority",
          "scheduled_at",
          "content_data",
          "target_version",
          "dependencies",
          "status",
          "retry_count",
          "max_retries",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedPresetContentUpdateQueueResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of preset content update queue items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminPresetContentUpdateQueueResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminQueueStatusDto": {
        "type": "object",
        "properties": {
          "total_items": {
            "type": "number",
            "description": "Total items in queue"
          },
          "by_status": {
            "type": "object",
            "description": "Items by status",
            "additionalProperties": true
          },
          "by_priority": {
            "type": "object",
            "description": "Items by priority",
            "additionalProperties": true
          },
          "by_content_type": {
            "type": "object",
            "description": "Items by content type",
            "additionalProperties": true
          },
          "ready_to_process": {
            "type": "number",
            "description": "Items ready to process"
          },
          "retriable_failures": {
            "type": "number",
            "description": "Failed items that can be retried"
          },
          "avg_wait_time_seconds": {
            "type": "number",
            "description": "Average wait time in seconds"
          },
          "next_item": {
            "type": "object",
            "description": "Next scheduled item",
            "nullable": true,
            "additionalProperties": true
          },
          "generated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Status generated at"
          }
        },
        "required": [
          "total_items",
          "by_status",
          "by_priority",
          "by_content_type",
          "ready_to_process",
          "retriable_failures",
          "avg_wait_time_seconds",
          "next_item",
          "generated_at"
        ]
      },
      "AdminCreatePresetContentUpdateQueueDto": {
        "type": "object",
        "properties": {
          "content_type": {
            "type": "string",
            "description": "Type of content to update",
            "example": "LeaveTypeTemplate"
          },
          "content_code": {
            "type": "string",
            "description": "Content code identifier",
            "example": "ANNUAL_LEAVE"
          },
          "action": {
            "type": "string",
            "description": "Action to perform",
            "example": "CREATE",
            "enum": [
              "CREATE",
              "UPDATE",
              "DELETE",
              "DEPLOY"
            ]
          },
          "priority": {
            "type": "string",
            "description": "Priority level",
            "default": "medium",
            "enum": [
              "low",
              "medium",
              "high",
              "critical"
            ]
          },
          "scheduled_at": {
            "type": "string",
            "description": "Scheduled execution time",
            "default": "now"
          },
          "content_data": {
            "type": "object",
            "description": "Content data to process",
            "additionalProperties": true
          },
          "previous_version": {
            "type": "string",
            "description": "Previous version identifier"
          },
          "target_version": {
            "type": "string",
            "description": "Target version identifier",
            "example": "2.0.0"
          },
          "dependencies": {
            "description": "List of dependency content codes",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "max_retries": {
            "type": "number",
            "description": "Maximum retry attempts",
            "default": 3,
            "minimum": 0,
            "maximum": 10
          }
        },
        "required": [
          "content_type",
          "content_code",
          "action",
          "content_data",
          "target_version"
        ]
      },
      "AdminUpdatePresetContentUpdateQueueDto": {
        "type": "object",
        "properties": {
          "priority": {
            "type": "string",
            "description": "Priority level",
            "enum": [
              "low",
              "medium",
              "high",
              "critical"
            ]
          },
          "scheduled_at": {
            "type": "string",
            "description": "Scheduled execution time"
          },
          "status": {
            "type": "string",
            "description": "Status",
            "enum": [
              "QUEUED",
              "RUNNING",
              "COMPLETED",
              "FAILED",
              "CANCELLED"
            ]
          },
          "max_retries": {
            "type": "number",
            "description": "Maximum retry attempts",
            "minimum": 0,
            "maximum": 10
          }
        }
      },
      "AdminProcessQueueDto": {
        "type": "object",
        "properties": {
          "batch_size": {
            "type": "number",
            "description": "Maximum items to process",
            "default": 10,
            "minimum": 1,
            "maximum": 100
          },
          "min_priority": {
            "type": "string",
            "description": "Process only items with this priority or higher",
            "enum": [
              "low",
              "medium",
              "high",
              "critical"
            ]
          },
          "content_types": {
            "description": "Process specific content types only",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "dry_run": {
            "type": "boolean",
            "description": "Process items in dry run mode",
            "default": false
          }
        }
      },
      "AdminPresetContentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "content_type": {
            "type": "string",
            "enum": [
              "contract",
              "policy",
              "document",
              "form",
              "training"
            ]
          },
          "code": {
            "type": "string"
          },
          "title_en": {
            "type": "string"
          },
          "description_en": {
            "type": "object"
          },
          "content_data": {
            "type": "object",
            "additionalProperties": true
          },
          "localization_data": {
            "type": "object",
            "additionalProperties": true
          },
          "version": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "ARCHIVED",
              "DEPRECATED"
            ]
          },
          "is_system_default": {
            "type": "boolean"
          },
          "jurisdictions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_review_date": {
            "type": "object"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "content_type",
          "code",
          "title_en",
          "content_data",
          "localization_data",
          "version",
          "status",
          "is_system_default",
          "jurisdictions",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedPresetContentResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of preset content items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminPresetContentResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreatePresetContentDto": {
        "type": "object",
        "properties": {
          "content_type": {
            "type": "string",
            "description": "Type of content",
            "enum": [
              "contract",
              "policy",
              "document",
              "form",
              "training"
            ],
            "example": "contract"
          },
          "code": {
            "type": "string",
            "description": "Unique content code",
            "example": "EMPLOYMENT_CONTRACT_STANDARD",
            "maxLength": 100
          },
          "title_en": {
            "type": "string",
            "description": "Title in English",
            "example": "Standard Employment Contract",
            "maxLength": 200
          },
          "description_en": {
            "type": "string",
            "description": "Description in English",
            "example": "Standard employment contract template for permanent employees"
          },
          "content_data": {
            "type": "object",
            "description": "Main content data",
            "additionalProperties": true,
            "example": {
              "template": "contract template content",
              "fields": [
                "employee_name",
                "start_date",
                "salary"
              ],
              "sections": [
                "terms",
                "conditions",
                "benefits"
              ]
            }
          },
          "localization_data": {
            "type": "object",
            "description": "Localization data for multiple languages",
            "additionalProperties": true,
            "default": {},
            "example": {
              "cy": {
                "title": "Cytundeb Cyflogaeth Safonol"
              },
              "gd": {
                "title": "Cùmhnant Cosnaidh Àbhaisteach"
              }
            }
          },
          "version": {
            "type": "string",
            "description": "Content version",
            "default": "1.0.0",
            "example": "1.0.0"
          },
          "status": {
            "type": "string",
            "description": "Content status",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "ARCHIVED",
              "DEPRECATED"
            ],
            "default": "ACTIVE"
          },
          "is_system_default": {
            "type": "boolean",
            "description": "Is system default content",
            "default": false
          },
          "jurisdictions": {
            "description": "Jurisdictions this content applies to",
            "default": [
              "UK"
            ],
            "example": [
              "UK",
              "Scotland",
              "Wales",
              "Northern Ireland"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_review_date": {
            "type": "string",
            "description": "Last compliance review date",
            "example": "2024-01-01"
          }
        },
        "required": [
          "content_type",
          "code",
          "title_en",
          "content_data"
        ]
      },
      "AdminUpdatePresetContentDto": {
        "type": "object",
        "properties": {
          "title_en": {
            "type": "string",
            "description": "Title in English",
            "maxLength": 200
          },
          "description_en": {
            "type": "string",
            "description": "Description in English"
          },
          "content_data": {
            "type": "object",
            "description": "Main content data",
            "additionalProperties": true
          },
          "localization_data": {
            "type": "object",
            "description": "Localization data for multiple languages",
            "additionalProperties": true
          },
          "version": {
            "type": "string",
            "description": "Content version"
          },
          "status": {
            "type": "string",
            "description": "Content status",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "ARCHIVED",
              "DEPRECATED"
            ]
          },
          "is_system_default": {
            "type": "boolean",
            "description": "Is system default content"
          },
          "jurisdictions": {
            "description": "Jurisdictions this content applies to",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_review_date": {
            "type": "string",
            "description": "Last compliance review date"
          }
        }
      },
      "AdminBulkImportPresetContentDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "Array of preset content to import",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminCreatePresetContentDto"
            }
          },
          "update_existing": {
            "type": "boolean",
            "description": "Update existing items with same code",
            "default": false
          }
        },
        "required": [
          "items"
        ]
      },
      "AdminClonePresetContentDto": {
        "type": "object",
        "properties": {
          "new_code": {
            "type": "string",
            "description": "New unique code for cloned content",
            "example": "EMPLOYMENT_CONTRACT_EXECUTIVE"
          },
          "new_title": {
            "type": "string",
            "description": "New title for cloned content",
            "example": "Executive Employment Contract"
          },
          "new_description": {
            "type": "string",
            "description": "New description for cloned content"
          },
          "reset_version": {
            "type": "boolean",
            "description": "Reset version to 1.0.0",
            "default": true
          }
        },
        "required": [
          "new_code",
          "new_title"
        ]
      },
      "AdminDeployPresetContentDto": {
        "type": "object",
        "properties": {
          "tenant_ids": {
            "description": "List of tenant IDs to deploy to",
            "example": [
              "tenant-1",
              "tenant-2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "override_existing": {
            "type": "boolean",
            "description": "Override existing content",
            "default": false
          },
          "target_jurisdictions": {
            "description": "Deploy only to tenants in specific jurisdictions",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "tenant_ids"
        ]
      },
      "AdminLocalizationConfigurationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "localization_code": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "language_code": {
            "type": "string"
          },
          "country_code": {
            "type": "object"
          },
          "region": {
            "type": "object"
          },
          "date_format": {
            "type": "string"
          },
          "currency_code": {
            "type": "string"
          },
          "currency_symbol": {
            "type": "string"
          },
          "number_format": {
            "type": "object"
          },
          "legal_framework": {
            "type": "object"
          },
          "compliance_requirements": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cultural_preferences": {
            "type": "object"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "translation_count": {
            "type": "number",
            "description": "Number of translations for this localization",
            "example": 150
          }
        },
        "required": [
          "id",
          "localization_code",
          "display_name",
          "language_code",
          "date_format",
          "currency_code",
          "currency_symbol",
          "number_format",
          "compliance_requirements",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedLocalizationConfigurationResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of localization configurations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminLocalizationConfigurationResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateLocalizationConfigurationDto": {
        "type": "object",
        "properties": {
          "localization_code": {
            "type": "string",
            "description": "Unique localization code",
            "example": "en_GB"
          },
          "display_name": {
            "type": "string",
            "description": "Display name for the localization",
            "example": "English (United Kingdom)"
          },
          "language_code": {
            "type": "string",
            "description": "Language code",
            "example": "en"
          },
          "country_code": {
            "type": "string",
            "description": "Country code",
            "example": "GB"
          },
          "region": {
            "type": "string",
            "description": "Region",
            "example": "Europe"
          },
          "date_format": {
            "type": "string",
            "description": "Date format",
            "default": "DD/MM/YYYY",
            "example": "DD/MM/YYYY"
          },
          "currency_code": {
            "type": "string",
            "description": "Currency code",
            "default": "GBP",
            "example": "GBP"
          },
          "currency_symbol": {
            "type": "string",
            "description": "Currency symbol",
            "default": "£",
            "example": "£"
          },
          "number_format": {
            "type": "object",
            "description": "Number format configuration",
            "default": {
              "decimal_separator": ".",
              "thousand_separator": ","
            },
            "example": {
              "decimal_separator": ".",
              "thousand_separator": ","
            }
          },
          "legal_framework": {
            "type": "object",
            "description": "Legal framework configuration",
            "example": {
              "employment_law": "UK Employment Act",
              "data_protection": "UK GDPR"
            }
          },
          "compliance_requirements": {
            "description": "Compliance requirements",
            "example": [
              "GDPR",
              "IR35",
              "AWR"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cultural_preferences": {
            "type": "object",
            "description": "Cultural preferences",
            "example": {
              "working_week_start": "Monday",
              "time_format": "24h"
            }
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the configuration is active",
            "default": true
          }
        },
        "required": [
          "localization_code",
          "display_name",
          "language_code"
        ]
      },
      "AdminUpdateLocalizationConfigurationDto": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Display name for the localization"
          },
          "language_code": {
            "type": "string",
            "description": "Language code"
          },
          "country_code": {
            "type": "string",
            "description": "Country code"
          },
          "region": {
            "type": "string",
            "description": "Region"
          },
          "date_format": {
            "type": "string",
            "description": "Date format"
          },
          "currency_code": {
            "type": "string",
            "description": "Currency code"
          },
          "currency_symbol": {
            "type": "string",
            "description": "Currency symbol"
          },
          "number_format": {
            "type": "object",
            "description": "Number format configuration"
          },
          "legal_framework": {
            "type": "object",
            "description": "Legal framework configuration"
          },
          "compliance_requirements": {
            "description": "Compliance requirements",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cultural_preferences": {
            "type": "object",
            "description": "Cultural preferences"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the configuration is active"
          }
        }
      },
      "AdminLocalizationTranslationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "localization_id": {
            "type": "string"
          },
          "translation_key": {
            "type": "string"
          },
          "translation_context": {
            "type": "object"
          },
          "translated_text": {
            "type": "string"
          },
          "alternative_translations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "translation_quality": {
            "type": "string"
          },
          "translator": {
            "type": "object"
          },
          "reviewer": {
            "type": "object"
          },
          "translation_version": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "localization_id",
          "translation_key",
          "translated_text",
          "alternative_translations",
          "translation_quality",
          "translation_version",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedLocalizationTranslationResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of localization translations",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminLocalizationTranslationResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminCreateLocalizationTranslationDto": {
        "type": "object",
        "properties": {
          "localization_id": {
            "type": "string",
            "description": "Localization configuration ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "translation_key": {
            "type": "string",
            "description": "Translation key",
            "example": "common.button.submit"
          },
          "translation_context": {
            "type": "string",
            "description": "Translation context",
            "example": "Used for form submission buttons"
          },
          "translated_text": {
            "type": "string",
            "description": "Translated text",
            "example": "Submit"
          },
          "alternative_translations": {
            "description": "Alternative translations",
            "example": [
              "Send",
              "Confirm"
            ],
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "translation_quality": {
            "type": "string",
            "description": "Translation quality",
            "default": "reviewed",
            "example": "reviewed",
            "enum": [
              "draft",
              "reviewed",
              "approved",
              "needs_review"
            ]
          },
          "translator": {
            "type": "string",
            "description": "Translator name or ID",
            "example": "John Doe"
          },
          "reviewer": {
            "type": "string",
            "description": "Reviewer name or ID",
            "example": "Jane Smith"
          },
          "translation_version": {
            "type": "string",
            "description": "Translation version",
            "default": "1.0.0",
            "example": "1.0.0"
          }
        },
        "required": [
          "localization_id",
          "translation_key",
          "translated_text"
        ]
      },
      "AdminUpdateLocalizationTranslationDto": {
        "type": "object",
        "properties": {
          "translation_context": {
            "type": "string",
            "description": "Translation context"
          },
          "translated_text": {
            "type": "string",
            "description": "Translated text"
          },
          "alternative_translations": {
            "description": "Alternative translations",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "translation_quality": {
            "type": "string",
            "description": "Translation quality",
            "enum": [
              "draft",
              "reviewed",
              "approved",
              "needs_review"
            ]
          },
          "translator": {
            "type": "string",
            "description": "Translator name or ID"
          },
          "reviewer": {
            "type": "string",
            "description": "Reviewer name or ID"
          },
          "translation_version": {
            "type": "string",
            "description": "Translation version"
          }
        }
      },
      "AdminSystemInitializationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "component": {
            "type": "string"
          },
          "is_initialized": {
            "type": "boolean"
          },
          "initialization_version": {
            "type": "object"
          },
          "initialization_date": {
            "type": "object"
          },
          "last_update_version": {
            "type": "object"
          },
          "last_update_date": {
            "type": "object"
          },
          "status": {
            "type": "string"
          },
          "error_message": {
            "type": "object"
          },
          "total_items": {
            "type": "number"
          },
          "processed_items": {
            "type": "number"
          },
          "failed_items": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "progress_percentage": {
            "type": "number",
            "description": "Progress percentage",
            "example": 75.5
          }
        },
        "required": [
          "id",
          "component",
          "is_initialized",
          "status",
          "total_items",
          "processed_items",
          "failed_items",
          "created_at",
          "updated_at"
        ]
      },
      "AdminPaginatedSystemInitializationResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of system initialization statuses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminSystemInitializationResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "AdminUpdateSystemInitializationDto": {
        "type": "object",
        "properties": {
          "is_initialized": {
            "type": "boolean",
            "description": "Whether the component is initialized"
          },
          "initialization_version": {
            "type": "string",
            "description": "Initialization version"
          },
          "last_update_version": {
            "type": "string",
            "description": "Last update version"
          },
          "last_update_date": {
            "type": "string",
            "description": "Last update date"
          },
          "status": {
            "type": "string",
            "description": "Status of the initialization"
          },
          "error_message": {
            "type": "string",
            "description": "Error message if any"
          },
          "total_items": {
            "type": "number",
            "description": "Total items to process"
          },
          "processed_items": {
            "type": "number",
            "description": "Processed items count"
          },
          "failed_items": {
            "type": "number",
            "description": "Failed items count"
          }
        }
      },
      "AdminBulkUpdateDto": {
        "type": "object",
        "properties": {
          "tenant_ids": {
            "description": "List of tenant IDs to update",
            "example": [
              "tenant-1",
              "tenant-2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "entity_type": {
            "type": "string",
            "description": "Type of entity to update",
            "example": "leave_policy"
          },
          "update_data": {
            "type": "object",
            "description": "Update data to apply",
            "additionalProperties": true,
            "example": {
              "max_days": 30,
              "carry_forward": true
            }
          },
          "filter_criteria": {
            "type": "object",
            "description": "Filter criteria for selective update",
            "additionalProperties": true
          },
          "dry_run": {
            "type": "boolean",
            "description": "Run in dry-run mode to preview changes",
            "default": false
          },
          "create_backup": {
            "type": "boolean",
            "description": "Create backup before update",
            "default": true
          }
        },
        "required": [
          "tenant_ids",
          "entity_type",
          "update_data"
        ]
      },
      "AdminOperationResultDto": {
        "type": "object",
        "properties": {
          "operation_id": {
            "type": "string"
          },
          "operation_type": {
            "type": "string",
            "enum": [
              "BULK_UPDATE",
              "DATA_MIGRATION",
              "CLEANUP",
              "HEALTH_CHECK",
              "DEPLOYMENT",
              "BACKUP",
              "RESTORE"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "PARTIALLY_COMPLETED"
            ]
          },
          "started_at": {
            "format": "date-time",
            "type": "string"
          },
          "completed_at": {
            "format": "date-time",
            "type": "string"
          },
          "total_tenants": {
            "type": "number"
          },
          "successful_tenants": {
            "type": "number"
          },
          "failed_tenants": {
            "type": "number"
          },
          "details": {
            "type": "object",
            "additionalProperties": true
          },
          "tenant_results": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "operation_id",
          "operation_type",
          "status",
          "started_at",
          "total_tenants",
          "successful_tenants",
          "failed_tenants",
          "details",
          "tenant_results"
        ]
      },
      "AdminDataMigrationDto": {
        "type": "object",
        "properties": {
          "source_tenant_id": {
            "type": "string",
            "description": "Source tenant ID",
            "example": "tenant-source"
          },
          "target_tenant_ids": {
            "description": "Target tenant IDs",
            "example": [
              "tenant-target-1",
              "tenant-target-2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "data_types": {
            "description": "Data types to migrate",
            "example": [
              "policies",
              "templates",
              "configurations"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "migration_options": {
            "type": "object",
            "description": "Migration options",
            "additionalProperties": true,
            "default": {},
            "example": {
              "overwrite_existing": false,
              "merge_data": true
            }
          },
          "start_date": {
            "type": "string",
            "description": "Start date for data migration"
          },
          "end_date": {
            "type": "string",
            "description": "End date for data migration"
          }
        },
        "required": [
          "source_tenant_id",
          "target_tenant_ids",
          "data_types"
        ]
      },
      "AdminDataCleanupDto": {
        "type": "object",
        "properties": {
          "tenant_ids": {
            "description": "Tenant IDs to cleanup",
            "example": [
              "tenant-1",
              "tenant-2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cleanup_types": {
            "description": "Types of data to cleanup",
            "example": [
              "old_logs",
              "archived_records",
              "temp_files"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "retention_days": {
            "type": "number",
            "description": "Retention period in days",
            "default": 90,
            "minimum": 1,
            "maximum": 365
          },
          "dry_run": {
            "type": "boolean",
            "description": "Run in dry-run mode",
            "default": false
          },
          "force": {
            "type": "boolean",
            "description": "Force cleanup even for active data",
            "default": false
          }
        },
        "required": [
          "tenant_ids",
          "cleanup_types"
        ]
      },
      "TenantHealthStatusDto": {
        "type": "object",
        "properties": {
          "tenant_id": {
            "type": "string"
          },
          "tenant_name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "database_status": {
            "type": "string"
          },
          "last_activity": {
            "format": "date-time",
            "type": "string"
          },
          "employee_count": {
            "type": "number"
          },
          "storage_used_mb": {
            "type": "number"
          },
          "api_calls_today": {
            "type": "number"
          },
          "warnings": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "checked_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "tenant_id",
          "tenant_name",
          "status",
          "database_status",
          "last_activity",
          "employee_count",
          "storage_used_mb",
          "api_calls_today",
          "warnings",
          "errors",
          "checked_at"
        ]
      },
      "RegulatoryUpdateStatusDto": {
        "type": "object",
        "properties": {
          "update_type": {
            "type": "string",
            "enum": [
              "MINIMUM_WAGE",
              "STATUTORY_RATES",
              "TAX_CODES",
              "PUBLIC_HOLIDAYS",
              "PENSION_RATES",
              "EMPLOYMENT_LAW",
              "HEALTH_SAFETY"
            ]
          },
          "current_version": {
            "type": "string"
          },
          "latest_version": {
            "type": "string"
          },
          "update_available": {
            "type": "boolean"
          },
          "last_updated": {
            "format": "date-time",
            "type": "string"
          },
          "next_update_date": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "changes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mandatory": {
            "type": "boolean"
          },
          "effective_date": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "update_type",
          "current_version",
          "latest_version",
          "update_available",
          "last_updated",
          "description",
          "changes",
          "mandatory"
        ]
      },
      "ApplyRegulatoryUpdateDto": {
        "type": "object",
        "properties": {
          "update_types": {
            "type": "array",
            "description": "Types of regulatory updates to apply",
            "example": [
              "MINIMUM_WAGE",
              "STATUTORY_RATES"
            ],
            "items": {
              "type": "string",
              "enum": [
                "MINIMUM_WAGE",
                "STATUTORY_RATES",
                "TAX_CODES",
                "PUBLIC_HOLIDAYS",
                "PENSION_RATES",
                "EMPLOYMENT_LAW",
                "HEALTH_SAFETY"
              ]
            }
          },
          "tenant_ids": {
            "description": "Apply to specific tenants only",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "scheduled_date": {
            "type": "string",
            "description": "Schedule update for future date"
          },
          "create_backup": {
            "type": "boolean",
            "description": "Create backup before applying",
            "default": true
          },
          "notify_tenants": {
            "type": "boolean",
            "description": "Send notifications to affected tenants",
            "default": true
          }
        },
        "required": [
          "update_types"
        ]
      },
      "RegulatoryUpdateHistoryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "update_type": {
            "type": "string",
            "enum": [
              "MINIMUM_WAGE",
              "STATUTORY_RATES",
              "TAX_CODES",
              "PUBLIC_HOLIDAYS",
              "PENSION_RATES",
              "EMPLOYMENT_LAW",
              "HEALTH_SAFETY"
            ]
          },
          "version": {
            "type": "string"
          },
          "applied_at": {
            "format": "date-time",
            "type": "string"
          },
          "applied_by": {
            "type": "string"
          },
          "affected_tenants": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "PARTIALLY_COMPLETED"
            ]
          },
          "changes_applied": {
            "type": "object",
            "additionalProperties": true
          },
          "rollback_available": {
            "type": "boolean"
          },
          "notes": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "update_type",
          "version",
          "applied_at",
          "applied_by",
          "affected_tenants",
          "status",
          "changes_applied"
        ]
      },
      "RollbackRegulatoryUpdateDto": {
        "type": "object",
        "properties": {
          "update_id": {
            "type": "string",
            "description": "Update history ID to rollback",
            "example": "update-123"
          },
          "reason": {
            "type": "string",
            "description": "Reason for rollback",
            "example": "Incorrect values applied"
          },
          "tenant_ids": {
            "description": "Apply to specific tenants only",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "update_id"
        ]
      },
      "SystemPresetDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "preset_type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean"
          },
          "configuration": {
            "type": "object",
            "additionalProperties": true
          },
          "version": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "preset_type",
          "name",
          "description",
          "is_active",
          "is_default",
          "configuration",
          "version",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateSystemPresetDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Preset name"
          },
          "description": {
            "type": "string",
            "description": "Preset description"
          },
          "is_active": {
            "type": "boolean",
            "description": "Is active"
          },
          "configuration": {
            "type": "object",
            "description": "Preset configuration",
            "additionalProperties": true
          },
          "version": {
            "type": "string",
            "description": "Version"
          }
        }
      },
      "EmployeeProfileDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "employee_no": {
            "type": "string",
            "example": "EMP001"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "example": "07700900123"
          },
          "address": {
            "type": "string",
            "example": "123 Main Street, London"
          },
          "postcode": {
            "type": "string",
            "example": "SW1A 1AA"
          },
          "emergency_contact_name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "emergency_contact_phone": {
            "type": "string",
            "example": "07800123456"
          },
          "bank_name": {
            "type": "string",
            "example": "Barclays Bank"
          },
          "bank_account_no": {
            "type": "string",
            "example": "12345678"
          },
          "bank_sort_code": {
            "type": "string",
            "example": "20-00-00"
          },
          "current_position": {
            "type": "string",
            "example": "Software Engineer"
          },
          "current_department": {
            "type": "string",
            "example": "Engineering Department"
          }
        },
        "required": [
          "id",
          "employee_no",
          "first_name",
          "last_name",
          "email",
          "phone",
          "address",
          "postcode",
          "emergency_contact_name",
          "emergency_contact_phone",
          "bank_name",
          "bank_account_no",
          "bank_sort_code",
          "current_position",
          "current_department"
        ]
      },
      "UpdatePersonalInfoDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "example": "07700900123"
          },
          "address": {
            "type": "string",
            "example": "123 Main Street, London"
          },
          "postcode": {
            "type": "string",
            "example": "SW1A 1AA"
          },
          "emergency_contact_name": {
            "type": "string",
            "example": "John Doe"
          },
          "emergency_contact_phone": {
            "type": "string",
            "example": "07800123456"
          },
          "bank_name": {
            "type": "string",
            "example": "Barclays Bank"
          },
          "bank_account_no": {
            "type": "string",
            "example": "12345678"
          },
          "bank_sort_code": {
            "type": "string",
            "example": "20-00-00"
          }
        }
      },
      "PayslipSummaryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "pay_period": {
            "type": "string",
            "example": "2024-01"
          },
          "gross_pay": {
            "type": "number",
            "example": 3500
          },
          "net_pay": {
            "type": "number",
            "example": 2800
          },
          "pay_date": {
            "type": "string",
            "example": "2024-01-31"
          },
          "status": {
            "type": "string",
            "example": "PAID"
          }
        },
        "required": [
          "id",
          "pay_period",
          "gross_pay",
          "net_pay",
          "pay_date",
          "status"
        ]
      },
      "YearToDateSummaryDto": {
        "type": "object",
        "properties": {
          "total_gross_pay": {
            "type": "number",
            "example": 42000
          },
          "total_net_pay": {
            "type": "number",
            "example": 33600
          },
          "total_tax": {
            "type": "number",
            "example": 8400
          },
          "total_ni": {
            "type": "number",
            "example": 4200
          },
          "year": {
            "type": "number",
            "example": 2024
          }
        },
        "required": [
          "total_gross_pay",
          "total_net_pay",
          "total_tax",
          "total_ni",
          "year"
        ]
      },
      "LeaveBalanceDto": {
        "type": "object",
        "properties": {
          "leave_type": {
            "type": "string",
            "example": "Annual Leave"
          },
          "entitlement_days": {
            "type": "number",
            "example": 25
          },
          "used_days": {
            "type": "number",
            "example": 10
          },
          "remaining_days": {
            "type": "number",
            "example": 15
          },
          "pending_days": {
            "type": "number",
            "example": 2
          }
        },
        "required": [
          "leave_type",
          "entitlement_days",
          "used_days",
          "remaining_days",
          "pending_days"
        ]
      },
      "EmployeeDocumentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "uuid"
          },
          "document_type": {
            "type": "string",
            "example": "passport"
          },
          "document_name": {
            "type": "string",
            "example": "UK Passport"
          },
          "file_path": {
            "type": "string",
            "example": "documents/employee/uuid/passport.pdf"
          },
          "file_size": {
            "type": "number",
            "example": 1024000
          },
          "mime_type": {
            "type": "string",
            "example": "application/pdf"
          },
          "upload_date": {
            "type": "string",
            "example": "2024-01-15T10:30:00Z"
          },
          "expiry_date": {
            "type": "string",
            "example": "2030-12-31"
          },
          "status": {
            "type": "string",
            "example": "active"
          }
        },
        "required": [
          "id",
          "document_type",
          "document_name",
          "file_path",
          "file_size",
          "mime_type",
          "upload_date",
          "expiry_date",
          "status"
        ]
      },
      "CreateJobPostingDto": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "example": "uuid"
          },
          "posting_title": {
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "posting_description": {
            "type": "string",
            "example": "We are looking for a senior software engineer..."
          },
          "requirements": {
            "type": "string",
            "example": "5+ years experience in TypeScript..."
          },
          "benefits": {
            "type": "string",
            "example": "Health insurance, pension..."
          },
          "salary_range_min": {
            "type": "number",
            "example": 50000
          },
          "salary_range_max": {
            "type": "number",
            "example": 80000
          },
          "employment_type": {
            "type": "string",
            "example": "PERMANENT"
          },
          "location": {
            "type": "string",
            "example": "London"
          },
          "remote_work_allowed": {
            "type": "boolean",
            "example": true
          },
          "closing_date": {
            "type": "string",
            "example": "2024-12-31"
          },
          "hiring_manager_id": {
            "type": "string",
            "example": "uuid"
          },
          "hr_contact_id": {
            "type": "string",
            "example": "uuid"
          },
          "internal_only": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "posting_title",
          "posting_description",
          "requirements",
          "employment_type"
        ]
      },
      "UpdateJobPostingDto": {
        "type": "object",
        "properties": {
          "job_id": {
            "type": "string",
            "example": "uuid"
          },
          "posting_title": {
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "posting_description": {
            "type": "string",
            "example": "We are looking for a senior software engineer..."
          },
          "requirements": {
            "type": "string",
            "example": "5+ years experience in TypeScript..."
          },
          "employment_type": {
            "type": "string",
            "example": "FULL_TIME"
          },
          "location": {
            "type": "string",
            "example": "London, UK"
          },
          "salary_min": {
            "type": "number",
            "example": 50000
          },
          "salary_max": {
            "type": "number",
            "example": 80000
          },
          "posted_date": {
            "type": "string",
            "example": "2024-01-01"
          },
          "closing_date": {
            "type": "string",
            "example": "2024-03-01"
          },
          "hiring_manager_id": {
            "type": "string",
            "example": "uuid"
          },
          "hr_contact_id": {
            "type": "string",
            "example": "uuid"
          },
          "remote_work_allowed": {
            "type": "boolean",
            "example": true
          },
          "internal_only": {
            "type": "boolean",
            "example": false
          },
          "posting_status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "PAUSED",
              "CLOSED",
              "CANCELLED",
              "ARCHIVED"
            ]
          }
        }
      },
      "CreateCandidateDto": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "example": "07912345678"
          },
          "address": {
            "type": "string",
            "example": "SW1A 1AA"
          },
          "linkedin_profile": {
            "type": "string",
            "example": "https://linkedin.com/in/johndoe"
          },
          "current_employer": {
            "type": "string",
            "example": "Acme Corp"
          },
          "current_position": {
            "type": "string",
            "example": "Senior Developer"
          },
          "expected_salary": {
            "type": "number",
            "example": 65000
          },
          "availability_date": {
            "type": "string",
            "example": "2024-02-01"
          },
          "right_to_work_uk": {
            "type": "boolean",
            "example": true
          },
          "visa_required": {
            "type": "boolean",
            "example": false
          },
          "visa_type": {
            "type": "string",
            "example": "Tier 2"
          },
          "source": {
            "type": "string",
            "enum": [
              "WEBSITE",
              "REFERRAL",
              "LINKEDIN",
              "AGENCY",
              "JOB_BOARD",
              "DIRECT_APPLICATION",
              "OTHER"
            ]
          },
          "source_details": {
            "type": "string",
            "example": "Referred by Jane Smith"
          },
          "notes": {
            "type": "string",
            "example": "Additional notes..."
          },
          "gdpr_consent": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "first_name",
          "last_name",
          "email",
          "source",
          "gdpr_consent"
        ]
      },
      "ScheduleInterviewDto": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string",
            "example": "uuid"
          },
          "candidate_id": {
            "type": "string",
            "example": "uuid"
          },
          "interview_type": {
            "type": "string",
            "example": "phone"
          },
          "interview_round": {
            "type": "number",
            "example": 1
          },
          "scheduled_date": {
            "type": "string",
            "example": "2024-01-15T10:00:00Z"
          },
          "scheduled_time": {
            "type": "string",
            "example": "10:00"
          },
          "duration_minutes": {
            "type": "number",
            "example": 60
          },
          "location": {
            "type": "string",
            "example": "Office - Meeting Room 1"
          },
          "video_meeting_link": {
            "type": "string",
            "example": "https://zoom.us/j/123456789"
          },
          "meeting_link": {
            "type": "string",
            "example": "https://meet.google.com/abc-defg-hij"
          },
          "interviewer_ids": {
            "example": [
              "uuid1",
              "uuid2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "interview_agenda": {
            "type": "string",
            "example": "Technical discussion, culture fit"
          },
          "candidate_notes": {
            "type": "string",
            "example": "Prepare portfolio"
          }
        },
        "required": [
          "application_id",
          "candidate_id",
          "interview_type",
          "scheduled_date",
          "interviewer_ids"
        ]
      },
      "SubmitInterviewFeedbackDto": {
        "type": "object",
        "properties": {
          "technical_score": {
            "type": "number",
            "example": 4.5
          },
          "communication_score": {
            "type": "number",
            "example": 4
          },
          "cultural_fit_score": {
            "type": "number",
            "example": 4.5
          },
          "overall_score": {
            "type": "number",
            "example": 4.3
          },
          "recommendation": {
            "type": "string",
            "enum": [
              "STRONG_HIRE",
              "HIRE",
              "MAYBE",
              "NO_HIRE",
              "STRONG_NO_HIRE"
            ]
          },
          "strengths": {
            "type": "string",
            "example": "Strong technical skills..."
          },
          "weaknesses": {
            "type": "string",
            "example": "Could improve on..."
          },
          "detailed_feedback": {
            "type": "string",
            "example": "Detailed feedback..."
          },
          "concerns": {
            "type": "string",
            "example": "No major concerns"
          },
          "questions_asked": {
            "type": "string",
            "example": "Asked about experience with..."
          },
          "additional_notes": {
            "type": "string",
            "example": "Additional notes..."
          }
        },
        "required": [
          "overall_score",
          "recommendation"
        ]
      },
      "CreateOfferDto": {
        "type": "object",
        "properties": {
          "application_id": {
            "type": "string",
            "example": "uuid"
          },
          "offer_type": {
            "type": "string",
            "example": "full_time"
          },
          "position_title": {
            "type": "string",
            "example": "Senior Software Engineer"
          },
          "department_id": {
            "type": "string",
            "example": "uuid"
          },
          "salary_amount": {
            "type": "number",
            "example": 65000
          },
          "salary_frequency": {
            "type": "string",
            "example": "annual"
          },
          "benefits": {
            "type": "object"
          },
          "start_date": {
            "type": "string",
            "example": "2024-02-01"
          },
          "contract_length": {
            "type": "number",
            "example": 12
          },
          "probation_period": {
            "type": "number",
            "example": 6
          },
          "working_hours": {
            "type": "number",
            "example": 37.5
          },
          "holiday_entitlement": {
            "type": "number",
            "example": 28
          },
          "response_deadline": {
            "type": "string",
            "example": "2024-01-20"
          }
        },
        "required": [
          "application_id",
          "offer_type",
          "position_title",
          "salary_amount"
        ]
      },
      "AcceptOfferDto": {
        "type": "object",
        "properties": {
          "accepted_terms": {
            "type": "boolean",
            "example": true
          },
          "comments": {
            "type": "string",
            "example": "Additional comments..."
          }
        },
        "required": [
          "accepted_terms"
        ]
      },
      "DeclineOfferDto": {
        "type": "object",
        "properties": {
          "decline_reason": {
            "type": "string",
            "example": "Better opportunity elsewhere"
          },
          "feedback": {
            "type": "string",
            "example": "Additional feedback..."
          }
        },
        "required": [
          "decline_reason"
        ]
      },
      "CreatePerformanceReviewDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "template_id": {
            "type": "string",
            "description": "Review template ID"
          },
          "review_type": {
            "type": "string",
            "enum": [
              "SELF",
              "MANAGER",
              "PEER",
              "SUBORDINATE",
              "CUSTOMER"
            ],
            "description": "Type of review"
          },
          "reviewer_id": {
            "type": "string",
            "description": "Reviewer ID"
          },
          "review_period_start": {
            "type": "string",
            "description": "Review period start date"
          },
          "review_period_end": {
            "type": "string",
            "description": "Review period end date"
          },
          "due_date": {
            "type": "string",
            "description": "Due date for review completion"
          }
        },
        "required": [
          "employee_id",
          "cycle_id",
          "template_id",
          "review_type",
          "reviewer_id"
        ]
      },
      "PerformanceReviewResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "cycle_id": {
            "type": "string"
          },
          "template_id": {
            "type": "string"
          },
          "review_type": {
            "type": "string",
            "enum": [
              "SELF",
              "MANAGER",
              "PEER",
              "SUBORDINATE",
              "CUSTOMER"
            ]
          },
          "reviewer_id": {
            "type": "string"
          },
          "review_period_start": {
            "format": "date-time",
            "type": "string"
          },
          "review_period_end": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "IN_PROGRESS",
              "SUBMITTED",
              "COMPLETED",
              "APPROVED"
            ]
          },
          "overall_rating": {
            "type": "number"
          },
          "goal_achievement_score": {
            "type": "number"
          },
          "competency_score": {
            "type": "number"
          },
          "behavioral_score": {
            "type": "number"
          },
          "strengths": {
            "type": "string"
          },
          "areas_for_improvement": {
            "type": "string"
          },
          "development_recommendations": {
            "type": "string"
          },
          "manager_comments": {
            "type": "string"
          },
          "employee_comments": {
            "type": "string"
          },
          "submitted_at": {
            "format": "date-time",
            "type": "string"
          },
          "completed_at": {
            "format": "date-time",
            "type": "string"
          },
          "due_date": {
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "updated_by_id": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "employee": {
            "type": "object"
          },
          "reviewer": {
            "type": "object"
          },
          "cycle": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "cycle_id",
          "template_id",
          "review_type",
          "reviewer_id",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedPerformanceReviewResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of performance reviews",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceReviewResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdatePerformanceReviewDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "template_id": {
            "type": "string",
            "description": "Review template ID"
          },
          "review_type": {
            "type": "string",
            "enum": [
              "SELF",
              "MANAGER",
              "PEER",
              "SUBORDINATE",
              "CUSTOMER"
            ],
            "description": "Type of review"
          },
          "reviewer_id": {
            "type": "string",
            "description": "Reviewer ID"
          },
          "review_period_start": {
            "type": "string",
            "description": "Review period start date"
          },
          "review_period_end": {
            "type": "string",
            "description": "Review period end date"
          },
          "due_date": {
            "type": "string",
            "description": "Due date for review completion"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "IN_PROGRESS",
              "SUBMITTED",
              "COMPLETED",
              "APPROVED"
            ],
            "description": "Review status"
          },
          "overall_rating": {
            "type": "number",
            "description": "Overall rating",
            "minimum": 1,
            "maximum": 5
          },
          "goal_achievement_score": {
            "type": "number",
            "description": "Goal achievement score",
            "minimum": 0,
            "maximum": 100
          },
          "competency_score": {
            "type": "number",
            "description": "Competency score",
            "minimum": 0,
            "maximum": 100
          },
          "behavioral_score": {
            "type": "number",
            "description": "Behavioral score",
            "minimum": 0,
            "maximum": 100
          },
          "strengths": {
            "type": "string",
            "description": "Strengths identified"
          },
          "areas_for_improvement": {
            "type": "string",
            "description": "Areas for improvement"
          },
          "development_recommendations": {
            "type": "string",
            "description": "Development recommendations"
          },
          "manager_comments": {
            "type": "string",
            "description": "Manager comments"
          },
          "employee_comments": {
            "type": "string",
            "description": "Employee comments"
          }
        }
      },
      "ReviewResponseDto": {
        "type": "object",
        "properties": {
          "question_id": {
            "type": "string",
            "description": "Question ID from template"
          },
          "section_name": {
            "type": "string",
            "description": "Section name"
          },
          "question_text": {
            "type": "string",
            "description": "Question text"
          },
          "response_type": {
            "type": "string",
            "description": "Response type"
          },
          "response_value": {
            "type": "string",
            "description": "Response value"
          },
          "rating_score": {
            "type": "number",
            "description": "Rating score",
            "minimum": 1,
            "maximum": 5
          },
          "weight": {
            "type": "number",
            "description": "Weight"
          },
          "comments": {
            "type": "string",
            "description": "Comments"
          }
        },
        "required": [
          "question_id",
          "response_type"
        ]
      },
      "SubmitReviewResponsesDto": {
        "type": "object",
        "properties": {
          "responses": {
            "description": "Review responses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewResponseDto"
            }
          }
        },
        "required": [
          "responses"
        ]
      },
      "SubmitReviewDto": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Final comments"
          }
        }
      },
      "ApproveReviewDto": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Approval comments"
          }
        }
      },
      "RejectReviewDto": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Rejection reason"
          },
          "comments": {
            "type": "string",
            "description": "Additional comments"
          }
        },
        "required": [
          "reason"
        ]
      },
      "PerformanceReviewResponseItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "review_id": {
            "type": "string"
          },
          "question_id": {
            "type": "string"
          },
          "section_name": {
            "type": "string"
          },
          "question_text": {
            "type": "string"
          },
          "response_type": {
            "type": "string"
          },
          "response_value": {
            "type": "string"
          },
          "rating_score": {
            "type": "number"
          },
          "weight": {
            "type": "number"
          },
          "comments": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "updated_by_id": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "review_id",
          "question_id",
          "response_type",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedReviewResponsesDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of review responses",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceReviewResponseItemDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateReviewResponseDto": {
        "type": "object",
        "properties": {
          "response_value": {
            "type": "string",
            "description": "Response value"
          },
          "rating_score": {
            "type": "number",
            "description": "Rating score",
            "minimum": 1,
            "maximum": 5
          },
          "weight": {
            "type": "number",
            "description": "Weight"
          },
          "comments": {
            "type": "string",
            "description": "Comments"
          }
        }
      },
      "CreatePerformanceGoalDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "goal_category": {
            "type": "string",
            "enum": [
              "STRATEGIC",
              "OPERATIONAL",
              "PERSONAL_DEVELOPMENT",
              "BEHAVIORAL"
            ],
            "description": "Goal category"
          },
          "title": {
            "type": "string",
            "description": "Goal title"
          },
          "description": {
            "type": "string",
            "description": "Goal description"
          },
          "success_criteria": {
            "type": "string",
            "description": "Success criteria"
          },
          "measurement_method": {
            "type": "string",
            "description": "Measurement method"
          },
          "target_value": {
            "type": "number",
            "description": "Target value"
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement"
          },
          "weight_percentage": {
            "type": "number",
            "description": "Goal weight percentage",
            "minimum": 0,
            "maximum": 100
          },
          "priority": {
            "type": "string",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "description": "Goal priority"
          },
          "due_date": {
            "type": "string",
            "description": "Due date"
          },
          "manager_id": {
            "type": "string",
            "description": "Manager ID"
          }
        },
        "required": [
          "employee_id",
          "cycle_id",
          "goal_category",
          "title"
        ]
      },
      "PerformanceGoalResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "cycle_id": {
            "type": "string"
          },
          "goal_category": {
            "type": "string",
            "enum": [
              "STRATEGIC",
              "OPERATIONAL",
              "PERSONAL_DEVELOPMENT",
              "BEHAVIORAL"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "success_criteria": {
            "type": "string"
          },
          "measurement_method": {
            "type": "string"
          },
          "target_value": {
            "type": "number"
          },
          "current_value": {
            "type": "number"
          },
          "unit": {
            "type": "string"
          },
          "weight_percentage": {
            "type": "number"
          },
          "priority": {
            "type": "string",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "IN_PROGRESS",
              "COMPLETED",
              "CANCELLED",
              "OVERDUE"
            ]
          },
          "progress_percentage": {
            "type": "number"
          },
          "due_date": {
            "format": "date-time",
            "type": "string"
          },
          "manager_id": {
            "type": "string"
          },
          "approved_at": {
            "format": "date-time",
            "type": "string"
          },
          "completed_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "updated_by_id": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "employee": {
            "type": "object"
          },
          "manager": {
            "type": "object"
          },
          "cycle": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "cycle_id",
          "goal_category",
          "title",
          "weight_percentage",
          "priority",
          "status",
          "progress_percentage",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedPerformanceGoalResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of performance goals",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceGoalResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdatePerformanceGoalDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "goal_category": {
            "type": "string",
            "enum": [
              "STRATEGIC",
              "OPERATIONAL",
              "PERSONAL_DEVELOPMENT",
              "BEHAVIORAL"
            ],
            "description": "Goal category"
          },
          "title": {
            "type": "string",
            "description": "Goal title"
          },
          "description": {
            "type": "string",
            "description": "Goal description"
          },
          "success_criteria": {
            "type": "string",
            "description": "Success criteria"
          },
          "measurement_method": {
            "type": "string",
            "description": "Measurement method"
          },
          "target_value": {
            "type": "number",
            "description": "Target value"
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement"
          },
          "weight_percentage": {
            "type": "number",
            "description": "Goal weight percentage",
            "minimum": 0,
            "maximum": 100
          },
          "priority": {
            "type": "string",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ],
            "description": "Goal priority"
          },
          "due_date": {
            "type": "string",
            "description": "Due date"
          },
          "manager_id": {
            "type": "string",
            "description": "Manager ID"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "IN_PROGRESS",
              "COMPLETED",
              "CANCELLED",
              "OVERDUE"
            ],
            "description": "Goal status"
          },
          "current_value": {
            "type": "number",
            "description": "Current value"
          },
          "progress_percentage": {
            "type": "number",
            "description": "Progress percentage",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "GoalUpdateDto": {
        "type": "object",
        "properties": {
          "new_value": {
            "type": "number",
            "description": "New value"
          },
          "progress_percentage": {
            "type": "number",
            "description": "Progress percentage",
            "minimum": 0,
            "maximum": 100
          },
          "update_notes": {
            "type": "string",
            "description": "Update notes"
          }
        }
      },
      "ApproveGoalDto": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Approval comments"
          }
        }
      },
      "CompleteGoalDto": {
        "type": "object",
        "properties": {
          "final_value": {
            "type": "number",
            "description": "Final value achieved"
          },
          "notes": {
            "type": "string",
            "description": "Completion notes"
          }
        },
        "required": [
          "final_value"
        ]
      },
      "CreatePerformanceCycleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Performance cycle name"
          },
          "cycle_type": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "SEMI_ANNUAL",
              "QUARTERLY",
              "MONTHLY"
            ],
            "description": "Type of performance cycle"
          },
          "start_date": {
            "type": "string",
            "description": "Cycle start date"
          },
          "end_date": {
            "type": "string",
            "description": "Cycle end date"
          },
          "goal_setting_deadline": {
            "type": "string",
            "description": "Goal setting deadline"
          },
          "mid_review_date": {
            "type": "string",
            "description": "Mid-cycle review date"
          },
          "final_review_deadline": {
            "type": "string",
            "description": "Final review deadline"
          },
          "description": {
            "type": "string",
            "description": "Cycle description"
          }
        },
        "required": [
          "name",
          "cycle_type",
          "start_date",
          "end_date"
        ]
      },
      "PerformanceCycleResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "cycle_type": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "SEMI_ANNUAL",
              "QUARTERLY",
              "MONTHLY"
            ]
          },
          "start_date": {
            "format": "date-time",
            "type": "string"
          },
          "end_date": {
            "format": "date-time",
            "type": "string"
          },
          "goal_setting_deadline": {
            "format": "date-time",
            "type": "string"
          },
          "mid_review_date": {
            "format": "date-time",
            "type": "string"
          },
          "final_review_deadline": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PLANNING",
              "ACTIVE",
              "REVIEW_PERIOD",
              "CALIBRATION",
              "COMPLETED",
              "CANCELLED"
            ]
          },
          "description": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "updated_by_id": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "total_goals": {
            "type": "number"
          },
          "total_reviews": {
            "type": "number"
          },
          "completed_reviews": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "cycle_type",
          "start_date",
          "end_date",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedPerformanceCycleResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of performance cycles",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceCycleResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdatePerformanceCycleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Performance cycle name"
          },
          "cycle_type": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "SEMI_ANNUAL",
              "QUARTERLY",
              "MONTHLY"
            ],
            "description": "Type of performance cycle"
          },
          "start_date": {
            "type": "string",
            "description": "Cycle start date"
          },
          "end_date": {
            "type": "string",
            "description": "Cycle end date"
          },
          "goal_setting_deadline": {
            "type": "string",
            "description": "Goal setting deadline"
          },
          "mid_review_date": {
            "type": "string",
            "description": "Mid-cycle review date"
          },
          "final_review_deadline": {
            "type": "string",
            "description": "Final review deadline"
          },
          "description": {
            "type": "string",
            "description": "Cycle description"
          },
          "status": {
            "type": "string",
            "enum": [
              "PLANNING",
              "ACTIVE",
              "REVIEW_PERIOD",
              "CALIBRATION",
              "COMPLETED",
              "CANCELLED"
            ],
            "description": "Cycle status"
          }
        }
      },
      "ActivateCycleDto": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "string",
            "description": "Activation notes"
          }
        }
      },
      "CompleteCycleDto": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "string",
            "description": "Completion notes"
          }
        }
      },
      "CreateContinuousFeedbackDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID receiving feedback"
          },
          "feedback_type": {
            "type": "string",
            "enum": [
              "PRAISE",
              "CONSTRUCTIVE",
              "COACHING",
              "GOAL_PROGRESS"
            ],
            "description": "Type of feedback"
          },
          "category": {
            "type": "string",
            "description": "Feedback category"
          },
          "title": {
            "type": "string",
            "description": "Feedback title"
          },
          "feedback_content": {
            "type": "string",
            "description": "Feedback content"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "MANAGER",
              "TEAM",
              "PUBLIC"
            ],
            "description": "Feedback visibility",
            "default": "PRIVATE"
          },
          "is_anonymous": {
            "type": "boolean",
            "description": "Whether feedback is anonymous",
            "default": false
          },
          "tags": {
            "description": "Tags for categorization",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "related_goal_id": {
            "type": "string",
            "description": "Related goal ID"
          }
        },
        "required": [
          "employee_id",
          "feedback_type",
          "feedback_content"
        ]
      },
      "ContinuousFeedbackResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "feedback_giver_id": {
            "type": "string"
          },
          "feedback_type": {
            "type": "string",
            "enum": [
              "PRAISE",
              "CONSTRUCTIVE",
              "COACHING",
              "GOAL_PROGRESS"
            ]
          },
          "category": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "feedback_content": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "MANAGER",
              "TEAM",
              "PUBLIC"
            ]
          },
          "is_anonymous": {
            "type": "boolean"
          },
          "acknowledged": {
            "type": "boolean"
          },
          "tags": {
            "type": "object"
          },
          "related_goal_id": {
            "type": "string"
          },
          "acknowledged_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "employee": {
            "type": "object"
          },
          "feedback_giver": {
            "type": "object"
          },
          "related_goal": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "feedback_giver_id",
          "feedback_type",
          "feedback_content",
          "visibility",
          "is_anonymous",
          "acknowledged",
          "created_at"
        ]
      },
      "PaginatedContinuousFeedbackResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of continuous feedback",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContinuousFeedbackResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateContinuousFeedbackDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID receiving feedback"
          },
          "feedback_type": {
            "type": "string",
            "enum": [
              "PRAISE",
              "CONSTRUCTIVE",
              "COACHING",
              "GOAL_PROGRESS"
            ],
            "description": "Type of feedback"
          },
          "category": {
            "type": "string",
            "description": "Feedback category"
          },
          "title": {
            "type": "string",
            "description": "Feedback title"
          },
          "feedback_content": {
            "type": "string",
            "description": "Feedback content"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "MANAGER",
              "TEAM",
              "PUBLIC"
            ],
            "description": "Feedback visibility",
            "default": "PRIVATE"
          },
          "is_anonymous": {
            "type": "boolean",
            "description": "Whether feedback is anonymous",
            "default": false
          },
          "tags": {
            "description": "Tags for categorization",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "related_goal_id": {
            "type": "string",
            "description": "Related goal ID"
          }
        }
      },
      "AcknowledgeFeedbackDto": {
        "type": "object",
        "properties": {
          "notes": {
            "type": "string",
            "description": "Acknowledgment notes"
          }
        }
      },
      "RespondToFeedbackDto": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "description": "Response content"
          }
        },
        "required": [
          "response"
        ]
      },
      "CreateFeedback360Dto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "feedback_round_name": {
            "type": "string",
            "description": "Feedback round name"
          },
          "nomination_deadline": {
            "type": "string",
            "description": "Nomination deadline",
            "format": "date"
          },
          "feedback_deadline": {
            "type": "string",
            "description": "Feedback deadline",
            "format": "date"
          },
          "peer_nominees": {
            "type": "object",
            "description": "Peer nominees"
          },
          "subordinate_nominees": {
            "type": "object",
            "description": "Subordinate nominees"
          },
          "customer_nominees": {
            "type": "object",
            "description": "Customer nominees"
          }
        },
        "required": [
          "employee_id",
          "cycle_id"
        ]
      },
      "Feedback360ResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "cycle_id": {
            "type": "string"
          },
          "feedback_round_name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "SETUP",
              "NOMINATION",
              "FEEDBACK_COLLECTION",
              "COMPLETED"
            ]
          },
          "self_assessment_id": {
            "type": "string"
          },
          "manager_review_id": {
            "type": "string"
          },
          "nomination_deadline": {
            "format": "date-time",
            "type": "string"
          },
          "feedback_deadline": {
            "format": "date-time",
            "type": "string"
          },
          "peer_nominees": {
            "type": "object"
          },
          "subordinate_nominees": {
            "type": "object"
          },
          "customer_nominees": {
            "type": "object"
          },
          "feedback_summary": {
            "type": "object"
          },
          "overall_360_score": {
            "type": "number"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "employee": {
            "type": "object"
          },
          "cycle": {
            "type": "object"
          },
          "self_assessment": {
            "type": "object"
          },
          "manager_review": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "cycle_id",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedFeedback360ResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of 360 feedback",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feedback360ResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateFeedback360Dto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "feedback_round_name": {
            "type": "string",
            "description": "Feedback round name"
          },
          "nomination_deadline": {
            "type": "string",
            "description": "Nomination deadline",
            "format": "date"
          },
          "feedback_deadline": {
            "type": "string",
            "description": "Feedback deadline",
            "format": "date"
          },
          "peer_nominees": {
            "type": "object",
            "description": "Peer nominees"
          },
          "subordinate_nominees": {
            "type": "object",
            "description": "Subordinate nominees"
          },
          "customer_nominees": {
            "type": "object",
            "description": "Customer nominees"
          },
          "status": {
            "type": "string",
            "enum": [
              "SETUP",
              "NOMINATION",
              "FEEDBACK_COLLECTION",
              "COMPLETED"
            ],
            "description": "Feedback status"
          },
          "self_assessment_id": {
            "type": "string",
            "description": "Self assessment ID"
          },
          "manager_review_id": {
            "type": "string",
            "description": "Manager review ID"
          },
          "feedback_summary": {
            "type": "object",
            "description": "Feedback summary"
          },
          "overall_360_score": {
            "type": "number",
            "description": "Overall 360 score",
            "minimum": 0,
            "maximum": 5
          }
        }
      },
      "AddNomineesDto": {
        "type": "object",
        "properties": {
          "peer_nominees": {
            "description": "Peer nominees to add",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subordinate_nominees": {
            "description": "Subordinate nominees to add",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customer_nominees": {
            "description": "Customer nominees to add",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateFeedbackStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SETUP",
              "NOMINATION",
              "FEEDBACK_COLLECTION",
              "COMPLETED"
            ],
            "description": "New status"
          }
        },
        "required": [
          "status"
        ]
      },
      "CreatePerformanceImprovementPlanDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "manager_id": {
            "type": "string",
            "description": "Manager ID"
          },
          "hr_id": {
            "type": "string",
            "description": "HR representative ID"
          },
          "performance_issues": {
            "type": "string",
            "description": "Performance issues description"
          },
          "root_cause_analysis": {
            "type": "string",
            "description": "Root cause analysis"
          },
          "improvement_goals": {
            "type": "object",
            "description": "Improvement goals"
          },
          "action_steps": {
            "type": "object",
            "description": "Action steps"
          },
          "support_provided": {
            "type": "object",
            "description": "Support provided"
          },
          "success_criteria": {
            "type": "string",
            "description": "Success criteria"
          },
          "review_schedule": {
            "type": "object",
            "description": "Review schedule"
          },
          "plan_duration_months": {
            "type": "number",
            "description": "Plan duration in months",
            "default": 3,
            "minimum": 1,
            "maximum": 12
          },
          "start_date": {
            "type": "string",
            "description": "Start date",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "description": "End date",
            "format": "date"
          }
        },
        "required": [
          "employee_id",
          "manager_id",
          "performance_issues",
          "improvement_goals",
          "action_steps",
          "start_date",
          "end_date"
        ]
      },
      "PerformanceImprovementPlanResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "manager_id": {
            "type": "string"
          },
          "hr_id": {
            "type": "string"
          },
          "performance_issues": {
            "type": "string"
          },
          "root_cause_analysis": {
            "type": "string"
          },
          "improvement_goals": {
            "type": "object"
          },
          "action_steps": {
            "type": "object"
          },
          "support_provided": {
            "type": "object"
          },
          "success_criteria": {
            "type": "string"
          },
          "review_schedule": {
            "type": "object"
          },
          "plan_duration_months": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "COMPLETED",
              "EXTENDED",
              "TERMINATED"
            ]
          },
          "outcome": {
            "type": "string",
            "enum": [
              "SUCCESSFUL",
              "PARTIALLY_SUCCESSFUL",
              "UNSUCCESSFUL"
            ]
          },
          "start_date": {
            "format": "date-time",
            "type": "string"
          },
          "end_date": {
            "format": "date-time",
            "type": "string"
          },
          "final_review_date": {
            "format": "date-time",
            "type": "string"
          },
          "employee_acknowledgment": {
            "type": "boolean"
          },
          "employee_signature_date": {
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "employee": {
            "type": "object"
          },
          "manager": {
            "type": "object"
          },
          "hr": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "manager_id",
          "performance_issues",
          "improvement_goals",
          "action_steps",
          "plan_duration_months",
          "status",
          "start_date",
          "end_date",
          "employee_acknowledgment",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedPerformanceImprovementPlanResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of performance improvement plans",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceImprovementPlanResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdatePerformanceImprovementPlanDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "manager_id": {
            "type": "string",
            "description": "Manager ID"
          },
          "hr_id": {
            "type": "string",
            "description": "HR representative ID"
          },
          "performance_issues": {
            "type": "string",
            "description": "Performance issues description"
          },
          "root_cause_analysis": {
            "type": "string",
            "description": "Root cause analysis"
          },
          "improvement_goals": {
            "type": "object",
            "description": "Improvement goals"
          },
          "action_steps": {
            "type": "object",
            "description": "Action steps"
          },
          "support_provided": {
            "type": "object",
            "description": "Support provided"
          },
          "success_criteria": {
            "type": "string",
            "description": "Success criteria"
          },
          "review_schedule": {
            "type": "object",
            "description": "Review schedule"
          },
          "plan_duration_months": {
            "type": "number",
            "description": "Plan duration in months",
            "default": 3,
            "minimum": 1,
            "maximum": 12
          },
          "start_date": {
            "type": "string",
            "description": "Start date",
            "format": "date"
          },
          "end_date": {
            "type": "string",
            "description": "End date",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "COMPLETED",
              "EXTENDED",
              "TERMINATED"
            ],
            "description": "PIP status"
          },
          "outcome": {
            "type": "string",
            "enum": [
              "SUCCESSFUL",
              "PARTIALLY_SUCCESSFUL",
              "UNSUCCESSFUL"
            ],
            "description": "PIP outcome"
          },
          "final_review_date": {
            "type": "string",
            "description": "Final review date",
            "format": "date"
          },
          "employee_acknowledgment": {
            "type": "boolean",
            "description": "Employee acknowledgment"
          },
          "employee_signature_date": {
            "type": "string",
            "description": "Employee signature date",
            "format": "date"
          }
        }
      },
      "AcknowledgePIPDto": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "description": "Employee acknowledgment"
          },
          "comments": {
            "type": "string",
            "description": "Employee comments"
          }
        },
        "required": [
          "acknowledged"
        ]
      },
      "UpdatePIPStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "COMPLETED",
              "EXTENDED",
              "TERMINATED"
            ],
            "description": "New status"
          },
          "outcome": {
            "type": "string",
            "enum": [
              "SUCCESSFUL",
              "PARTIALLY_SUCCESSFUL",
              "UNSUCCESSFUL"
            ],
            "description": "PIP outcome (required when completing)"
          },
          "notes": {
            "type": "string",
            "description": "Status update notes"
          }
        },
        "required": [
          "status"
        ]
      },
      "AddPIPProgressDto": {
        "type": "object",
        "properties": {
          "progress_update": {
            "type": "string",
            "description": "Progress update"
          },
          "improvements": {
            "type": "string",
            "description": "Areas of improvement"
          },
          "concerns": {
            "type": "string",
            "description": "Remaining concerns"
          },
          "next_steps": {
            "type": "string",
            "description": "Next steps"
          }
        },
        "required": [
          "progress_update"
        ]
      },
      "CreateReviewTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "template_type": {
            "type": "string",
            "description": "Template type (annual, mid_year, quarterly, probation)"
          },
          "applicable_job_levels": {
            "type": "object",
            "description": "Applicable job levels"
          },
          "applicable_departments": {
            "type": "object",
            "description": "Applicable departments"
          },
          "sections": {
            "type": "object",
            "description": "Review sections configuration"
          },
          "rating_scale": {
            "type": "object",
            "description": "Rating scale configuration"
          },
          "questions": {
            "type": "object",
            "description": "Review questions"
          },
          "competencies": {
            "type": "object",
            "description": "Competency model"
          },
          "active": {
            "type": "boolean",
            "description": "Is template active",
            "default": true
          }
        },
        "required": [
          "name",
          "template_type",
          "sections",
          "rating_scale",
          "questions"
        ]
      },
      "ReviewTemplateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "template_type": {
            "type": "string"
          },
          "applicable_job_levels": {
            "type": "object"
          },
          "applicable_departments": {
            "type": "object"
          },
          "sections": {
            "type": "object"
          },
          "rating_scale": {
            "type": "object"
          },
          "questions": {
            "type": "object"
          },
          "competencies": {
            "type": "object"
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "updated_by_id": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "template_type",
          "sections",
          "rating_scale",
          "questions",
          "active",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedReviewTemplateResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of review templates",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewTemplateResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateReviewTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "template_type": {
            "type": "string",
            "description": "Template type (annual, mid_year, quarterly, probation)"
          },
          "applicable_job_levels": {
            "type": "object",
            "description": "Applicable job levels"
          },
          "applicable_departments": {
            "type": "object",
            "description": "Applicable departments"
          },
          "sections": {
            "type": "object",
            "description": "Review sections configuration"
          },
          "rating_scale": {
            "type": "object",
            "description": "Rating scale configuration"
          },
          "questions": {
            "type": "object",
            "description": "Review questions"
          },
          "competencies": {
            "type": "object",
            "description": "Competency model"
          },
          "active": {
            "type": "boolean",
            "description": "Is template active",
            "default": true
          }
        }
      },
      "CloneTemplateDto": {
        "type": "object",
        "properties": {
          "new_name": {
            "type": "string",
            "description": "New template name"
          },
          "modifications": {
            "type": "object",
            "description": "Modifications to apply"
          }
        },
        "required": [
          "new_name"
        ]
      },
      "CreateDevelopmentPlanDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "plan_name": {
            "type": "string",
            "description": "Plan name or title"
          },
          "career_aspirations": {
            "type": "string",
            "description": "Career aspirations description"
          },
          "development_areas": {
            "type": "object",
            "description": "Development areas (JSON array)"
          },
          "learning_objectives": {
            "type": "object",
            "description": "Learning objectives (JSON array)"
          },
          "action_items": {
            "type": "object",
            "description": "Action items (JSON array)"
          },
          "success_metrics": {
            "type": "object",
            "description": "Success metrics (JSON array)"
          },
          "timeline_months": {
            "type": "number",
            "description": "Timeline in months",
            "minimum": 1,
            "maximum": 36,
            "default": 12
          },
          "last_reviewed_date": {
            "type": "string",
            "description": "Last reviewed date"
          }
        },
        "required": [
          "employee_id",
          "cycle_id"
        ]
      },
      "DevelopmentPlanResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "cycle_id": {
            "type": "string"
          },
          "plan_name": {
            "type": "string"
          },
          "career_aspirations": {
            "type": "string"
          },
          "development_areas": {
            "type": "object"
          },
          "learning_objectives": {
            "type": "object"
          },
          "action_items": {
            "type": "object"
          },
          "success_metrics": {
            "type": "object"
          },
          "timeline_months": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "COMPLETED",
              "ON_HOLD"
            ]
          },
          "manager_approval": {
            "type": "boolean"
          },
          "employee_commitment": {
            "type": "boolean"
          },
          "last_reviewed_date": {
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "updated_by_id": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "employee": {
            "type": "object"
          },
          "cycle": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "cycle_id",
          "timeline_months",
          "status",
          "manager_approval",
          "employee_commitment",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedDevelopmentPlanResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of development plans",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DevelopmentPlanResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateDevelopmentPlanDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID"
          },
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "plan_name": {
            "type": "string",
            "description": "Plan name or title"
          },
          "career_aspirations": {
            "type": "string",
            "description": "Career aspirations description"
          },
          "development_areas": {
            "type": "object",
            "description": "Development areas (JSON array)"
          },
          "learning_objectives": {
            "type": "object",
            "description": "Learning objectives (JSON array)"
          },
          "action_items": {
            "type": "object",
            "description": "Action items (JSON array)"
          },
          "success_metrics": {
            "type": "object",
            "description": "Success metrics (JSON array)"
          },
          "timeline_months": {
            "type": "number",
            "description": "Timeline in months",
            "minimum": 1,
            "maximum": 36,
            "default": 12
          },
          "last_reviewed_date": {
            "type": "string",
            "description": "Last reviewed date"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "COMPLETED",
              "ON_HOLD"
            ],
            "description": "Development plan status"
          },
          "manager_approval": {
            "type": "boolean",
            "description": "Manager approval status"
          },
          "employee_commitment": {
            "type": "boolean",
            "description": "Employee commitment status"
          }
        }
      },
      "ApprovePlanDto": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Approval comments"
          }
        }
      },
      "RejectPlanDto": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Rejection reason"
          },
          "comments": {
            "type": "string",
            "description": "Additional comments"
          }
        },
        "required": [
          "reason"
        ]
      },
      "CommitToPlanDto": {
        "type": "object",
        "properties": {
          "comments": {
            "type": "string",
            "description": "Employee commitment comments"
          }
        }
      },
      "ReviewPlanDto": {
        "type": "object",
        "properties": {
          "review_comments": {
            "type": "string",
            "description": "Review comments"
          },
          "progress_update": {
            "type": "string",
            "description": "Progress update"
          },
          "updated_action_items": {
            "type": "object",
            "description": "Updated action items"
          },
          "updated_success_metrics": {
            "type": "object",
            "description": "Updated success metrics"
          }
        }
      },
      "CreateCalibrationSessionDto": {
        "type": "object",
        "properties": {
          "session_name": {
            "type": "string",
            "description": "Session name"
          },
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "department_id": {
            "type": "string",
            "description": "Department ID (optional for cross-department sessions)"
          },
          "session_date": {
            "type": "string",
            "description": "Session date and time"
          },
          "facilitator_id": {
            "type": "string",
            "description": "Facilitator employee ID"
          },
          "participants": {
            "type": "object",
            "description": "List of participants (JSON array)"
          },
          "employees_discussed": {
            "type": "object",
            "description": "Employees to be discussed (JSON array)"
          },
          "rating_distributions": {
            "type": "object",
            "description": "Rating distributions (JSON object)"
          },
          "session_notes": {
            "type": "string",
            "description": "Session notes"
          }
        },
        "required": [
          "session_name",
          "cycle_id"
        ]
      },
      "CalibrationSessionResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "session_name": {
            "type": "string"
          },
          "cycle_id": {
            "type": "string"
          },
          "department_id": {
            "type": "string"
          },
          "session_date": {
            "format": "date-time",
            "type": "string"
          },
          "facilitator_id": {
            "type": "string"
          },
          "participants": {
            "type": "object"
          },
          "employees_discussed": {
            "type": "object"
          },
          "rating_distributions": {
            "type": "object"
          },
          "calibration_adjustments": {
            "type": "object"
          },
          "session_notes": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PLANNED",
              "IN_PROGRESS",
              "COMPLETED"
            ]
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "updated_by_id": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "cycle": {
            "type": "object"
          },
          "department": {
            "type": "object"
          },
          "facilitator": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "session_name",
          "cycle_id",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedCalibrationSessionResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of calibration sessions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalibrationSessionResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateCalibrationSessionDto": {
        "type": "object",
        "properties": {
          "session_name": {
            "type": "string",
            "description": "Session name"
          },
          "cycle_id": {
            "type": "string",
            "description": "Performance cycle ID"
          },
          "department_id": {
            "type": "string",
            "description": "Department ID (optional for cross-department sessions)"
          },
          "session_date": {
            "type": "string",
            "description": "Session date and time"
          },
          "facilitator_id": {
            "type": "string",
            "description": "Facilitator employee ID"
          },
          "participants": {
            "type": "object",
            "description": "List of participants (JSON array)"
          },
          "employees_discussed": {
            "type": "object",
            "description": "Employees to be discussed (JSON array)"
          },
          "rating_distributions": {
            "type": "object",
            "description": "Rating distributions (JSON object)"
          },
          "session_notes": {
            "type": "string",
            "description": "Session notes"
          },
          "status": {
            "type": "string",
            "enum": [
              "PLANNED",
              "IN_PROGRESS",
              "COMPLETED"
            ],
            "description": "Session status"
          },
          "calibration_adjustments": {
            "type": "object",
            "description": "Calibration adjustments made (JSON array)"
          }
        }
      },
      "StartSessionDto": {
        "type": "object",
        "properties": {
          "start_notes": {
            "type": "string",
            "description": "Session start notes"
          }
        }
      },
      "CompleteSessionDto": {
        "type": "object",
        "properties": {
          "final_notes": {
            "type": "string",
            "description": "Final session notes"
          },
          "final_adjustments": {
            "type": "object",
            "description": "Final calibration adjustments"
          },
          "final_distributions": {
            "type": "object",
            "description": "Final rating distributions"
          }
        },
        "required": [
          "final_notes"
        ]
      },
      "AddParticipantDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID to add as participant"
          },
          "role": {
            "type": "string",
            "description": "Participant role in session"
          }
        },
        "required": [
          "employee_id",
          "role"
        ]
      },
      "RemoveParticipantDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID to remove from participants"
          }
        },
        "required": [
          "employee_id"
        ]
      },
      "AddEmployeeToDiscussionDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "description": "Employee ID to add to discussion"
          },
          "current_rating": {
            "type": "string",
            "description": "Current performance rating"
          },
          "proposed_rating": {
            "type": "string",
            "description": "Proposed rating after discussion"
          },
          "notes": {
            "type": "string",
            "description": "Discussion notes"
          }
        },
        "required": [
          "employee_id",
          "current_rating"
        ]
      },
      "UpdateEmployeeDiscussionDto": {
        "type": "object",
        "properties": {
          "proposed_rating": {
            "type": "string",
            "description": "Updated proposed rating"
          },
          "notes": {
            "type": "string",
            "description": "Updated discussion notes"
          },
          "calibration_decision": {
            "type": "string",
            "description": "Calibration decision"
          }
        }
      },
      "SessionSummaryDto": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string"
          },
          "session_name": {
            "type": "string"
          },
          "total_participants": {
            "type": "number"
          },
          "total_employees_discussed": {
            "type": "number"
          },
          "calibration_adjustments_made": {
            "type": "number"
          },
          "session_duration_minutes": {
            "type": "number"
          },
          "rating_distribution_before": {
            "type": "object"
          },
          "rating_distribution_after": {
            "type": "object"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "session_id",
          "session_name",
          "total_participants",
          "total_employees_discussed",
          "calibration_adjustments_made",
          "session_duration_minutes",
          "rating_distribution_before",
          "rating_distribution_after",
          "status"
        ]
      },
      "CreateSkillCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Technical Skills"
          },
          "description": {
            "type": "string",
            "example": "Technical competencies required for engineering roles"
          },
          "parent_id": {
            "type": "string",
            "example": "uuid-of-parent-category"
          },
          "display_order": {
            "type": "number",
            "example": 1
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "name"
        ]
      },
      "SkillCategoryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "object"
          },
          "parent_id": {
            "type": "object"
          },
          "display_order": {
            "type": "number"
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "parent": {
            "type": "object"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SkillCategoryResponseDto"
            }
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "display_order",
          "active",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedSkillCategoryResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SkillCategoryResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "UpdateSkillCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Technical Skills"
          },
          "description": {
            "type": "string",
            "example": "Technical competencies required for engineering roles"
          },
          "parent_id": {
            "type": "string",
            "example": "uuid-of-parent-category"
          },
          "display_order": {
            "type": "number",
            "example": 1
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "CreateSkillDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "TypeScript"
          },
          "category_id": {
            "type": "string",
            "example": "uuid-of-category"
          },
          "description": {
            "type": "string",
            "example": "JavaScript superset with static typing"
          },
          "skill_type": {
            "type": "string",
            "example": "TECHNICAL",
            "enum": [
              "TECHNICAL",
              "SOFT",
              "LEADERSHIP",
              "FUNCTIONAL",
              "COMPLIANCE"
            ]
          },
          "proficiency_levels": {
            "type": "object",
            "example": {
              "levels": [
                {
                  "level": 1,
                  "name": "Beginner",
                  "description": "Basic understanding"
                },
                {
                  "level": 2,
                  "name": "Intermediate",
                  "description": "Working knowledge"
                },
                {
                  "level": 3,
                  "name": "Advanced",
                  "description": "Expert knowledge"
                }
              ]
            }
          },
          "assessment_criteria": {
            "type": "object",
            "example": {
              "criteria": [
                "Can write basic TypeScript code",
                "Understands type system",
                "Can create complex types"
              ]
            }
          },
          "market_demand": {
            "type": "string",
            "example": "HIGH",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ]
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "name"
        ]
      },
      "SkillResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "category_id": {
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "object"
          },
          "skill_type": {
            "type": "string",
            "enum": [
              "TECHNICAL",
              "SOFT",
              "LEADERSHIP",
              "FUNCTIONAL",
              "COMPLIANCE"
            ]
          },
          "proficiency_levels": {
            "type": "object"
          },
          "assessment_criteria": {
            "type": "object"
          },
          "market_demand": {
            "type": "string",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "category": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "skill_type",
          "market_demand",
          "active",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedSkillResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SkillResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "UpdateSkillDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "TypeScript"
          },
          "category_id": {
            "type": "string",
            "example": "uuid-of-category"
          },
          "description": {
            "type": "string",
            "example": "JavaScript superset with static typing"
          },
          "skill_type": {
            "type": "string",
            "example": "TECHNICAL",
            "enum": [
              "TECHNICAL",
              "SOFT",
              "LEADERSHIP",
              "FUNCTIONAL",
              "COMPLIANCE"
            ]
          },
          "proficiency_levels": {
            "type": "object"
          },
          "assessment_criteria": {
            "type": "object"
          },
          "market_demand": {
            "type": "string",
            "example": "HIGH",
            "enum": [
              "HIGH",
              "MEDIUM",
              "LOW"
            ]
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "CreateEmployeeSkillDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string",
            "example": "uuid-of-employee"
          },
          "skill_id": {
            "type": "string",
            "example": "uuid-of-skill"
          },
          "current_level": {
            "type": "string",
            "example": "BEGINNER",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "target_level": {
            "type": "string",
            "example": "COMPETENT",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "notes": {
            "type": "string",
            "example": "Employee has demonstrated strong skills in this area"
          }
        },
        "required": [
          "employee_id",
          "skill_id"
        ]
      },
      "EmployeeSkillResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "skill_id": {
            "type": "string"
          },
          "current_level": {
            "type": "string",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "target_level": {
            "type": "string",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "self_assessment": {
            "type": "string",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "manager_assessment": {
            "type": "string",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "verified_level": {
            "type": "string",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "last_assessed_date": {
            "type": "object"
          },
          "notes": {
            "type": "object"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "employee": {
            "type": "object"
          },
          "skill": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "employee_id",
          "skill_id",
          "current_level",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedEmployeeSkillResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeSkillResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "EmployeeSkillMatrixDto": {
        "type": "object",
        "properties": {
          "employee_id": {
            "type": "string"
          },
          "employee_name": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "job_title": {
            "type": "string"
          },
          "skills": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmployeeSkillResponseDto"
            }
          },
          "skill_summary": {
            "type": "object"
          }
        },
        "required": [
          "employee_id",
          "employee_name",
          "department",
          "job_title",
          "skills",
          "skill_summary"
        ]
      },
      "UpdateEmployeeSkillDto": {
        "type": "object",
        "properties": {
          "current_level": {
            "type": "string",
            "example": "DEVELOPING",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "target_level": {
            "type": "string",
            "example": "PROFICIENT",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "self_assessment": {
            "type": "string",
            "example": "DEVELOPING",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "manager_assessment": {
            "type": "string",
            "example": "COMPETENT",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "verified_level": {
            "type": "string",
            "example": "COMPETENT",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "last_assessed_date": {
            "type": "string",
            "example": "2024-01-15"
          },
          "notes": {
            "type": "string",
            "example": "Updated assessment notes"
          }
        }
      },
      "EmployeeSkillAssessmentDto": {
        "type": "object",
        "properties": {
          "assessment_level": {
            "type": "string",
            "example": "COMPETENT",
            "enum": [
              "BEGINNER",
              "DEVELOPING",
              "COMPETENT",
              "PROFICIENT",
              "EXPERT"
            ]
          },
          "assessment_type": {
            "type": "string",
            "example": "self",
            "enum": [
              "self",
              "manager",
              "verified"
            ]
          },
          "notes": {
            "type": "string",
            "example": "Assessment notes and comments"
          }
        },
        "required": [
          "assessment_level",
          "assessment_type"
        ]
      },
      "CreateCourseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Introduction to TypeScript"
          },
          "description": {
            "type": "string",
            "example": "Learn the fundamentals of TypeScript programming"
          },
          "course_type": {
            "type": "string",
            "example": "INTERNAL",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "ONLINE",
              "VENDOR"
            ]
          },
          "delivery_method": {
            "type": "string",
            "example": "CLASSROOM",
            "enum": [
              "CLASSROOM",
              "ONLINE",
              "BLENDED",
              "SELF_PACED",
              "ON_THE_JOB"
            ]
          },
          "duration_hours": {
            "type": "number",
            "example": 16.5
          },
          "max_participants": {
            "type": "number",
            "example": 20
          },
          "prerequisites": {
            "example": [
              "Basic JavaScript knowledge",
              "Computer with Node.js installed"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "learning_objectives": {
            "example": [
              "Understand TypeScript basics",
              "Write type-safe code",
              "Use interfaces and generics"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "target_skills": {
            "example": [
              "skill-uuid-1",
              "skill-uuid-2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "content_outline": {
            "type": "string",
            "example": "Module 1: Introduction\nModule 2: Types\nModule 3: Advanced Features"
          },
          "materials_required": {
            "example": [
              "Laptop",
              "Course materials",
              "Notebook"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cost_per_person": {
            "type": "number",
            "example": 250
          },
          "currency": {
            "type": "string",
            "example": "GBP"
          },
          "provider_name": {
            "type": "string",
            "example": "Tech Training Ltd"
          },
          "provider_contact": {
            "type": "object",
            "example": {
              "name": "John Doe",
              "email": "john@techtraining.com",
              "phone": "+44 20 1234 5678"
            }
          },
          "status": {
            "type": "string",
            "example": "DRAFT",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "PAUSED",
              "RETIRED",
              "ARCHIVED"
            ]
          },
          "approval_required": {
            "type": "boolean",
            "example": true
          },
          "certificate_awarded": {
            "type": "boolean",
            "example": true
          },
          "cpd_points": {
            "type": "number",
            "example": 12.5
          }
        },
        "required": [
          "title"
        ]
      },
      "CourseResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "object"
          },
          "course_type": {
            "type": "string",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "ONLINE",
              "VENDOR"
            ]
          },
          "delivery_method": {
            "type": "string",
            "enum": [
              "CLASSROOM",
              "ONLINE",
              "BLENDED",
              "SELF_PACED",
              "ON_THE_JOB"
            ]
          },
          "duration_hours": {
            "type": "object"
          },
          "max_participants": {
            "type": "object"
          },
          "prerequisites": {
            "type": "object"
          },
          "learning_objectives": {
            "type": "object"
          },
          "target_skills": {
            "type": "object"
          },
          "content_outline": {
            "type": "object"
          },
          "materials_required": {
            "type": "object"
          },
          "cost_per_person": {
            "type": "object"
          },
          "currency": {
            "type": "string"
          },
          "provider_name": {
            "type": "object"
          },
          "provider_contact": {
            "type": "object"
          },
          "provider_website": {
            "type": "object"
          },
          "accreditation_body": {
            "type": "object"
          },
          "certification_validity_months": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "PAUSED",
              "RETIRED",
              "ARCHIVED"
            ]
          },
          "approval_required": {
            "type": "boolean"
          },
          "certificate_awarded": {
            "type": "boolean"
          },
          "cpd_points": {
            "type": "object"
          },
          "target_audience": {
            "type": "object"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "sessions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "tenant_id",
          "title",
          "course_type",
          "delivery_method",
          "currency",
          "status",
          "approval_required",
          "certificate_awarded",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedCourseResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourseResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "CourseCatalogDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "course_type": {
            "type": "string",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "ONLINE",
              "VENDOR"
            ]
          },
          "delivery_method": {
            "type": "string",
            "enum": [
              "CLASSROOM",
              "ONLINE",
              "BLENDED",
              "SELF_PACED",
              "ON_THE_JOB"
            ]
          },
          "duration_hours": {
            "type": "number"
          },
          "cost_per_person": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "certificate_awarded": {
            "type": "boolean"
          },
          "cpd_points": {
            "type": "number"
          },
          "upcoming_sessions": {
            "type": "number"
          },
          "next_session_date": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "title",
          "description",
          "course_type",
          "delivery_method",
          "duration_hours",
          "cost_per_person",
          "currency",
          "certificate_awarded",
          "cpd_points",
          "upcoming_sessions",
          "next_session_date"
        ]
      },
      "UpdateCourseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Advanced TypeScript"
          },
          "description": {
            "type": "string",
            "example": "Master advanced TypeScript concepts"
          },
          "course_type": {
            "type": "string",
            "example": "INTERNAL",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "ONLINE",
              "VENDOR"
            ]
          },
          "delivery_method": {
            "type": "string",
            "example": "ONLINE",
            "enum": [
              "CLASSROOM",
              "ONLINE",
              "BLENDED",
              "SELF_PACED",
              "ON_THE_JOB"
            ]
          },
          "duration_hours": {
            "type": "number",
            "example": 24
          },
          "max_participants": {
            "type": "number",
            "example": 30
          },
          "prerequisites": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "learning_objectives": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "target_skills": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "content_outline": {
            "type": "string"
          },
          "materials_required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cost_per_person": {
            "type": "number",
            "example": 350
          },
          "currency": {
            "type": "string",
            "example": "GBP"
          },
          "provider_name": {
            "type": "string"
          },
          "provider_contact": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "example": "ACTIVE",
            "enum": [
              "DRAFT",
              "ACTIVE",
              "PAUSED",
              "RETIRED",
              "ARCHIVED"
            ]
          },
          "approval_required": {
            "type": "boolean",
            "example": false
          },
          "certificate_awarded": {
            "type": "boolean",
            "example": true
          },
          "cpd_points": {
            "type": "number",
            "example": 15
          }
        }
      },
      "CreateSessionDto": {
        "type": "object",
        "properties": {
          "course_id": {
            "type": "string",
            "example": "uuid-of-course"
          },
          "session_name": {
            "type": "string",
            "example": "January 2024 Session"
          },
          "start_date": {
            "type": "string",
            "example": "2024-01-15T09:00:00Z"
          },
          "end_date": {
            "type": "string",
            "example": "2024-01-17T17:00:00Z"
          },
          "location": {
            "type": "string",
            "example": "Training Room A, Building 2"
          },
          "virtual_meeting_link": {
            "type": "string",
            "example": "https://teams.microsoft.com/meet/xxx"
          },
          "instructor_id": {
            "type": "string",
            "example": "uuid-of-instructor"
          },
          "external_instructor_name": {
            "type": "string",
            "example": "Dr. Jane Smith"
          },
          "max_capacity": {
            "type": "number",
            "example": 20
          },
          "status": {
            "type": "string",
            "example": "SCHEDULED",
            "enum": [
              "SCHEDULED",
              "IN_PROGRESS",
              "COMPLETED",
              "CANCELLED",
              "POSTPONED"
            ]
          },
          "session_notes": {
            "type": "string",
            "example": "Please bring laptops with Node.js installed"
          }
        },
        "required": [
          "course_id",
          "start_date",
          "end_date"
        ]
      },
      "SessionResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "course_id": {
            "type": "string"
          },
          "session_name": {
            "type": "object"
          },
          "start_date": {
            "format": "date-time",
            "type": "string"
          },
          "end_date": {
            "format": "date-time",
            "type": "string"
          },
          "location": {
            "type": "object"
          },
          "virtual_meeting_link": {
            "type": "object"
          },
          "instructor_id": {
            "type": "object"
          },
          "external_instructor_name": {
            "type": "object"
          },
          "max_capacity": {
            "type": "object"
          },
          "current_enrollment": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "SCHEDULED",
              "IN_PROGRESS",
              "COMPLETED",
              "CANCELLED",
              "POSTPONED"
            ]
          },
          "session_notes": {
            "type": "object"
          },
          "evaluation_form_id": {
            "type": "object"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "course": {
            "type": "object"
          },
          "instructor": {
            "type": "object"
          },
          "session_enrollments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "tenant_id",
          "course_id",
          "start_date",
          "end_date",
          "current_enrollment",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedSessionResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "SessionAvailabilityDto": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string"
          },
          "course_title": {
            "type": "string"
          },
          "start_date": {
            "format": "date-time",
            "type": "string"
          },
          "end_date": {
            "format": "date-time",
            "type": "string"
          },
          "location": {
            "type": "object"
          },
          "virtual_meeting_link": {
            "type": "object"
          },
          "max_capacity": {
            "type": "number"
          },
          "current_enrollment": {
            "type": "number"
          },
          "available_seats": {
            "type": "number"
          },
          "is_full": {
            "type": "boolean"
          },
          "is_waitlist_available": {
            "type": "boolean"
          }
        },
        "required": [
          "session_id",
          "course_title",
          "start_date",
          "end_date",
          "max_capacity",
          "current_enrollment",
          "available_seats",
          "is_full",
          "is_waitlist_available"
        ]
      },
      "UpdateSessionDto": {
        "type": "object",
        "properties": {
          "session_name": {
            "type": "string",
            "example": "February 2024 Session"
          },
          "start_date": {
            "type": "string",
            "example": "2024-02-15T09:00:00Z"
          },
          "end_date": {
            "type": "string",
            "example": "2024-02-17T17:00:00Z"
          },
          "location": {
            "type": "string",
            "example": "Conference Room B"
          },
          "virtual_meeting_link": {
            "type": "string",
            "example": "https://zoom.us/j/xxx"
          },
          "instructor_id": {
            "type": "string",
            "example": "uuid-of-instructor"
          },
          "external_instructor_name": {
            "type": "string",
            "example": "Prof. John Doe"
          },
          "max_capacity": {
            "type": "number",
            "example": 25
          },
          "status": {
            "type": "string",
            "example": "IN_PROGRESS",
            "enum": [
              "SCHEDULED",
              "IN_PROGRESS",
              "COMPLETED",
              "CANCELLED",
              "POSTPONED"
            ]
          },
          "session_notes": {
            "type": "string",
            "example": "Session rescheduled due to instructor availability"
          }
        }
      },
      "CreateTenantLearningContentDto": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "description": "Reference to template ID"
          },
          "code": {
            "type": "string",
            "description": "Content code"
          },
          "title": {
            "type": "string",
            "description": "Content title"
          },
          "description": {
            "type": "string",
            "description": "Content description"
          },
          "content_type": {
            "type": "string",
            "enum": [
              "VIDEO",
              "DOCUMENT",
              "PRESENTATION",
              "INTERACTIVE",
              "ASSESSMENT",
              "WEBINAR",
              "COURSE"
            ],
            "description": "Content type"
          },
          "category": {
            "type": "string",
            "description": "Content category"
          },
          "learning_level": {
            "type": "string",
            "enum": [
              "BEGINNER",
              "INTERMEDIATE",
              "ADVANCED",
              "EXPERT"
            ],
            "description": "Learning level",
            "default": "BEGINNER"
          },
          "target_audience": {
            "description": "Target audience",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_minutes": {
            "type": "number",
            "description": "Estimated duration in minutes",
            "default": 30
          },
          "primary_file_path": {
            "type": "string",
            "description": "Primary file path"
          },
          "learning_objectives": {
            "description": "Learning objectives",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_assessment": {
            "type": "boolean",
            "description": "Has assessment",
            "default": false
          },
          "certification_available": {
            "type": "boolean",
            "description": "Certification available",
            "default": false
          },
          "mandatory_for_roles": {
            "description": "Mandatory for roles",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "compliance_requirement": {
            "type": "boolean",
            "description": "Compliance requirement",
            "default": false
          },
          "custom_content": {
            "type": "object",
            "description": "Custom content (JSON)",
            "default": {}
          },
          "is_active": {
            "type": "boolean",
            "description": "Is active",
            "default": true
          }
        },
        "required": [
          "code",
          "title",
          "content_type",
          "category",
          "target_audience",
          "mandatory_for_roles"
        ]
      },
      "TenantLearningContentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "template_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "content_type": {
            "type": "string",
            "enum": [
              "VIDEO",
              "DOCUMENT",
              "PRESENTATION",
              "INTERACTIVE",
              "ASSESSMENT",
              "WEBINAR",
              "COURSE"
            ]
          },
          "category": {
            "type": "string"
          },
          "learning_level": {
            "type": "string",
            "enum": [
              "BEGINNER",
              "INTERMEDIATE",
              "ADVANCED",
              "EXPERT"
            ]
          },
          "target_audience": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_minutes": {
            "type": "number"
          },
          "primary_file_path": {
            "type": "string"
          },
          "learning_objectives": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_assessment": {
            "type": "boolean"
          },
          "certification_available": {
            "type": "boolean"
          },
          "mandatory_for_roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "compliance_requirement": {
            "type": "boolean"
          },
          "custom_content": {
            "type": "object"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "updated_by_id": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "template": {
            "type": "object"
          },
          "training_enrollments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tenant_learning_progress": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "tenant_id",
          "code",
          "title",
          "content_type",
          "category",
          "learning_level",
          "target_audience",
          "estimated_duration_minutes",
          "learning_objectives",
          "has_assessment",
          "certification_available",
          "mandatory_for_roles",
          "compliance_requirement",
          "custom_content",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedTenantLearningContentResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of tenant learning contents",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantLearningContentResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateTenantLearningContentDto": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "description": "Reference to template ID"
          },
          "code": {
            "type": "string",
            "description": "Content code"
          },
          "title": {
            "type": "string",
            "description": "Content title"
          },
          "description": {
            "type": "string",
            "description": "Content description"
          },
          "content_type": {
            "type": "string",
            "enum": [
              "VIDEO",
              "DOCUMENT",
              "PRESENTATION",
              "INTERACTIVE",
              "ASSESSMENT",
              "WEBINAR",
              "COURSE"
            ],
            "description": "Content type"
          },
          "category": {
            "type": "string",
            "description": "Content category"
          },
          "learning_level": {
            "type": "string",
            "enum": [
              "BEGINNER",
              "INTERMEDIATE",
              "ADVANCED",
              "EXPERT"
            ],
            "description": "Learning level",
            "default": "BEGINNER"
          },
          "target_audience": {
            "description": "Target audience",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_minutes": {
            "type": "number",
            "description": "Estimated duration in minutes",
            "default": 30
          },
          "primary_file_path": {
            "type": "string",
            "description": "Primary file path"
          },
          "learning_objectives": {
            "description": "Learning objectives",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "has_assessment": {
            "type": "boolean",
            "description": "Has assessment",
            "default": false
          },
          "certification_available": {
            "type": "boolean",
            "description": "Certification available",
            "default": false
          },
          "mandatory_for_roles": {
            "description": "Mandatory for roles",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "compliance_requirement": {
            "type": "boolean",
            "description": "Compliance requirement",
            "default": false
          },
          "custom_content": {
            "type": "object",
            "description": "Custom content (JSON)",
            "default": {}
          },
          "is_active": {
            "type": "boolean",
            "description": "Is active",
            "default": true
          }
        }
      },
      "CloneContentDto": {
        "type": "object",
        "properties": {
          "new_code": {
            "type": "string",
            "description": "New content code"
          },
          "new_title": {
            "type": "string",
            "description": "New content title"
          },
          "modifications": {
            "type": "object",
            "description": "Modifications to apply"
          }
        },
        "required": [
          "new_code",
          "new_title"
        ]
      },
      "CreateTenantLearningPathDto": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "description": "Reference to template ID"
          },
          "code": {
            "type": "string",
            "description": "Path code"
          },
          "title": {
            "type": "string",
            "description": "Path title"
          },
          "description": {
            "type": "string",
            "description": "Path description"
          },
          "path_type": {
            "type": "string",
            "description": "Path type"
          },
          "target_audience": {
            "description": "Target audience",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_hours": {
            "type": "number",
            "description": "Estimated duration in hours"
          },
          "certification_available": {
            "type": "boolean",
            "description": "Certification available",
            "default": false
          },
          "mandatory": {
            "type": "boolean",
            "description": "Is mandatory",
            "default": false
          },
          "modules": {
            "type": "object",
            "description": "Modules (JSON array)",
            "default": []
          },
          "custom_modules": {
            "type": "object",
            "description": "Custom modules (JSON)",
            "default": {}
          },
          "is_active": {
            "type": "boolean",
            "description": "Is active",
            "default": true
          }
        },
        "required": [
          "code",
          "title",
          "path_type",
          "target_audience",
          "estimated_duration_hours",
          "modules"
        ]
      },
      "TenantLearningPathResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "template_id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "path_type": {
            "type": "string"
          },
          "target_audience": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_hours": {
            "type": "number"
          },
          "certification_available": {
            "type": "boolean"
          },
          "mandatory": {
            "type": "boolean"
          },
          "modules": {
            "type": "object"
          },
          "custom_modules": {
            "type": "object"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "updated_by_id": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "template": {
            "type": "object"
          },
          "training_enrollments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "tenant_id",
          "code",
          "title",
          "path_type",
          "target_audience",
          "estimated_duration_hours",
          "certification_available",
          "mandatory",
          "modules",
          "custom_modules",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedTenantLearningPathResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of tenant learning paths",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantLearningPathResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "currentPage": {
                "type": "number",
                "example": 1
              },
              "itemsPerPage": {
                "type": "number",
                "example": 10
              },
              "totalItems": {
                "type": "number",
                "example": 100
              },
              "total_pages": {
                "type": "number",
                "example": 10
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateTenantLearningPathDto": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "description": "Reference to template ID"
          },
          "code": {
            "type": "string",
            "description": "Path code"
          },
          "title": {
            "type": "string",
            "description": "Path title"
          },
          "description": {
            "type": "string",
            "description": "Path description"
          },
          "path_type": {
            "type": "string",
            "description": "Path type"
          },
          "target_audience": {
            "description": "Target audience",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "estimated_duration_hours": {
            "type": "number",
            "description": "Estimated duration in hours"
          },
          "certification_available": {
            "type": "boolean",
            "description": "Certification available",
            "default": false
          },
          "mandatory": {
            "type": "boolean",
            "description": "Is mandatory",
            "default": false
          },
          "modules": {
            "type": "object",
            "description": "Modules (JSON array)",
            "default": []
          },
          "custom_modules": {
            "type": "object",
            "description": "Custom modules (JSON)",
            "default": {}
          },
          "is_active": {
            "type": "boolean",
            "description": "Is active",
            "default": true
          }
        }
      },
      "ClonePathDto": {
        "type": "object",
        "properties": {
          "new_code": {
            "type": "string",
            "description": "New path code"
          },
          "new_title": {
            "type": "string",
            "description": "New path title"
          },
          "modifications": {
            "type": "object",
            "description": "Modifications to apply"
          }
        },
        "required": [
          "new_code",
          "new_title"
        ]
      },
      "AddModuleDto": {
        "type": "object",
        "properties": {
          "module_name": {
            "type": "string",
            "description": "Module name"
          },
          "content_id": {
            "type": "string",
            "description": "Module content ID"
          },
          "sequence": {
            "type": "number",
            "description": "Module sequence"
          },
          "is_mandatory": {
            "type": "boolean",
            "description": "Is mandatory module",
            "default": true
          },
          "duration_hours": {
            "type": "number",
            "description": "Module duration in hours"
          }
        },
        "required": [
          "module_name",
          "content_id",
          "sequence"
        ]
      },
      "CreateReportTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Monthly Payroll Report"
          },
          "category": {
            "type": "string",
            "example": "PAYROLL",
            "enum": [
              "EMPLOYEE",
              "PERFORMANCE",
              "PAYROLL",
              "RECRUITMENT",
              "ATTENDANCE",
              "LEAVE",
              "TRAINING",
              "CUSTOM"
            ]
          },
          "description": {
            "type": "string",
            "example": "Monthly payroll summary with department breakdown"
          },
          "report_type": {
            "type": "string",
            "example": "STANDARD",
            "enum": [
              "STANDARD",
              "CUSTOM",
              "DASHBOARD"
            ]
          },
          "data_sources": {
            "type": "object",
            "example": {
              "tables": [
                "employees",
                "payroll_runs"
              ],
              "joins": [
                "department",
                "job"
              ]
            }
          },
          "fields": {
            "type": "object",
            "example": {
              "columns": [
                "employee_name",
                "department",
                "salary",
                "deductions"
              ]
            }
          },
          "filters": {
            "type": "object",
            "example": {
              "date_range": "last_month",
              "department_id": null
            }
          },
          "chart_config": {
            "type": "object",
            "example": {
              "type": "bar",
              "x_axis": "department",
              "y_axis": "total_salary"
            }
          },
          "layout_config": {
            "type": "object",
            "example": {
              "orientation": "portrait",
              "include_logo": true
            }
          },
          "schedule_config": {
            "type": "object",
            "example": {
              "frequency": "monthly",
              "day_of_month": 1
            }
          },
          "access_level": {
            "type": "string",
            "example": "DEPARTMENT",
            "enum": [
              "PRIVATE",
              "DEPARTMENT",
              "COMPANY",
              "PUBLIC"
            ]
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "name"
        ]
      },
      "ReportTemplateResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "EMPLOYEE",
              "PERFORMANCE",
              "PAYROLL",
              "RECRUITMENT",
              "ATTENDANCE",
              "LEAVE",
              "TRAINING",
              "CUSTOM"
            ]
          },
          "description": {
            "type": "object"
          },
          "report_type": {
            "type": "string",
            "enum": [
              "STANDARD",
              "CUSTOM",
              "DASHBOARD"
            ]
          },
          "data_sources": {
            "type": "object"
          },
          "fields": {
            "type": "object"
          },
          "filters": {
            "type": "object"
          },
          "chart_config": {
            "type": "object"
          },
          "layout_config": {
            "type": "object"
          },
          "schedule_config": {
            "type": "object"
          },
          "access_level": {
            "type": "string",
            "enum": [
              "PRIVATE",
              "DEPARTMENT",
              "COMPANY",
              "PUBLIC"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by_id": {
            "type": "object"
          },
          "updated_by_id": {
            "type": "object"
          },
          "created_by": {
            "type": "object"
          },
          "updated_by": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "category",
          "report_type",
          "access_level",
          "active",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedReportTemplateResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportTemplateResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "UpdateReportTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Updated Report Name"
          },
          "category": {
            "type": "string",
            "example": "EMPLOYEE",
            "enum": [
              "EMPLOYEE",
              "PERFORMANCE",
              "PAYROLL",
              "RECRUITMENT",
              "ATTENDANCE",
              "LEAVE",
              "TRAINING",
              "CUSTOM"
            ]
          },
          "description": {
            "type": "string"
          },
          "report_type": {
            "type": "string",
            "example": "CUSTOM",
            "enum": [
              "STANDARD",
              "CUSTOM",
              "DASHBOARD"
            ]
          },
          "data_sources": {
            "type": "object"
          },
          "fields": {
            "type": "object"
          },
          "filters": {
            "type": "object"
          },
          "chart_config": {
            "type": "object"
          },
          "layout_config": {
            "type": "object"
          },
          "schedule_config": {
            "type": "object"
          },
          "access_level": {
            "type": "string",
            "example": "COMPANY",
            "enum": [
              "PRIVATE",
              "DEPARTMENT",
              "COMPANY",
              "PUBLIC"
            ]
          },
          "active": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "GenerateReportInstanceDto": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "example": "uuid-of-template"
          },
          "report_name": {
            "type": "string",
            "example": "Q1 Sales Report 2024"
          },
          "parameters": {
            "type": "object",
            "example": {
              "date_from": "2024-01-01",
              "date_to": "2024-03-31",
              "department_id": "uuid"
            }
          },
          "file_format": {
            "type": "string",
            "example": "PDF",
            "enum": [
              "PDF",
              "EXCEL",
              "CSV",
              "JSON"
            ]
          },
          "expires_at": {
            "type": "string",
            "example": "2024-12-31T23:59:59Z"
          }
        },
        "required": [
          "report_name"
        ]
      },
      "ReportInstanceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "template_id": {
            "type": "object"
          },
          "report_name": {
            "type": "string"
          },
          "parameters": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "GENERATING",
              "COMPLETED",
              "FAILED",
              "EXPIRED"
            ]
          },
          "file_path": {
            "type": "object"
          },
          "file_format": {
            "type": "string",
            "enum": [
              "PDF",
              "EXCEL",
              "CSV",
              "JSON"
            ]
          },
          "file_size": {
            "type": "object"
          },
          "generated_at": {
            "type": "object"
          },
          "generated_by_id": {
            "type": "object"
          },
          "generated_by": {
            "type": "object"
          },
          "expires_at": {
            "type": "object"
          },
          "download_count": {
            "type": "number"
          },
          "last_downloaded": {
            "type": "object"
          },
          "error_message": {
            "type": "object"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "template": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "report_name",
          "status",
          "file_format",
          "download_count",
          "created_at"
        ]
      },
      "PaginatedReportInstanceResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportInstanceResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "ReportGenerationStatusDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "GENERATING",
              "COMPLETED",
              "FAILED",
              "EXPIRED"
            ]
          },
          "progress": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "file_path": {
            "type": "string"
          },
          "download_url": {
            "type": "string"
          },
          "error_message": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "status"
        ]
      },
      "CreateDashboardDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "HR Overview Dashboard"
          },
          "description": {
            "type": "string",
            "example": "Main HR metrics and KPIs dashboard"
          },
          "dashboard_type": {
            "type": "string",
            "example": "OVERVIEW",
            "enum": [
              "OVERVIEW",
              "DEPARTMENT",
              "EXECUTIVE",
              "OPERATIONAL",
              "CUSTOM"
            ]
          },
          "layout": {
            "type": "object",
            "example": {
              "rows": 3,
              "columns": 4,
              "breakpoints": {
                "lg": 1200,
                "md": 996,
                "sm": 768
              }
            }
          },
          "widgets": {
            "type": "object",
            "example": [
              {
                "id": "widget1",
                "type": "chart",
                "title": "Employee Count",
                "config": {
                  "chartType": "line"
                }
              }
            ]
          },
          "refresh_interval": {
            "type": "number",
            "example": 300
          },
          "access_permissions": {
            "type": "object",
            "example": {
              "roles": [
                "HR_MANAGER",
                "ADMIN"
              ],
              "departments": [
                "HR"
              ]
            }
          },
          "is_default": {
            "type": "boolean",
            "example": false
          },
          "active": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "name",
          "layout",
          "widgets"
        ]
      },
      "DashboardResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "tenant_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "object"
          },
          "dashboard_type": {
            "type": "string",
            "enum": [
              "OVERVIEW",
              "DEPARTMENT",
              "EXECUTIVE",
              "OPERATIONAL",
              "CUSTOM"
            ]
          },
          "layout": {
            "type": "object"
          },
          "widgets": {
            "type": "object"
          },
          "refresh_interval": {
            "type": "number"
          },
          "access_permissions": {
            "type": "object"
          },
          "is_default": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "created_by_id": {
            "type": "object"
          },
          "created_by": {
            "type": "object"
          },
          "updated_by_id": {
            "type": "object"
          },
          "updated_by": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "name",
          "dashboard_type",
          "layout",
          "widgets",
          "refresh_interval",
          "is_default",
          "active",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedDashboardResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of data items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardResponseDto"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "DashboardWidgetDataDto": {
        "type": "object",
        "properties": {
          "widget_id": {
            "type": "string"
          },
          "widget_type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "last_updated": {
            "format": "date-time",
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        },
        "required": [
          "widget_id",
          "widget_type",
          "title",
          "data"
        ]
      },
      "DashboardDataResponseDto": {
        "type": "object",
        "properties": {
          "dashboard_id": {
            "type": "string"
          },
          "dashboard_name": {
            "type": "string"
          },
          "widgets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardWidgetDataDto"
            }
          },
          "generated_at": {
            "format": "date-time",
            "type": "string"
          },
          "next_refresh": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "dashboard_id",
          "dashboard_name",
          "widgets",
          "generated_at"
        ]
      },
      "UpdateDashboardDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Updated Dashboard Name"
          },
          "description": {
            "type": "string"
          },
          "dashboard_type": {
            "type": "string",
            "example": "EXECUTIVE",
            "enum": [
              "OVERVIEW",
              "DEPARTMENT",
              "EXECUTIVE",
              "OPERATIONAL",
              "CUSTOM"
            ]
          },
          "layout": {
            "type": "object"
          },
          "widgets": {
            "type": "object"
          },
          "refresh_interval": {
            "type": "number"
          },
          "access_permissions": {
            "type": "object"
          },
          "is_default": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "CreateCaseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Employee Grievance - Workplace Conflict"
          },
          "description": {
            "type": "string",
            "example": "Detailed description of the case..."
          },
          "category_id": {
            "type": "string",
            "example": "uuid-of-category"
          },
          "priority": {
            "type": "string",
            "example": "HIGH",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          },
          "severity": {
            "type": "string",
            "example": "high"
          },
          "reported_by": {
            "type": "string",
            "example": "uuid-of-reporter"
          },
          "assigned_to": {
            "type": "string",
            "example": "uuid-of-assignee"
          },
          "affected_employees": {
            "example": [
              "uuid1",
              "uuid2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "case_data": {
            "type": "object",
            "example": {
              "additional_info": "value"
            }
          },
          "due_date": {
            "type": "string",
            "example": "2024-12-31"
          }
        },
        "required": [
          "title",
          "description",
          "category_id",
          "reported_by"
        ]
      },
      "UpdateCaseDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Updated title"
          },
          "description": {
            "type": "string",
            "example": "Updated description"
          },
          "priority": {
            "type": "string",
            "example": "MEDIUM",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          },
          "severity": {
            "type": "string",
            "example": "medium"
          },
          "status": {
            "type": "string",
            "example": "IN_PROGRESS",
            "enum": [
              "OPEN",
              "IN_PROGRESS",
              "RESOLVED",
              "CLOSED",
              "CANCELLED"
            ]
          },
          "assigned_to": {
            "type": "string",
            "example": "uuid-of-assignee"
          },
          "affected_employees": {
            "example": [
              "uuid1",
              "uuid2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "case_data": {
            "type": "object",
            "example": {
              "additional_info": "value"
            }
          },
          "due_date": {
            "type": "string",
            "example": "2024-12-31"
          }
        }
      },
      "ResolveCaseDto": {
        "type": "object",
        "properties": {
          "resolution": {
            "type": "string",
            "example": "Case resolved with warning issued"
          },
          "outcome_details": {
            "type": "string",
            "example": "Detailed outcome of the case..."
          }
        },
        "required": [
          "resolution"
        ]
      },
      "CreateCaseActivityDto": {
        "type": "object",
        "properties": {
          "case_id": {
            "type": "string",
            "example": "uuid-of-case"
          },
          "activity_type": {
            "type": "string",
            "example": "NOTE"
          },
          "title": {
            "type": "string",
            "example": "Initial meeting with involved parties"
          },
          "description": {
            "type": "string",
            "example": "Detailed description of the activity..."
          },
          "performed_by": {
            "type": "string",
            "example": "uuid-of-performer"
          },
          "activity_data": {
            "type": "object",
            "example": {
              "participants": [
                "John Doe",
                "Jane Smith"
              ]
            }
          },
          "is_internal": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "case_id",
          "activity_type",
          "performed_by"
        ]
      },
      "UpdateCaseActivityDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Updated title"
          },
          "description": {
            "type": "string",
            "example": "Updated description"
          },
          "activity_data": {
            "type": "object",
            "example": {
              "participants": [
                "John Doe"
              ]
            }
          },
          "is_internal": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "CreateCaseCategoryDto": {
        "type": "object",
        "properties": {
          "category_name": {
            "type": "string",
            "example": "Disciplinary"
          },
          "description": {
            "type": "string",
            "example": "Cases related to disciplinary actions"
          },
          "severity_levels": {
            "example": [
              "low",
              "medium",
              "high",
              "critical"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_priority": {
            "type": "string",
            "example": "medium"
          },
          "sla_hours": {
            "type": "number",
            "example": 48
          },
          "escalation_rules": {
            "type": "object",
            "example": {
              "escalate_after": 24
            }
          },
          "required_fields": {
            "type": "object",
            "example": [
              "description",
              "incident_date"
            ]
          },
          "is_active": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "category_name"
        ]
      },
      "UpdateCaseCategoryDto": {
        "type": "object",
        "properties": {
          "category_name": {
            "type": "string",
            "example": "Updated Category Name"
          },
          "description": {
            "type": "string",
            "example": "Updated description"
          },
          "severity_levels": {
            "example": [
              "low",
              "medium",
              "high"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "default_priority": {
            "type": "string",
            "example": "high"
          },
          "sla_hours": {
            "type": "number",
            "example": 72
          },
          "escalation_rules": {
            "type": "object",
            "example": {
              "escalate_after": 48
            }
          },
          "required_fields": {
            "type": "object",
            "example": [
              "description"
            ]
          },
          "is_active": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "CreateNotificationTemplateDto": {
        "type": "object",
        "properties": {
          "template_name": {
            "type": "string",
            "example": "performance_review_reminder"
          },
          "template_type": {
            "type": "string",
            "example": "PERFORMANCE_REVIEW"
          },
          "channel": {
            "type": "string",
            "example": "EMAIL",
            "enum": [
              "EMAIL",
              "IN_APP",
              "SMS",
              "SLACK"
            ]
          },
          "subject_template": {
            "type": "string",
            "example": "Performance Review Due: {{employeeName}}"
          },
          "body_template": {
            "type": "string",
            "example": "Dear {{managerName}}, Performance review for {{employeeName}} is due on {{dueDate}}."
          },
          "variables": {
            "example": [
              "employeeName",
              "managerName",
              "dueDate"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "conditions": {
            "type": "object",
            "example": {
              "department": "HR",
              "role": "MANAGER"
            }
          },
          "is_active": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "template_name",
          "template_type",
          "channel",
          "body_template"
        ]
      },
      "UpdateNotificationTemplateDto": {
        "type": "object",
        "properties": {
          "template_name": {
            "type": "string",
            "example": "updated_template_name"
          },
          "template_type": {
            "type": "string",
            "example": "UPDATED_TYPE"
          },
          "channel": {
            "type": "string",
            "example": "SMS",
            "enum": [
              "EMAIL",
              "IN_APP",
              "SMS",
              "SLACK"
            ]
          },
          "subject_template": {
            "type": "string",
            "example": "Updated Subject"
          },
          "body_template": {
            "type": "string",
            "example": "Updated body template"
          },
          "variables": {
            "example": [
              "var1",
              "var2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "conditions": {
            "type": "object",
            "example": {
              "updated": true
            }
          },
          "is_active": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "SendNotificationDto": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "example": "uuid-of-template"
          },
          "recipient_id": {
            "type": "string",
            "example": "uuid-of-recipient"
          },
          "variables": {
            "type": "object",
            "example": {
              "employeeName": "John Doe",
              "dueDate": "2024-12-31"
            }
          },
          "priority": {
            "type": "string",
            "example": "HIGH",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          },
          "scheduled_at": {
            "type": "string",
            "example": "2024-12-25T10:00:00Z"
          },
          "metadata": {
            "type": "object",
            "example": {
              "cc": [
                "manager@example.com"
              ]
            }
          }
        },
        "required": [
          "template_id",
          "recipient_id",
          "variables"
        ]
      },
      "BulkSendNotificationDto": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "example": "uuid-of-template"
          },
          "recipient_ids": {
            "example": [
              "uuid1",
              "uuid2",
              "uuid3"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "variables": {
            "type": "object",
            "example": {
              "defaultVar": "value"
            }
          },
          "priority": {
            "type": "string",
            "example": "MEDIUM",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          },
          "scheduled_at": {
            "type": "string",
            "example": "2024-12-25T10:00:00Z"
          }
        },
        "required": [
          "template_id",
          "recipient_ids",
          "variables"
        ]
      },
      "RetryNotificationDto": {
        "type": "object",
        "properties": {
          "max_retries": {
            "type": "number",
            "example": 3
          },
          "retry_delay": {
            "type": "number",
            "example": 5000
          }
        }
      },
      "InitiateInspectionDto": {
        "type": "object",
        "properties": {
          "inspection_type_id": {
            "type": "string",
            "example": "uuid-of-inspection-type"
          },
          "regulator_reference": {
            "type": "string",
            "example": "HMRC-2024-001"
          },
          "notice_received_date": {
            "type": "string",
            "example": "2024-01-15"
          },
          "response_deadline": {
            "type": "string",
            "example": "2024-02-05"
          },
          "inspection_date": {
            "type": "string",
            "example": "2024-01-30"
          },
          "scope_parameters": {
            "type": "object",
            "example": {
              "date_range": {
                "start": "2023-04-01",
                "end": "2024-03-31"
              },
              "employee_ids": [
                "uuid1",
                "uuid2"
              ],
              "department_ids": [
                "dept1"
              ]
            }
          },
          "specific_allegations": {
            "example": [
              "Incorrect PAYE calculations",
              "Missing RTI submissions"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inspection_officer_details": {
            "type": "object",
            "example": {
              "officer_name": "John Smith",
              "officer_id": "OFF123"
            }
          },
          "assigned_to": {
            "type": "string",
            "example": "uuid-of-user"
          },
          "internal_notes": {
            "type": "string",
            "example": "Initial PAYE compliance check for tax year 2023-24"
          }
        },
        "required": [
          "inspection_type_id",
          "regulator_reference",
          "notice_received_date",
          "response_deadline",
          "scope_parameters"
        ]
      },
      "UpdateInspectionStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "EVIDENCE_GATHERING",
            "enum": [
              "NOTICE_RECEIVED",
              "EVIDENCE_GATHERING",
              "PACKAGE_GENERATED",
              "SUBMITTED",
              "UNDER_REVIEW",
              "CONCLUDED"
            ]
          },
          "current_stage": {
            "type": "string",
            "example": "Document Collection"
          },
          "progress_percentage": {
            "type": "number",
            "example": 45
          },
          "notes": {
            "type": "string",
            "example": "Completed initial document review"
          }
        },
        "required": [
          "status"
        ]
      },
      "ConcludeInspectionDto": {
        "type": "object",
        "properties": {
          "inspection_outcome": {
            "type": "string",
            "example": "MINOR_ISSUES",
            "enum": [
              "SATISFACTORY",
              "MINOR_ISSUES",
              "MAJOR_ISSUES",
              "PENALTIES_IMPOSED"
            ]
          },
          "penalties_imposed": {
            "type": "number",
            "example": 5000
          },
          "follow_up_actions": {
            "example": [
              "Implement new payroll procedures",
              "Provide additional training"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "conclusion_date": {
            "type": "string",
            "example": "2024-02-15"
          },
          "external_correspondence": {
            "type": "object",
            "example": {
              "findings": "Minor discrepancies found",
              "recommendations": []
            }
          }
        },
        "required": [
          "inspection_outcome"
        ]
      },
      "CreateComplianceTemplateDto": {
        "type": "object",
        "properties": {
          "template_code": {
            "type": "string",
            "example": "HMRC_PAYE_CHECKLIST"
          },
          "template_name": {
            "type": "string",
            "example": "HMRC PAYE Compliance Checklist"
          },
          "inspection_type_ids": {
            "example": [
              "uuid1",
              "uuid2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "checklist_items": {
            "type": "object",
            "example": [
              {
                "item": "Verify RTI submissions",
                "required": true
              },
              {
                "item": "Check NIC calculations",
                "required": true
              }
            ]
          },
          "evidence_requirements": {
            "type": "object",
            "example": {
              "documents": [
                "Payslips",
                "P60s",
                "P45s"
              ],
              "time_period": "Last 6 years"
            }
          },
          "automation_rules": {
            "type": "object"
          },
          "quality_checks": {
            "type": "object"
          },
          "output_templates": {
            "type": "object"
          },
          "is_system_template": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "template_code",
          "template_name",
          "checklist_items",
          "evidence_requirements"
        ]
      },
      "GenerateEvidencePackageDto": {
        "type": "object",
        "properties": {
          "inspection_case_id": {
            "type": "string",
            "example": "uuid-of-inspection-case"
          },
          "package_type": {
            "type": "string",
            "example": "INITIAL_RESPONSE",
            "enum": [
              "INITIAL_RESPONSE",
              "SUPPLEMENTARY",
              "FINAL_SUBMISSION"
            ]
          },
          "generation_config": {
            "type": "object",
            "example": {
              "include_all_evidence": true,
              "priority_order": [
                "PAYROLL_RECORDS",
                "EMPLOYMENT_CONTRACTS"
              ],
              "completeness_check": true,
              "cross_reference_validation": true
            }
          },
          "scope_parameters": {
            "type": "object",
            "example": {
              "date_range": {
                "start": "2023-04-01",
                "end": "2024-03-31"
              },
              "employee_ids": [
                "uuid1",
                "uuid2"
              ],
              "department_ids": [
                "dept1"
              ]
            }
          },
          "package_format": {
            "type": "string",
            "example": "DIGITAL",
            "enum": [
              "DIGITAL",
              "PHYSICAL",
              "HYBRID"
            ]
          },
          "delivery_method": {
            "type": "string",
            "example": "SECURE_PORTAL",
            "enum": [
              "SECURE_PORTAL",
              "EMAIL",
              "PHYSICAL_DELIVERY"
            ]
          },
          "authentication_method": {
            "type": "string",
            "example": "DIGITAL_SIGNATURE",
            "enum": [
              "DIGITAL_SIGNATURE",
              "NOTARIZATION",
              "BLOCKCHAIN_TIMESTAMP"
            ]
          }
        },
        "required": [
          "inspection_case_id",
          "package_type",
          "generation_config",
          "scope_parameters"
        ]
      },
      "ComplianceDashboardDto": {
        "type": "object",
        "properties": {
          "overallComplianceScore": {
            "type": "number"
          },
          "totalCompliantItems": {
            "type": "number"
          },
          "totalNonCompliantItems": {
            "type": "number"
          },
          "urgentActionItems": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "upcomingRenewals": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "recentInspections": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "riskDistribution": {
            "type": "object"
          },
          "complianceByCategory": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "overallComplianceScore",
          "totalCompliantItems",
          "totalNonCompliantItems",
          "urgentActionItems",
          "upcomingRenewals",
          "recentInspections",
          "riskDistribution",
          "complianceByCategory"
        ]
      },
      "ComplianceCheckConfigDto": {
        "type": "object",
        "properties": {
          "includeCategories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "excludeCategories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "generateReport": {
            "type": "boolean"
          },
          "sendNotifications": {
            "type": "boolean"
          }
        }
      },
      "ComplianceCheckResultDto": {
        "type": "object",
        "properties": {
          "checkDate": {
            "format": "date-time",
            "type": "string"
          },
          "overallResult": {
            "type": "string"
          },
          "itemResults": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "reportPath": {
            "type": "string"
          },
          "nextCheckDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "checkDate",
          "overallResult",
          "itemResults",
          "nextCheckDate"
        ]
      },
      "CreateWorkplaceComplianceItemDto": {
        "type": "object",
        "properties": {
          "compliance_code": {
            "type": "string",
            "example": "ELI_INSURANCE"
          },
          "compliance_name": {
            "type": "string",
            "example": "Employer's Liability Insurance"
          },
          "compliance_category": {
            "type": "string",
            "enum": [
              "INSURANCE",
              "SAFETY",
              "TRAINING",
              "CERTIFICATION"
            ]
          },
          "description": {
            "type": "string"
          },
          "legal_requirement": {
            "type": "object"
          },
          "regulatory_body": {
            "type": "string"
          },
          "is_mandatory": {
            "type": "boolean",
            "default": true
          },
          "applies_to_company_size": {
            "type": "string",
            "enum": [
              "ALL",
              "SMALL",
              "MEDIUM",
              "LARGE"
            ]
          },
          "applies_to_industry": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "check_frequency": {
            "type": "string",
            "enum": [
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "QUARTERLY",
              "ANNUAL"
            ]
          },
          "advance_notice_days": {
            "type": "number",
            "default": 30
          },
          "grace_period_days": {
            "type": "number",
            "default": 0
          }
        },
        "required": [
          "compliance_code",
          "compliance_name",
          "compliance_category",
          "legal_requirement"
        ]
      },
      "WorkplaceComplianceItemResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "compliance_code": {
            "type": "string"
          },
          "compliance_name": {
            "type": "string"
          },
          "compliance_category": {
            "type": "string",
            "enum": [
              "INSURANCE",
              "SAFETY",
              "TRAINING",
              "CERTIFICATION"
            ]
          },
          "description": {
            "type": "string"
          },
          "legal_requirement": {
            "type": "object"
          },
          "regulatory_body": {
            "type": "string"
          },
          "is_mandatory": {
            "type": "boolean"
          },
          "applies_to_company_size": {
            "type": "string"
          },
          "applies_to_industry": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "check_frequency": {
            "type": "string"
          },
          "advance_notice_days": {
            "type": "number"
          },
          "grace_period_days": {
            "type": "number"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "compliance_code",
          "compliance_name",
          "compliance_category",
          "legal_requirement",
          "is_mandatory",
          "applies_to_industry",
          "advance_notice_days",
          "grace_period_days",
          "is_active",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of data items",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "pagination": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetaDto"
              }
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "UpdateWorkplaceComplianceItemDto": {
        "type": "object",
        "properties": {
          "compliance_name": {
            "type": "string"
          },
          "compliance_category": {
            "type": "string",
            "enum": [
              "INSURANCE",
              "SAFETY",
              "TRAINING",
              "CERTIFICATION"
            ]
          },
          "description": {
            "type": "string"
          },
          "legal_requirement": {
            "type": "object"
          },
          "regulatory_body": {
            "type": "string"
          },
          "is_mandatory": {
            "type": "boolean"
          },
          "applies_to_company_size": {
            "type": "string",
            "enum": [
              "ALL",
              "SMALL",
              "MEDIUM",
              "LARGE"
            ]
          },
          "applies_to_industry": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "check_frequency": {
            "type": "string",
            "enum": [
              "DAILY",
              "WEEKLY",
              "MONTHLY",
              "QUARTERLY",
              "ANNUAL"
            ]
          },
          "advance_notice_days": {
            "type": "number"
          },
          "grace_period_days": {
            "type": "number"
          },
          "is_active": {
            "type": "boolean"
          }
        }
      },
      "CreateCompanyComplianceStatusDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string"
          },
          "compliance_item_id": {
            "type": "string"
          },
          "current_status": {
            "type": "string",
            "enum": [
              "COMPLIANT",
              "NON_COMPLIANT",
              "OVERDUE",
              "PENDING"
            ]
          },
          "compliance_level": {
            "type": "string",
            "enum": [
              "FULL",
              "PARTIAL",
              "NONE"
            ]
          },
          "last_check_date": {
            "type": "string"
          },
          "next_due_date": {
            "type": "string"
          },
          "expiry_date": {
            "type": "string"
          },
          "responsible_person_id": {
            "type": "string"
          },
          "responsible_department_id": {
            "type": "string"
          },
          "evidence_documents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "certificates": {
            "type": "object"
          },
          "risk_level": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          },
          "non_compliance_impact": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          }
        },
        "required": [
          "company_id",
          "compliance_item_id",
          "current_status",
          "next_due_date"
        ]
      },
      "CompanyComplianceStatusResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "company_id": {
            "type": "string"
          },
          "compliance_item_id": {
            "type": "string"
          },
          "current_status": {
            "type": "string",
            "enum": [
              "COMPLIANT",
              "NON_COMPLIANT",
              "OVERDUE",
              "PENDING"
            ]
          },
          "compliance_level": {
            "type": "string",
            "enum": [
              "FULL",
              "PARTIAL",
              "NONE"
            ]
          },
          "last_check_date": {
            "format": "date-time",
            "type": "string"
          },
          "next_due_date": {
            "format": "date-time",
            "type": "string"
          },
          "expiry_date": {
            "format": "date-time",
            "type": "string"
          },
          "responsible_person_id": {
            "type": "string"
          },
          "responsible_department_id": {
            "type": "string"
          },
          "evidence_documents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "certificates": {
            "type": "object"
          },
          "risk_level": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          },
          "non_compliance_impact": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "compliance_item": {
            "type": "object"
          },
          "company": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "company_id",
          "compliance_item_id",
          "current_status",
          "next_due_date",
          "evidence_documents",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateCompanyComplianceStatusDto": {
        "type": "object",
        "properties": {
          "current_status": {
            "type": "string",
            "enum": [
              "COMPLIANT",
              "NON_COMPLIANT",
              "OVERDUE",
              "PENDING"
            ]
          },
          "compliance_level": {
            "type": "string",
            "enum": [
              "FULL",
              "PARTIAL",
              "NONE"
            ]
          },
          "last_check_date": {
            "type": "string"
          },
          "next_due_date": {
            "type": "string"
          },
          "expiry_date": {
            "type": "string"
          },
          "responsible_person_id": {
            "type": "string"
          },
          "responsible_department_id": {
            "type": "string"
          },
          "evidence_documents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "certificates": {
            "type": "object"
          },
          "risk_level": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          },
          "non_compliance_impact": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          }
        }
      },
      "CreateInsurancePolicyDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string"
          },
          "policy_type": {
            "type": "string",
            "enum": [
              "EMPLOYERS_LIABILITY",
              "PUBLIC_LIABILITY",
              "PROFESSIONAL_INDEMNITY",
              "PROPERTY",
              "VEHICLE",
              "CYBER",
              "OTHER"
            ]
          },
          "policy_number": {
            "type": "string",
            "example": "POL-2024-001"
          },
          "insurer_name": {
            "type": "string",
            "example": "ABC Insurance Ltd"
          },
          "broker_name": {
            "type": "string",
            "example": "XYZ Brokers"
          },
          "coverage_amount": {
            "type": "number",
            "example": 5000000
          },
          "currency": {
            "type": "string",
            "default": "GBP"
          },
          "coverage_details": {
            "type": "object"
          },
          "policy_start_date": {
            "type": "string"
          },
          "policy_end_date": {
            "type": "string"
          },
          "renewal_date": {
            "type": "string"
          },
          "premium_amount": {
            "type": "number",
            "example": 1200.5
          },
          "payment_frequency": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "QUARTERLY",
              "MONTHLY"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "EXPIRED",
              "CANCELLED",
              "PENDING_RENEWAL"
            ],
            "default": "ACTIVE"
          },
          "policy_document_path": {
            "type": "string"
          },
          "certificate_path": {
            "type": "string"
          }
        },
        "required": [
          "company_id",
          "policy_type",
          "policy_number",
          "insurer_name",
          "policy_start_date",
          "policy_end_date"
        ]
      },
      "InsurancePolicyResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "company_id": {
            "type": "string"
          },
          "policy_type": {
            "type": "string",
            "enum": [
              "EMPLOYERS_LIABILITY",
              "PUBLIC_LIABILITY",
              "PROFESSIONAL_INDEMNITY",
              "PROPERTY",
              "VEHICLE",
              "CYBER",
              "OTHER"
            ]
          },
          "policy_number": {
            "type": "string"
          },
          "insurer_name": {
            "type": "string"
          },
          "broker_name": {
            "type": "string"
          },
          "coverage_amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "coverage_details": {
            "type": "object"
          },
          "policy_start_date": {
            "format": "date-time",
            "type": "string"
          },
          "policy_end_date": {
            "format": "date-time",
            "type": "string"
          },
          "renewal_date": {
            "format": "date-time",
            "type": "string"
          },
          "premium_amount": {
            "type": "number"
          },
          "payment_frequency": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "EXPIRED",
              "CANCELLED",
              "PENDING_RENEWAL"
            ]
          },
          "policy_document_path": {
            "type": "string"
          },
          "certificate_path": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "company": {
            "type": "object"
          },
          "days_until_expiry": {
            "type": "number"
          },
          "is_expiring_soon": {
            "type": "boolean"
          },
          "is_expired": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "company_id",
          "policy_type",
          "policy_number",
          "insurer_name",
          "currency",
          "policy_start_date",
          "policy_end_date",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateInsurancePolicyDto": {
        "type": "object",
        "properties": {
          "broker_name": {
            "type": "string",
            "example": "XYZ Brokers"
          },
          "coverage_amount": {
            "type": "number",
            "example": 5000000
          },
          "coverage_details": {
            "type": "object"
          },
          "policy_start_date": {
            "type": "string"
          },
          "policy_end_date": {
            "type": "string"
          },
          "renewal_date": {
            "type": "string"
          },
          "premium_amount": {
            "type": "number",
            "example": 1200.5
          },
          "payment_frequency": {
            "type": "string",
            "enum": [
              "ANNUAL",
              "QUARTERLY",
              "MONTHLY"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "EXPIRED",
              "CANCELLED",
              "PENDING_RENEWAL"
            ]
          },
          "policy_document_path": {
            "type": "string"
          },
          "certificate_path": {
            "type": "string"
          }
        }
      },
      "RenewInsurancePolicyDto": {
        "type": "object",
        "properties": {
          "new_policy_number": {
            "type": "string"
          },
          "new_start_date": {
            "type": "string"
          },
          "new_end_date": {
            "type": "string"
          },
          "new_coverage_amount": {
            "type": "number"
          },
          "new_premium_amount": {
            "type": "number"
          },
          "updated_coverage_details": {
            "type": "object"
          },
          "renewal_notes": {
            "type": "string"
          }
        },
        "required": [
          "new_policy_number",
          "new_start_date",
          "new_end_date"
        ]
      },
      "CreateSafetyInspectionDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string"
          },
          "inspection_type": {
            "type": "string",
            "enum": [
              "FIRE_SAFETY",
              "EQUIPMENT_CHECK",
              "WORKPLACE_ASSESSMENT",
              "ELECTRICAL_SAFETY",
              "MANUAL_HANDLING",
              "DSE_ASSESSMENT",
              "COSHH",
              "OTHER"
            ]
          },
          "inspection_title": {
            "type": "string",
            "example": "Annual Fire Safety Inspection"
          },
          "inspection_date": {
            "type": "string"
          },
          "location": {
            "type": "string",
            "example": "Main Office Building"
          },
          "areas_covered": {
            "example": [
              "Reception",
              "Office Floor 1"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "equipment_checked": {
            "example": [
              "Fire Extinguishers",
              "Emergency Exits"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inspector_id": {
            "type": "string"
          },
          "external_inspector": {
            "type": "string",
            "example": "ABC Safety Consultants"
          },
          "inspector_qualification": {
            "type": "string",
            "example": "NEBOSH Certificate"
          },
          "overall_result": {
            "type": "string",
            "enum": [
              "PASS",
              "FAIL",
              "CONDITIONAL_PASS",
              "PENDING"
            ]
          },
          "score": {
            "type": "number",
            "minimum": 0,
            "maximum": 100
          },
          "issues_found": {
            "type": "object"
          },
          "high_risk_issues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "medium_risk_issues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "low_risk_issues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remedial_actions_required": {
            "type": "object"
          },
          "completion_deadline": {
            "type": "string"
          },
          "next_inspection_due": {
            "type": "string"
          },
          "inspection_report_path": {
            "type": "string"
          },
          "photos": {
            "type": "object"
          }
        },
        "required": [
          "company_id",
          "inspection_type",
          "inspection_title",
          "inspection_date",
          "overall_result"
        ]
      },
      "SafetyInspectionResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "company_id": {
            "type": "string"
          },
          "inspection_type": {
            "type": "string",
            "enum": [
              "FIRE_SAFETY",
              "EQUIPMENT_CHECK",
              "WORKPLACE_ASSESSMENT",
              "ELECTRICAL_SAFETY",
              "MANUAL_HANDLING",
              "DSE_ASSESSMENT",
              "COSHH",
              "OTHER"
            ]
          },
          "inspection_title": {
            "type": "string"
          },
          "inspection_date": {
            "format": "date-time",
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "areas_covered": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "equipment_checked": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inspector_id": {
            "type": "string"
          },
          "external_inspector": {
            "type": "string"
          },
          "inspector_qualification": {
            "type": "string"
          },
          "overall_result": {
            "type": "string",
            "enum": [
              "PASS",
              "FAIL",
              "CONDITIONAL_PASS",
              "PENDING"
            ]
          },
          "score": {
            "type": "number"
          },
          "issues_found": {
            "type": "object"
          },
          "high_risk_issues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "medium_risk_issues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "low_risk_issues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remedial_actions_required": {
            "type": "object"
          },
          "completion_deadline": {
            "format": "date-time",
            "type": "string"
          },
          "next_inspection_due": {
            "format": "date-time",
            "type": "string"
          },
          "inspection_report_path": {
            "type": "string"
          },
          "photos": {
            "type": "object"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "company": {
            "type": "object"
          },
          "inspector": {
            "type": "object"
          },
          "days_until_next": {
            "type": "number"
          },
          "is_overdue": {
            "type": "boolean"
          },
          "total_issues_count": {
            "type": "number"
          },
          "critical_issues_count": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "company_id",
          "inspection_type",
          "inspection_title",
          "inspection_date",
          "areas_covered",
          "equipment_checked",
          "overall_result",
          "high_risk_issues",
          "medium_risk_issues",
          "low_risk_issues",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateSafetyInspectionDto": {
        "type": "object",
        "properties": {
          "overall_result": {
            "type": "string",
            "enum": [
              "PASS",
              "FAIL",
              "CONDITIONAL_PASS",
              "PENDING"
            ]
          },
          "score": {
            "type": "number"
          },
          "issues_found": {
            "type": "object"
          },
          "high_risk_issues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "medium_risk_issues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "low_risk_issues": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "remedial_actions_required": {
            "type": "object"
          },
          "completion_deadline": {
            "type": "string"
          },
          "next_inspection_due": {
            "type": "string"
          },
          "inspection_report_path": {
            "type": "string"
          },
          "photos": {
            "type": "object"
          }
        }
      },
      "RiskItemDto": {
        "type": "object",
        "properties": {
          "hazard_description": {
            "type": "string",
            "example": "Slips and trips"
          },
          "hazard_details": {
            "type": "string",
            "example": "Wet floor in kitchen area"
          },
          "people_at_risk": {
            "example": [
              "All staff",
              "Visitors"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "severity_before_controls": {
            "type": "string",
            "enum": [
              "NEGLIGIBLE",
              "MINOR",
              "MODERATE",
              "MAJOR",
              "CATASTROPHIC"
            ]
          },
          "likelihood_before_controls": {
            "type": "string",
            "enum": [
              "RARE",
              "UNLIKELY",
              "POSSIBLE",
              "LIKELY",
              "ALMOST_CERTAIN"
            ]
          },
          "existing_controls": {
            "example": [
              "Wet floor signs",
              "Non-slip mats"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "severity_after_controls": {
            "type": "string",
            "enum": [
              "NEGLIGIBLE",
              "MINOR",
              "MODERATE",
              "MAJOR",
              "CATASTROPHIC"
            ]
          },
          "likelihood_after_controls": {
            "type": "string",
            "enum": [
              "RARE",
              "UNLIKELY",
              "POSSIBLE",
              "LIKELY",
              "ALMOST_CERTAIN"
            ]
          },
          "additional_controls_required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "responsible_person_id": {
            "type": "string"
          },
          "target_completion_date": {
            "type": "string"
          }
        },
        "required": [
          "hazard_description",
          "hazard_details",
          "people_at_risk",
          "severity_before_controls",
          "likelihood_before_controls",
          "existing_controls",
          "severity_after_controls",
          "likelihood_after_controls"
        ]
      },
      "CreateRiskAssessmentDto": {
        "type": "object",
        "properties": {
          "company_id": {
            "type": "string"
          },
          "assessment_type": {
            "type": "string",
            "enum": [
              "WORKPLACE",
              "FIRE",
              "MANUAL_HANDLING",
              "DSE",
              "COSHH",
              "LONE_WORKING",
              "YOUNG_PERSON",
              "NEW_MOTHER",
              "STRESS",
              "NOISE",
              "VIBRATION",
              "GENERAL"
            ]
          },
          "assessment_title": {
            "type": "string",
            "example": "Office Risk Assessment 2024"
          },
          "assessment_description": {
            "type": "string",
            "example": "Annual workplace risk assessment for main office"
          },
          "department_id": {
            "type": "string"
          },
          "location": {
            "type": "string",
            "example": "Main Office Building"
          },
          "areas_covered": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "activities_covered": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assessor_id": {
            "type": "string"
          },
          "assessor_qualification": {
            "type": "string"
          },
          "assessment_date": {
            "type": "string"
          },
          "risks_identified": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskItemDto"
            }
          },
          "overall_risk_rating": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          },
          "control_measures": {
            "type": "object"
          },
          "emergency_procedures": {
            "type": "object"
          },
          "review_date": {
            "type": "string"
          },
          "next_assessment_date": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "IN_REVIEW",
              "APPROVED",
              "EXPIRED",
              "ARCHIVED"
            ],
            "default": "DRAFT"
          },
          "assessment_report_path": {
            "type": "string"
          }
        },
        "required": [
          "company_id",
          "assessment_type",
          "assessment_title",
          "assessment_description",
          "location",
          "assessor_id",
          "assessment_date",
          "risks_identified",
          "next_assessment_date"
        ]
      },
      "RiskAssessmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "company_id": {
            "type": "string"
          },
          "assessment_type": {
            "type": "string",
            "enum": [
              "WORKPLACE",
              "FIRE",
              "MANUAL_HANDLING",
              "DSE",
              "COSHH",
              "LONE_WORKING",
              "YOUNG_PERSON",
              "NEW_MOTHER",
              "STRESS",
              "NOISE",
              "VIBRATION",
              "GENERAL"
            ]
          },
          "assessment_title": {
            "type": "string"
          },
          "assessment_description": {
            "type": "string"
          },
          "department_id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "areas_covered": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "activities_covered": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "assessor_id": {
            "type": "string"
          },
          "assessor_qualification": {
            "type": "string"
          },
          "assessment_date": {
            "format": "date-time",
            "type": "string"
          },
          "risks_identified": {
            "type": "object"
          },
          "overall_risk_rating": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          },
          "risk_score": {
            "type": "number"
          },
          "control_measures": {
            "type": "object"
          },
          "emergency_procedures": {
            "type": "object"
          },
          "review_date": {
            "format": "date-time",
            "type": "string"
          },
          "next_assessment_date": {
            "format": "date-time",
            "type": "string"
          },
          "approved_by_id": {
            "type": "string"
          },
          "approval_date": {
            "format": "date-time",
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "IN_REVIEW",
              "APPROVED",
              "EXPIRED",
              "ARCHIVED"
            ]
          },
          "assessment_report_path": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "company": {
            "type": "object"
          },
          "department": {
            "type": "object"
          },
          "assessor": {
            "type": "object"
          },
          "approved_by": {
            "type": "object"
          },
          "days_until_next": {
            "type": "number"
          },
          "is_overdue": {
            "type": "boolean"
          },
          "total_risks_count": {
            "type": "number"
          },
          "high_risks_count": {
            "type": "number"
          },
          "medium_risks_count": {
            "type": "number"
          },
          "low_risks_count": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "company_id",
          "assessment_type",
          "assessment_title",
          "assessment_description",
          "location",
          "areas_covered",
          "activities_covered",
          "assessor_id",
          "assessment_date",
          "risks_identified",
          "next_assessment_date",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "UpdateRiskAssessmentDto": {
        "type": "object",
        "properties": {
          "assessment_description": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "areas_covered": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "activities_covered": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "risks_identified": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RiskItemDto"
            }
          },
          "overall_risk_rating": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "CRITICAL"
            ]
          },
          "control_measures": {
            "type": "object"
          },
          "emergency_procedures": {
            "type": "object"
          },
          "review_date": {
            "type": "string"
          },
          "next_assessment_date": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "IN_REVIEW",
              "APPROVED",
              "EXPIRED",
              "ARCHIVED"
            ]
          },
          "assessment_report_path": {
            "type": "string"
          }
        }
      },
      "RiskMatrixDto": {
        "type": "object",
        "properties": {
          "total_assessments": {
            "type": "number"
          },
          "active_assessments": {
            "type": "number"
          },
          "expired_assessments": {
            "type": "number"
          },
          "assessments_due_soon": {
            "type": "number"
          },
          "risk_distribution": {
            "type": "object"
          },
          "assessments_by_type": {
            "type": "object"
          },
          "risk_matrix": {
            "type": "object"
          },
          "high_priority_risks": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "upcoming_assessments": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "overdue_assessments": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "total_assessments",
          "active_assessments",
          "expired_assessments",
          "assessments_due_soon",
          "risk_distribution",
          "assessments_by_type",
          "risk_matrix",
          "high_priority_risks",
          "upcoming_assessments",
          "overdue_assessments"
        ]
      },
      "ActionPlanDto": {
        "type": "object",
        "properties": {
          "tasks": {
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "deadline": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          }
        },
        "required": [
          "tasks"
        ]
      },
      "CreateAccidentReportDto": {
        "type": "object",
        "properties": {
          "tenant_id": {
            "type": "string"
          },
          "company_id": {
            "type": "string"
          },
          "accident_date": {
            "type": "string",
            "example": "2024-01-15"
          },
          "accident_time": {
            "type": "string",
            "example": "14:30"
          },
          "location": {
            "type": "string",
            "example": "Warehouse Floor Area B"
          },
          "department_id": {
            "type": "string"
          },
          "affected_employee_id": {
            "type": "string"
          },
          "affected_employee_name": {
            "type": "string"
          },
          "accident_type": {
            "type": "string",
            "enum": [
              "SLIP_TRIP_FALL",
              "MANUAL_HANDLING",
              "STRUCK_BY_OBJECT",
              "MACHINERY",
              "VEHICLE",
              "ELECTRICAL",
              "CHEMICAL",
              "BURN",
              "CUT_LACERATION",
              "ERGONOMIC",
              "VIOLENCE",
              "OTHER"
            ]
          },
          "injury_type": {
            "type": "string"
          },
          "injury_severity": {
            "type": "string",
            "enum": [
              "NO_INJURY",
              "MINOR",
              "MODERATE",
              "MAJOR",
              "FATAL"
            ]
          },
          "injury_description": {
            "type": "string"
          },
          "body_parts_affected": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "accident_description": {
            "type": "string"
          },
          "immediate_action_taken": {
            "type": "string"
          },
          "witness_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "witness_statements": {
            "type": "string"
          },
          "reported_by": {
            "type": "string"
          },
          "reported_date": {
            "type": "string"
          },
          "riddor_reportable": {
            "type": "boolean"
          },
          "riddor_reference": {
            "type": "string"
          },
          "days_lost": {
            "type": "number"
          },
          "medical_treatment_required": {
            "type": "boolean"
          },
          "hospital_visit": {
            "type": "boolean"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "company_id",
          "accident_date",
          "location",
          "accident_type",
          "injury_severity",
          "accident_description",
          "reported_by"
        ]
      },
      "AccidentReportResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "company_id": {
            "type": "string"
          },
          "report_number": {
            "type": "string"
          },
          "accident_date": {
            "format": "date-time",
            "type": "string"
          },
          "accident_time": {
            "format": "date-time",
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "department_id": {
            "type": "string"
          },
          "affected_employee_id": {
            "type": "string"
          },
          "affected_employee_name": {
            "type": "string"
          },
          "accident_type": {
            "type": "string",
            "enum": [
              "SLIP_TRIP_FALL",
              "MANUAL_HANDLING",
              "STRUCK_BY_OBJECT",
              "MACHINERY",
              "VEHICLE",
              "ELECTRICAL",
              "CHEMICAL",
              "BURN",
              "CUT_LACERATION",
              "ERGONOMIC",
              "VIOLENCE",
              "OTHER"
            ]
          },
          "injury_type": {
            "type": "string"
          },
          "injury_severity": {
            "type": "string"
          },
          "injury_description": {
            "type": "string"
          },
          "body_parts_affected": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "accident_description": {
            "type": "string"
          },
          "immediate_action_taken": {
            "type": "string"
          },
          "witness_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "witness_statements": {
            "type": "string"
          },
          "reported_by": {
            "type": "string"
          },
          "reported_date": {
            "format": "date-time",
            "type": "string"
          },
          "riddor_reportable": {
            "type": "boolean"
          },
          "riddor_reference": {
            "type": "string"
          },
          "days_lost": {
            "type": "number"
          },
          "medical_treatment_required": {
            "type": "boolean"
          },
          "hospital_visit": {
            "type": "boolean"
          },
          "investigation_date": {
            "format": "date-time",
            "type": "string"
          },
          "investigated_by": {
            "type": "string"
          },
          "root_causes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contributing_factors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "corrective_actions": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "preventive_actions": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "investigation_findings": {
            "type": "string"
          },
          "recommendations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "action_plan": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "REPORTED",
              "UNDER_INVESTIGATION",
              "INVESTIGATED",
              "CLOSED"
            ]
          },
          "closure_date": {
            "format": "date-time",
            "type": "string"
          },
          "closure_notes": {
            "type": "string"
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "company": {
            "type": "object"
          },
          "department": {
            "type": "object"
          },
          "affected_employee": {
            "type": "object"
          },
          "days_since_accident": {
            "type": "number"
          },
          "requires_riddor": {
            "type": "boolean"
          },
          "investigation_overdue": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "company_id",
          "report_number",
          "accident_date",
          "location",
          "accident_type",
          "body_parts_affected",
          "accident_description",
          "witness_names",
          "reported_by",
          "reported_date",
          "riddor_reportable",
          "medical_treatment_required",
          "hospital_visit",
          "root_causes",
          "contributing_factors",
          "corrective_actions",
          "preventive_actions",
          "recommendations",
          "status",
          "photos",
          "documents",
          "created_at",
          "updated_at"
        ]
      },
      "AccidentStatisticsDto": {
        "type": "object",
        "properties": {
          "total_accidents": {
            "type": "number"
          },
          "riddor_reportable": {
            "type": "number"
          },
          "total_days_lost": {
            "type": "number"
          },
          "accidents_by_severity": {
            "type": "object"
          },
          "accidents_by_type": {
            "type": "object"
          },
          "accidents_by_department": {
            "type": "object"
          },
          "accidents_by_month": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "frequency_rate": {
            "type": "number"
          },
          "severity_rate": {
            "type": "number"
          },
          "open_investigations": {
            "type": "number"
          },
          "completed_investigations": {
            "type": "number"
          },
          "most_common_injuries": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "most_affected_body_parts": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "total_accidents",
          "riddor_reportable",
          "total_days_lost",
          "accidents_by_severity",
          "accidents_by_type",
          "accidents_by_department",
          "accidents_by_month",
          "frequency_rate",
          "severity_rate",
          "open_investigations",
          "completed_investigations",
          "most_common_injuries",
          "most_affected_body_parts"
        ]
      },
      "UpdateAccidentReportDto": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string"
          },
          "department_id": {
            "type": "string"
          },
          "injury_type": {
            "type": "string"
          },
          "injury_severity": {
            "type": "string",
            "enum": [
              "NO_INJURY",
              "MINOR",
              "MODERATE",
              "MAJOR",
              "FATAL"
            ]
          },
          "injury_description": {
            "type": "string"
          },
          "body_parts_affected": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "accident_description": {
            "type": "string"
          },
          "immediate_action_taken": {
            "type": "string"
          },
          "witness_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "witness_statements": {
            "type": "string"
          },
          "riddor_reportable": {
            "type": "boolean"
          },
          "riddor_reference": {
            "type": "string"
          },
          "days_lost": {
            "type": "number"
          },
          "medical_treatment_required": {
            "type": "boolean"
          },
          "hospital_visit": {
            "type": "boolean"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "REPORTED",
              "UNDER_INVESTIGATION",
              "INVESTIGATED",
              "CLOSED"
            ]
          },
          "photos": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateTrainingComplianceDto": {
        "type": "object",
        "properties": {
          "tenant_id": {
            "type": "string"
          },
          "company_id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "training_type": {
            "type": "string",
            "enum": [
              "HEALTH_SAFETY",
              "FIRE_SAFETY",
              "FIRST_AID",
              "MANUAL_HANDLING",
              "GDPR",
              "ANTI_BRIBERY",
              "DIVERSITY_INCLUSION",
              "MENTAL_HEALTH",
              "EMERGENCY_EVACUATION",
              "FOOD_HYGIENE",
              "SAFEGUARDING",
              "TECHNICAL",
              "PROFESSIONAL",
              "OTHER"
            ]
          },
          "training_name": {
            "type": "string"
          },
          "provider_name": {
            "type": "string"
          },
          "is_mandatory": {
            "type": "boolean"
          },
          "completion_date": {
            "type": "string"
          },
          "expiry_date": {
            "type": "string"
          },
          "certificate_number": {
            "type": "string"
          },
          "training_hours": {
            "type": "number"
          },
          "cost": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "NOT_STARTED",
              "IN_PROGRESS",
              "COMPLETED",
              "EXPIRED",
              "EXEMPT",
              "FAILED"
            ]
          },
          "next_renewal_date": {
            "type": "string"
          },
          "certificate_path": {
            "type": "string"
          }
        },
        "required": [
          "company_id",
          "employee_id",
          "training_type",
          "training_name",
          "provider_name",
          "is_mandatory"
        ]
      },
      "TrainingComplianceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "company_id": {
            "type": "string"
          },
          "employee_id": {
            "type": "string"
          },
          "training_type": {
            "type": "string",
            "enum": [
              "HEALTH_SAFETY",
              "FIRE_SAFETY",
              "FIRST_AID",
              "MANUAL_HANDLING",
              "GDPR",
              "ANTI_BRIBERY",
              "DIVERSITY_INCLUSION",
              "MENTAL_HEALTH",
              "EMERGENCY_EVACUATION",
              "FOOD_HYGIENE",
              "SAFEGUARDING",
              "TECHNICAL",
              "PROFESSIONAL",
              "OTHER"
            ]
          },
          "training_name": {
            "type": "string"
          },
          "training_description": {
            "type": "string"
          },
          "priority": {
            "type": "string",
            "enum": [
              "MANDATORY",
              "RECOMMENDED",
              "OPTIONAL"
            ]
          },
          "provider_name": {
            "type": "string"
          },
          "is_mandatory": {
            "type": "boolean"
          },
          "delivery_method": {
            "type": "string",
            "enum": [
              "IN_PERSON",
              "ONLINE",
              "BLENDED",
              "SELF_STUDY",
              "EXTERNAL"
            ]
          },
          "scheduled_date": {
            "format": "date-time",
            "type": "string"
          },
          "completion_date": {
            "format": "date-time",
            "type": "string"
          },
          "expiry_date": {
            "format": "date-time",
            "type": "string"
          },
          "score": {
            "type": "number"
          },
          "passed": {
            "type": "boolean"
          },
          "certificate_number": {
            "type": "string"
          },
          "certificate_path": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "NOT_STARTED",
              "IN_PROGRESS",
              "COMPLETED",
              "EXPIRED",
              "EXEMPT",
              "FAILED"
            ]
          },
          "duration_hours": {
            "type": "number"
          },
          "cost": {
            "type": "number"
          },
          "notes": {
            "type": "string"
          },
          "next_renewal_date": {
            "format": "date-time",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "company": {
            "type": "object"
          },
          "employee": {
            "type": "object"
          },
          "days_until_expiry": {
            "type": "number"
          },
          "is_expired": {
            "type": "boolean"
          },
          "is_due_soon": {
            "type": "boolean"
          },
          "is_expiring_soon": {
            "type": "boolean"
          },
          "is_overdue": {
            "type": "boolean"
          },
          "renewal_required": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "company_id",
          "employee_id",
          "training_type",
          "training_name",
          "priority",
          "is_mandatory",
          "expiry_date",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "CreateCertificateLicenseDto": {
        "type": "object",
        "properties": {
          "tenant_id": {
            "type": "string"
          },
          "certificate_type": {
            "type": "string",
            "enum": [
              "FOOD_HYGIENE",
              "WASTE_CARRIER",
              "PREMISES_LICENSE",
              "ALCOHOL_LICENSE",
              "GAMBLING_LICENSE",
              "ENTERTAINMENT_LICENSE",
              "TRADING_STANDARDS",
              "HEALTH_SAFETY",
              "ENVIRONMENTAL",
              "PROFESSIONAL",
              "VEHICLE",
              "EQUIPMENT",
              "OTHER"
            ]
          },
          "certificate_name": {
            "type": "string",
            "example": "Food Hygiene Certificate Level 2"
          },
          "certificate_number": {
            "type": "string",
            "example": "CERT-2024-001"
          },
          "issuing_authority": {
            "type": "string",
            "example": "Local Council"
          },
          "applies_to_type": {
            "type": "string",
            "example": "COMPANY"
          },
          "applies_to_id": {
            "type": "string"
          },
          "issue_date": {
            "type": "string",
            "example": "2024-01-15"
          },
          "expiry_date": {
            "type": "string",
            "example": "2025-01-15"
          },
          "is_permanent": {
            "type": "boolean"
          },
          "renewal_required": {
            "type": "boolean"
          },
          "renewal_process_days": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "ACTIVE",
              "EXPIRED",
              "SUSPENDED",
              "REVOKED",
              "INVALID",
              "ARCHIVED"
            ]
          },
          "verification_date": {
            "type": "string"
          },
          "verified_by": {
            "type": "string"
          },
          "certificate_document_path": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          }
        },
        "required": [
          "certificate_type",
          "certificate_name",
          "issuing_authority",
          "applies_to_type",
          "applies_to_id",
          "issue_date"
        ]
      },
      "CertificateLicenseResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "certificate_type": {
            "type": "string",
            "enum": [
              "FOOD_HYGIENE",
              "WASTE_CARRIER",
              "PREMISES_LICENSE",
              "ALCOHOL_LICENSE",
              "GAMBLING_LICENSE",
              "ENTERTAINMENT_LICENSE",
              "TRADING_STANDARDS",
              "HEALTH_SAFETY",
              "ENVIRONMENTAL",
              "PROFESSIONAL",
              "VEHICLE",
              "EQUIPMENT",
              "OTHER"
            ]
          },
          "certificate_name": {
            "type": "string"
          },
          "certificate_number": {
            "type": "string"
          },
          "issuing_authority": {
            "type": "string"
          },
          "applies_to_type": {
            "type": "string"
          },
          "applies_to_id": {
            "type": "string"
          },
          "issue_date": {
            "format": "date-time",
            "type": "string"
          },
          "expiry_date": {
            "format": "date-time",
            "type": "string"
          },
          "is_permanent": {
            "type": "boolean"
          },
          "renewal_required": {
            "type": "boolean"
          },
          "renewal_process_days": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "ACTIVE",
              "EXPIRED",
              "SUSPENDED",
              "REVOKED",
              "INVALID",
              "ARCHIVED"
            ]
          },
          "verification_date": {
            "format": "date-time",
            "type": "string"
          },
          "verified_by": {
            "type": "string"
          },
          "certificate_document_path": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "days_until_expiry": {
            "type": "number"
          },
          "is_expiring_soon": {
            "type": "boolean"
          },
          "is_expired": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "certificate_type",
          "certificate_name",
          "issuing_authority",
          "applies_to_type",
          "applies_to_id",
          "issue_date",
          "is_permanent",
          "renewal_required",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "CertificateLicenseVerificationDto": {
        "type": "object",
        "properties": {
          "certificate_number": {
            "type": "string"
          },
          "is_valid": {
            "type": "boolean"
          },
          "verified_at": {
            "format": "date-time",
            "type": "string"
          },
          "expiry_date": {
            "format": "date-time",
            "type": "string"
          },
          "holder_name": {
            "type": "string"
          },
          "issuing_authority": {
            "type": "string"
          }
        },
        "required": [
          "certificate_number",
          "is_valid",
          "verified_at"
        ]
      },
      "CreateComplianceReminderDto": {
        "type": "object",
        "properties": {
          "tenant_id": {
            "type": "string"
          },
          "reminder_type": {
            "type": "string",
            "example": "TRAINING"
          },
          "related_record_type": {
            "type": "string",
            "example": "training_compliance"
          },
          "related_record_id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "example": "Training Renewal Required"
          },
          "message": {
            "type": "string",
            "example": "Your fire safety training expires in 30 days"
          },
          "priority": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "URGENT"
            ]
          },
          "due_date": {
            "type": "string",
            "example": "2024-02-15"
          },
          "reminder_date": {
            "type": "string",
            "example": "2024-02-01"
          },
          "recipient_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recipient_roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recurring": {
            "type": "boolean"
          },
          "recurring_pattern": {
            "type": "string",
            "example": "MONTHLY"
          },
          "auto_generated": {
            "type": "boolean"
          }
        },
        "required": [
          "reminder_type",
          "related_record_type",
          "related_record_id",
          "title",
          "message",
          "due_date",
          "reminder_date"
        ]
      },
      "ComplianceReminderResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "reminder_type": {
            "type": "string"
          },
          "related_record_type": {
            "type": "string"
          },
          "related_record_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "priority": {
            "type": "string",
            "enum": [
              "LOW",
              "MEDIUM",
              "HIGH",
              "URGENT"
            ]
          },
          "due_date": {
            "format": "date-time",
            "type": "string"
          },
          "reminder_date": {
            "format": "date-time",
            "type": "string"
          },
          "recipient_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recipient_roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "auto_generated": {
            "type": "boolean"
          },
          "recurring": {
            "type": "boolean"
          },
          "recurring_pattern": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "SENT",
              "ACKNOWLEDGED",
              "CANCELLED",
              "EXPIRED"
            ]
          },
          "sent_at": {
            "format": "date-time",
            "type": "string"
          },
          "acknowledged_at": {
            "format": "date-time",
            "type": "string"
          },
          "acknowledged_by": {
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string"
          },
          "days_until_due": {
            "type": "number"
          },
          "is_overdue": {
            "type": "boolean"
          },
          "is_urgent": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "reminder_type",
          "related_record_type",
          "related_record_id",
          "title",
          "message",
          "priority",
          "due_date",
          "reminder_date",
          "recipient_ids",
          "recipient_roles",
          "auto_generated",
          "recurring",
          "status",
          "created_at",
          "updated_at"
        ]
      }
    }
  }
}
