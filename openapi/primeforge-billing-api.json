{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service info returned successfully"
          }
        },
        "summary": "Get service information",
        "tags": [
          "System"
        ]
      }
    },
    "/health": {
      "get": {
        "operationId": "AppController_getHealth",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Service is healthy"
          }
        },
        "summary": "Health check endpoint",
        "tags": [
          "System"
        ]
      }
    },
    "/payment-gateway/payment-intents": {
      "post": {
        "description": "Create a new payment intent for processing payments",
        "operationId": "PaymentGatewayController_createPaymentIntent",
        "parameters": [
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Payment provider to use (defaults to Stripe)",
            "schema": {
              "enum": [
                "stripe",
                "paypal"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentIntentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment intent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a payment intent",
        "tags": [
          "Payment Gateway"
        ]
      }
    },
    "/payment-gateway/payment-intents/{intentId}": {
      "get": {
        "description": "Retrieve a payment intent by its ID",
        "operationId": "PaymentGatewayController_getPaymentIntent",
        "parameters": [
          {
            "name": "intentId",
            "required": true,
            "in": "path",
            "description": "Payment intent ID",
            "schema": {
              "example": "pi_1234567890",
              "type": "string"
            }
          },
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Payment provider (defaults to Stripe)",
            "schema": {
              "enum": [
                "stripe",
                "paypal"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment intent retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOperationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Payment intent not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get payment intent",
        "tags": [
          "Payment Gateway"
        ]
      },
      "put": {
        "description": "Update an existing payment intent",
        "operationId": "PaymentGatewayController_updatePaymentIntent",
        "parameters": [
          {
            "name": "intentId",
            "required": true,
            "in": "path",
            "description": "Payment intent ID",
            "schema": {
              "example": "pi_1234567890",
              "type": "string"
            }
          },
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Payment provider (defaults to Stripe)",
            "schema": {
              "enum": [
                "stripe",
                "paypal"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentIntentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment intent updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOperationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Payment intent not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update payment intent",
        "tags": [
          "Payment Gateway"
        ]
      },
      "delete": {
        "description": "Cancel an existing payment intent",
        "operationId": "PaymentGatewayController_cancelPaymentIntent",
        "parameters": [
          {
            "name": "intentId",
            "required": true,
            "in": "path",
            "description": "Payment intent ID",
            "schema": {
              "example": "pi_1234567890",
              "type": "string"
            }
          },
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Payment provider (defaults to Stripe)",
            "schema": {
              "enum": [
                "stripe",
                "paypal"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment intent canceled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOperationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Payment intent not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel payment intent",
        "tags": [
          "Payment Gateway"
        ]
      }
    },
    "/payment-gateway/payment-intents/{intentId}/confirm": {
      "post": {
        "description": "Confirm a payment intent for processing",
        "operationId": "PaymentGatewayController_confirmPaymentIntent",
        "parameters": [
          {
            "name": "intentId",
            "required": true,
            "in": "path",
            "description": "Payment intent ID",
            "schema": {
              "example": "pi_1234567890",
              "type": "string"
            }
          },
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Payment provider (defaults to Stripe)",
            "schema": {
              "enum": [
                "stripe",
                "paypal"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmPaymentIntentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment intent confirmed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOperationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Payment intent not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Confirm payment intent",
        "tags": [
          "Payment Gateway"
        ]
      }
    },
    "/payment-gateway/customers": {
      "post": {
        "description": "Create a new customer in the payment gateway",
        "operationId": "PaymentGatewayController_createCustomer",
        "parameters": [
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Payment provider (defaults to Stripe)",
            "schema": {
              "enum": [
                "stripe",
                "paypal"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create customer",
        "tags": [
          "Payment Gateway"
        ]
      }
    },
    "/payment-gateway/customers/{customerId}": {
      "get": {
        "description": "Retrieve a customer by their ID",
        "operationId": "PaymentGatewayController_getCustomer",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "description": "Customer ID",
            "schema": {
              "example": "cus_1234567890",
              "type": "string"
            }
          },
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Payment provider (defaults to Stripe)",
            "schema": {
              "enum": [
                "stripe",
                "paypal"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentOperationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get customer",
        "tags": [
          "Payment Gateway"
        ]
      }
    },
    "/payment-gateway/test-connections": {
      "get": {
        "description": "Test connectivity to all configured payment providers",
        "operationId": "PaymentGatewayController_testConnections",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Connection test results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "boolean"
                  },
                  "example": {
                    "stripe": true,
                    "paypal": false
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Test payment gateway connections",
        "tags": [
          "Payment Gateway"
        ]
      }
    },
    "/payment-gateway/providers": {
      "get": {
        "description": "List all available payment providers",
        "operationId": "PaymentGatewayController_getAvailableProviders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Available payment providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "stripe",
                      "paypal"
                    ]
                  },
                  "example": [
                    "stripe"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get available payment providers",
        "tags": [
          "Payment Gateway"
        ]
      }
    },
    "/webhooks/stripe": {
      "post": {
        "description": "Process incoming Stripe webhook events",
        "operationId": "WebhookController_handleStripeWebhook",
        "parameters": [
          {
            "name": "stripe-signature",
            "required": true,
            "in": "header",
            "description": "Stripe webhook signature for verification",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookProcessingResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid webhook signature or payload"
          }
        },
        "summary": "Handle Stripe webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/paypal": {
      "post": {
        "description": "Process incoming PayPal webhook events (Not yet implemented)",
        "operationId": "WebhookController_handlePayPalWebhook",
        "parameters": [],
        "responses": {
          "501": {
            "description": "PayPal webhooks not yet implemented"
          }
        },
        "summary": "Handle PayPal webhook",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/webhooks/health": {
      "post": {
        "description": "Test endpoint for webhook connectivity",
        "operationId": "WebhookController_webhookHealthCheck",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Webhook endpoint is healthy"
          }
        },
        "summary": "Webhook health check",
        "tags": [
          "Webhooks"
        ]
      }
    },
    "/orders": {
      "post": {
        "description": "Create a new order with payment intent for processing payments",
        "operationId": "OrdersController_createOrder",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid order data or payment setup failed"
          },
          "401": {
            "description": "Authentication required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new order",
        "tags": [
          "Orders"
        ]
      },
      "get": {
        "description": "Retrieve orders with filtering, sorting, and pagination",
        "operationId": "OrdersController_getOrders",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by order status",
            "schema": {
              "example": "SUCCEEDED",
              "type": "string",
              "enum": [
                "PENDING",
                "REQUIRES_ACTION",
                "SUCCEEDED",
                "CANCELED",
                "REFUNDED"
              ]
            }
          },
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Filter by payment provider",
            "schema": {
              "example": "STRIPE",
              "type": "string",
              "enum": [
                "STRIPE",
                "PAYPAL",
                "FUSIONPAY"
              ]
            }
          },
          {
            "name": "payerUserId",
            "required": false,
            "in": "query",
            "description": "Filter by payer user ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "currency",
            "required": false,
            "in": "query",
            "description": "Filter by currency",
            "schema": {
              "example": "usd",
              "type": "string"
            }
          },
          {
            "name": "minAmount",
            "required": false,
            "in": "query",
            "description": "Filter by minimum amount",
            "schema": {
              "minimum": 1,
              "example": 1000,
              "type": "number"
            }
          },
          {
            "name": "maxAmount",
            "required": false,
            "in": "query",
            "description": "Filter by maximum amount",
            "schema": {
              "minimum": 1,
              "example": 5000,
              "type": "number"
            }
          },
          {
            "name": "createdFrom",
            "required": false,
            "in": "query",
            "description": "Filter by created date (from)",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "createdTo",
            "required": false,
            "in": "query",
            "description": "Filter by created date (to)",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "default": "created_at",
              "example": "created_at",
              "type": "string",
              "enum": [
                "created_at",
                "updated_at",
                "amount"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "default": "desc",
              "example": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrderResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get orders",
        "tags": [
          "Orders"
        ]
      }
    },
    "/orders/{orderId}": {
      "get": {
        "description": "Retrieve a specific order by its ID",
        "operationId": "OrdersController_getOrder",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get order by ID",
        "tags": [
          "Orders"
        ]
      },
      "put": {
        "description": "Update an existing order (only for PENDING and REQUIRES_ACTION orders)",
        "operationId": "OrdersController_updateOrder",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid update data or order cannot be updated"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update order",
        "tags": [
          "Orders"
        ]
      },
      "delete": {
        "description": "Cancel an existing order (only for PENDING and REQUIRES_ACTION orders)",
        "operationId": "OrdersController_cancelOrder",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order canceled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Order cannot be canceled"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel order",
        "tags": [
          "Orders"
        ]
      }
    },
    "/orders/{orderId}/process-payment": {
      "post": {
        "description": "Confirm and process payment for an existing order",
        "operationId": "OrdersController_processOrderPayment",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessOrderPaymentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Payment processing failed or order cannot be processed"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Process order payment",
        "tags": [
          "Orders"
        ]
      }
    },
    "/orders/{orderId}/refund": {
      "post": {
        "description": "Process refund for a completed order (only for SUCCEEDED orders)",
        "operationId": "OrdersController_refundOrder",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundOrderDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order refunded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Order cannot be refunded or invalid refund data"
          },
          "401": {
            "description": "Authentication required"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Refund order",
        "tags": [
          "Orders"
        ]
      }
    },
    "/orders/{orderId}/status": {
      "get": {
        "description": "Get detailed status information and possible actions for an order",
        "operationId": "OrdersController_getOrderStatus",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "description": "Order ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order status information retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "orderId": {
                      "type": "string"
                    },
                    "status": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "canBeCanceled": {
                      "type": "boolean"
                    },
                    "canBeRefunded": {
                      "type": "boolean"
                    },
                    "requiresAction": {
                      "type": "boolean"
                    },
                    "possibleNextStatuses": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "recommendedActions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get order status information",
        "tags": [
          "Orders"
        ]
      }
    },
    "/plans": {
      "get": {
        "description": "Retrieves available billing plans for subscription selection",
        "operationId": "PlansController_getPlans",
        "parameters": [
          {
            "name": "tier",
            "required": false,
            "in": "query",
            "description": "Filter by plan tier",
            "schema": {
              "example": "PRO",
              "type": "string",
              "enum": [
                "FREE",
                "STARTER",
                "PRO",
                "ENTERPRISE"
              ]
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search in plan name or description",
            "schema": {
              "example": "professional",
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "includePrices",
            "required": false,
            "in": "query",
            "description": "Include prices in response",
            "schema": {
              "default": false,
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "default": "created_at",
              "example": "created_at",
              "type": "string",
              "enum": [
                "created_at",
                "updated_at",
                "display_name",
                "tier"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "default": "desc",
              "example": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get available plans",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/{planId}": {
      "get": {
        "description": "Retrieves detailed information about a specific plan",
        "operationId": "PlansController_getPlan",
        "parameters": [
          {
            "name": "planId",
            "required": true,
            "in": "path",
            "description": "Plan UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "includePrices",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Plan not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get plan details",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/{planId}/prices": {
      "get": {
        "description": "Retrieves available pricing options for the specified plan",
        "operationId": "PlansController_getPricesForPlan",
        "parameters": [
          {
            "name": "planId",
            "required": true,
            "in": "path",
            "description": "Plan UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PriceResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get available prices for plan",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/prices/{priceId}": {
      "get": {
        "description": "Retrieves detailed information about a specific price",
        "operationId": "PlansController_getPrice",
        "parameters": [
          {
            "name": "priceId",
            "required": true,
            "in": "path",
            "description": "Price UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Price retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Price not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get price details",
        "tags": [
          "Plans"
        ]
      }
    },
    "/plans/tier/{tier}": {
      "get": {
        "description": "Retrieves available plans for a specific pricing tier",
        "operationId": "PlansController_getPlansByTier",
        "parameters": [
          {
            "name": "tier",
            "required": true,
            "in": "path",
            "description": "Plan tier (FREE, STARTER, PRO, ENTERPRISE)",
            "schema": {
              "example": "PRO",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get plans by tier",
        "tags": [
          "Plans"
        ]
      }
    },
    "/subscriptions": {
      "post": {
        "description": "Creates a new subscription for the specified plan",
        "operationId": "SubscriptionsController_createSubscription",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Subscription created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid subscription data or user already has active subscription"
          },
          "404": {
            "description": "Plan not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new subscription",
        "tags": [
          "Subscriptions"
        ]
      },
      "get": {
        "description": "Retrieves a paginated list of subscriptions with optional filtering",
        "operationId": "SubscriptionsController_getSubscriptions",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by subscription status",
            "schema": {
              "example": "ACTIVE",
              "type": "string",
              "enum": [
                "PENDING",
                "ACTIVE",
                "PAST_DUE",
                "CANCELED"
              ]
            }
          },
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Filter by payment provider",
            "schema": {
              "example": "STRIPE",
              "type": "string",
              "enum": [
                "STRIPE",
                "PAYPAL",
                "FUSIONPAY"
              ]
            }
          },
          {
            "name": "payerUserId",
            "required": false,
            "in": "query",
            "description": "Filter by payer user ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "planId",
            "required": false,
            "in": "query",
            "description": "Filter by plan ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "minSeats",
            "required": false,
            "in": "query",
            "description": "Filter by minimum seat count",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "maxSeats",
            "required": false,
            "in": "query",
            "description": "Filter by maximum seat count",
            "schema": {
              "minimum": 1,
              "example": 100,
              "type": "number"
            }
          },
          {
            "name": "periodStartFrom",
            "required": false,
            "in": "query",
            "description": "Filter by period start date (from)",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "periodStartTo",
            "required": false,
            "in": "query",
            "description": "Filter by period start date (to)",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "periodEndFrom",
            "required": false,
            "in": "query",
            "description": "Filter by period end date (from)",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "periodEndTo",
            "required": false,
            "in": "query",
            "description": "Filter by period end date (to)",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "createdFrom",
            "required": false,
            "in": "query",
            "description": "Filter by created date (from)",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "createdTo",
            "required": false,
            "in": "query",
            "description": "Filter by created date (to)",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "includePlan",
            "required": false,
            "in": "query",
            "description": "Include plan details in response",
            "schema": {
              "default": false,
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "minimum": 1,
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field",
            "schema": {
              "default": "created_at",
              "example": "created_at",
              "type": "string",
              "enum": [
                "created_at",
                "updated_at",
                "current_period_start",
                "current_period_end"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort direction",
            "schema": {
              "default": "desc",
              "example": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriptions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedSubscriptionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all subscriptions",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/active": {
      "get": {
        "description": "Retrieves all active subscriptions for the current tenant",
        "operationId": "SubscriptionsController_getActiveSubscriptions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active subscriptions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get active subscriptions",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/{subscriptionId}": {
      "get": {
        "description": "Retrieves a specific subscription by its ID",
        "operationId": "SubscriptionsController_getSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "includePlan",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get subscription by ID",
        "tags": [
          "Subscriptions"
        ]
      },
      "put": {
        "description": "Updates an existing subscription with new details",
        "operationId": "SubscriptionsController_updateSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionOperationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update subscription",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/cancel": {
      "post": {
        "description": "Cancels a subscription either immediately or at the end of the billing period",
        "operationId": "SubscriptionsController_cancelSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription canceled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Subscription is already canceled"
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Cancel subscription",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/reactivate": {
      "post": {
        "description": "Reactivates a canceled subscription",
        "operationId": "SubscriptionsController_reactivateSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReactivateSubscriptionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription reactivated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Subscription is already active"
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Reactivate subscription",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/upgrade": {
      "post": {
        "description": "Upgrades a subscription to a higher tier plan",
        "operationId": "SubscriptionsController_upgradeSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription upgraded successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upgrade subscription",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/downgrade": {
      "post": {
        "description": "Downgrades a subscription to a lower tier plan",
        "operationId": "SubscriptionsController_downgradeSubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription downgraded successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Downgrade subscription",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/seats": {
      "put": {
        "description": "Changes the number of seats for a subscription",
        "operationId": "SubscriptionsController_changeSeats",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Seat count changed successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Change subscription seat count",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/upgrade-options": {
      "get": {
        "description": "Gets available upgrade options for a subscription",
        "operationId": "SubscriptionsController_getUpgradeOptions",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upgrade options retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get upgrade options",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/downgrade-options": {
      "get": {
        "description": "Gets available downgrade options for a subscription",
        "operationId": "SubscriptionsController_getDowngradeOptions",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Downgrade options retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get downgrade options",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/billing-summary": {
      "get": {
        "description": "Gets billing summary for a subscription",
        "operationId": "SubscriptionsController_getBillingSummary",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Billing summary retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get billing summary",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/process-billing": {
      "post": {
        "description": "Manually processes billing for a subscription",
        "operationId": "SubscriptionsController_processBilling",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Billing processed successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Process billing",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/subscriptions/{subscriptionId}/status-info": {
      "get": {
        "description": "Gets detailed status information and possible actions for a subscription",
        "operationId": "SubscriptionsController_getStatusInfo",
        "parameters": [
          {
            "name": "subscriptionId",
            "required": true,
            "in": "path",
            "description": "Subscription UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status information retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get subscription status information",
        "tags": [
          "Subscriptions"
        ]
      }
    },
    "/invoices": {
      "post": {
        "operationId": "InvoicesController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvoiceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invoice created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "404": {
            "description": "Subscription not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new invoice",
        "tags": [
          "Invoices"
        ]
      },
      "get": {
        "operationId": "InvoicesController_findAll",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by invoice status",
            "schema": {
              "example": "PAID",
              "type": "string",
              "enum": [
                "DRAFT",
                "OPEN",
                "PAID",
                "VOID"
              ]
            }
          },
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Filter by payment provider",
            "schema": {
              "example": "STRIPE",
              "type": "string",
              "enum": [
                "STRIPE",
                "PAYPAL",
                "FUSIONPAY"
              ]
            }
          },
          {
            "name": "subscriptionId",
            "required": false,
            "in": "query",
            "description": "Filter by subscription ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "providerInvoiceId",
            "required": false,
            "in": "query",
            "description": "Filter by provider invoice ID",
            "schema": {
              "example": "in_1234567890",
              "type": "string"
            }
          },
          {
            "name": "createdAfter",
            "required": false,
            "in": "query",
            "description": "Filter invoices created after this date",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "createdBefore",
            "required": false,
            "in": "query",
            "description": "Filter invoices created before this date",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "dueAfter",
            "required": false,
            "in": "query",
            "description": "Filter invoices due after this date",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "dueBefore",
            "required": false,
            "in": "query",
            "description": "Filter invoices due before this date",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "createdAt",
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "dueDate",
                "total"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedInvoiceResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all invoices with filtering and pagination",
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/admin": {
      "get": {
        "operationId": "InvoicesController_findAllAdmin",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Filter by invoice status",
            "schema": {
              "example": "PAID",
              "type": "string",
              "enum": [
                "DRAFT",
                "OPEN",
                "PAID",
                "VOID"
              ]
            }
          },
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Filter by payment provider",
            "schema": {
              "example": "STRIPE",
              "type": "string",
              "enum": [
                "STRIPE",
                "PAYPAL",
                "FUSIONPAY"
              ]
            }
          },
          {
            "name": "subscriptionId",
            "required": false,
            "in": "query",
            "description": "Filter by subscription ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "providerInvoiceId",
            "required": false,
            "in": "query",
            "description": "Filter by provider invoice ID",
            "schema": {
              "example": "in_1234567890",
              "type": "string"
            }
          },
          {
            "name": "createdAfter",
            "required": false,
            "in": "query",
            "description": "Filter invoices created after this date",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "createdBefore",
            "required": false,
            "in": "query",
            "description": "Filter invoices created before this date",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "dueAfter",
            "required": false,
            "in": "query",
            "description": "Filter invoices due after this date",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "dueBefore",
            "required": false,
            "in": "query",
            "description": "Filter invoices due before this date",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "createdAt",
              "type": "string",
              "enum": [
                "createdAt",
                "updatedAt",
                "dueDate",
                "total"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "desc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All invoices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedInvoiceResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all invoices (admin only, no tenant filtering)",
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/provider/{providerInvoiceId}": {
      "get": {
        "operationId": "InvoicesController_findByProviderInvoiceId",
        "parameters": [
          {
            "name": "providerInvoiceId",
            "required": true,
            "in": "path",
            "description": "Provider invoice ID (e.g., Stripe invoice ID)",
            "schema": {
              "example": "in_1234567890",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get invoice by provider invoice ID",
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/{id}": {
      "get": {
        "operationId": "InvoicesController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Invoice ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get invoice by ID",
        "tags": [
          "Invoices"
        ]
      },
      "delete": {
        "operationId": "InvoicesController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Invoice ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceOperationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete invoice",
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/{id}/status": {
      "patch": {
        "operationId": "InvoicesController_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Invoice ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceOperationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update invoice status",
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/generate-upcoming": {
      "post": {
        "operationId": "InvoicesController_generateUpcomingInvoices",
        "parameters": [
          {
            "name": "daysAhead",
            "required": false,
            "in": "query",
            "description": "Number of days ahead to look for renewals",
            "schema": {
              "example": 3,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Upcoming invoices generated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Generate upcoming invoices for renewals",
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/process-reminders": {
      "post": {
        "operationId": "InvoicesController_processReminders",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Invoice reminders processed successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Process invoice reminders",
        "tags": [
          "Invoices"
        ]
      }
    },
    "/invoices/automation/process": {
      "post": {
        "operationId": "InvoicesController_processAutomation",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Invoice automation processed successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Process all invoice automation tasks (renewals, overdue, reminders)",
        "tags": [
          "Invoices"
        ]
      }
    },
    "/entitlements": {
      "post": {
        "operationId": "EntitlementsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntitlementDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Entitlement created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data or overlapping entitlement"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new entitlement",
        "tags": [
          "Entitlements"
        ]
      },
      "get": {
        "operationId": "EntitlementsController_findAll",
        "parameters": [
          {
            "name": "featureKey",
            "required": false,
            "in": "query",
            "description": "Filter by feature key",
            "schema": {
              "example": "hr_management",
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "required": false,
            "in": "query",
            "description": "Filter by tenant ID (admin only)",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "validFromAfter",
            "required": false,
            "in": "query",
            "description": "Filter entitlements valid from after this date",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "validFromBefore",
            "required": false,
            "in": "query",
            "description": "Filter entitlements valid from before this date",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "validToAfter",
            "required": false,
            "in": "query",
            "description": "Filter entitlements valid to after this date",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "validToBefore",
            "required": false,
            "in": "query",
            "description": "Filter entitlements valid to before this date",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "Filter by active status (based on current date)",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "expired",
            "required": false,
            "in": "query",
            "description": "Filter by expired status (based on current date)",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "minSeatLimit",
            "required": false,
            "in": "query",
            "description": "Filter by minimum seat limit",
            "schema": {
              "minimum": 1,
              "example": 5,
              "type": "number"
            }
          },
          {
            "name": "maxSeatLimit",
            "required": false,
            "in": "query",
            "description": "Filter by maximum seat limit",
            "schema": {
              "minimum": 1,
              "example": 100,
              "type": "number"
            }
          },
          {
            "name": "usageThreshold",
            "required": false,
            "in": "query",
            "description": "Filter by usage threshold (percentage of seat limit used)",
            "schema": {
              "minimum": 0,
              "maximum": 100,
              "example": 80,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "validTo",
              "type": "string",
              "enum": [
                "createdAt",
                "validFrom",
                "validTo",
                "featureKey",
                "seatLimit",
                "usageCount"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entitlements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEntitlementResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all entitlements with filtering and pagination",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/admin": {
      "get": {
        "operationId": "EntitlementsController_findAllAdmin",
        "parameters": [
          {
            "name": "featureKey",
            "required": false,
            "in": "query",
            "description": "Filter by feature key",
            "schema": {
              "example": "hr_management",
              "type": "string"
            }
          },
          {
            "name": "tenantId",
            "required": false,
            "in": "query",
            "description": "Filter by tenant ID (admin only)",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "validFromAfter",
            "required": false,
            "in": "query",
            "description": "Filter entitlements valid from after this date",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "validFromBefore",
            "required": false,
            "in": "query",
            "description": "Filter entitlements valid from before this date",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "validToAfter",
            "required": false,
            "in": "query",
            "description": "Filter entitlements valid to after this date",
            "schema": {
              "example": "2025-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "validToBefore",
            "required": false,
            "in": "query",
            "description": "Filter entitlements valid to before this date",
            "schema": {
              "example": "2025-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "Filter by active status (based on current date)",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "expired",
            "required": false,
            "in": "query",
            "description": "Filter by expired status (based on current date)",
            "schema": {
              "example": false,
              "type": "boolean"
            }
          },
          {
            "name": "minSeatLimit",
            "required": false,
            "in": "query",
            "description": "Filter by minimum seat limit",
            "schema": {
              "minimum": 1,
              "example": 5,
              "type": "number"
            }
          },
          {
            "name": "maxSeatLimit",
            "required": false,
            "in": "query",
            "description": "Filter by maximum seat limit",
            "schema": {
              "minimum": 1,
              "example": 100,
              "type": "number"
            }
          },
          {
            "name": "usageThreshold",
            "required": false,
            "in": "query",
            "description": "Filter by usage threshold (percentage of seat limit used)",
            "schema": {
              "minimum": 0,
              "maximum": 100,
              "example": 80,
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "example": "validTo",
              "type": "string",
              "enum": [
                "createdAt",
                "validFrom",
                "validTo",
                "featureKey",
                "seatLimit",
                "usageCount"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order",
            "schema": {
              "example": "asc",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All entitlements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEntitlementResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all entitlements (admin only, no tenant filtering)",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/active": {
      "get": {
        "operationId": "EntitlementsController_findActive",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Active entitlements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntitlementResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get active entitlements for current tenant",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/feature/{featureKey}": {
      "get": {
        "operationId": "EntitlementsController_findByFeature",
        "parameters": [
          {
            "name": "featureKey",
            "required": true,
            "in": "path",
            "description": "Feature key/identifier",
            "schema": {
              "example": "hr_management",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature entitlements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntitlementResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get entitlements by feature key",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/summary": {
      "get": {
        "operationId": "EntitlementsController_getFeatureSummary",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Entitlement summary retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get feature entitlement summary for current tenant",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/{id}": {
      "get": {
        "operationId": "EntitlementsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Entitlement ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entitlement found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Entitlement not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get entitlement by ID",
        "tags": [
          "Entitlements"
        ]
      },
      "delete": {
        "operationId": "EntitlementsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Entitlement ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entitlement deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementOperationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Entitlement not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete entitlement",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/{id}/usage": {
      "patch": {
        "operationId": "EntitlementsController_updateUsage",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Entitlement ID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usage updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageUpdateResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update entitlement usage",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/validate-access": {
      "post": {
        "operationId": "EntitlementsController_validateAccess",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Feature access validation result"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Validate feature access for current tenant",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/validate-bulk": {
      "post": {
        "operationId": "EntitlementsController_validateBulkAccess",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Bulk feature access validation results"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Validate access to multiple features",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/consume-seats": {
      "post": {
        "operationId": "EntitlementsController_consumeSeats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Seats consumed successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Validate and consume seats for a feature",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/track-usage": {
      "post": {
        "operationId": "EntitlementsController_trackUsage",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Usage tracked successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Track usage event (consume or release seats)",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/usage/stats": {
      "get": {
        "operationId": "EntitlementsController_getUsageStats",
        "parameters": [
          {
            "name": "featureKey",
            "required": false,
            "in": "query",
            "description": "Filter by specific feature",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usage statistics retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get usage statistics for current tenant",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/check/usage-limits": {
      "get": {
        "operationId": "EntitlementsController_checkUsageLimits",
        "parameters": [
          {
            "name": "threshold",
            "required": false,
            "in": "query",
            "description": "Usage percentage threshold (default: 80)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usage limit check completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntitlementResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Check entitlements approaching usage limits",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/check/expiring": {
      "get": {
        "operationId": "EntitlementsController_checkExpiringEntitlements",
        "parameters": [
          {
            "name": "days",
            "required": false,
            "in": "query",
            "description": "Number of days ahead to check (default: 30)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Expiring entitlements check completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntitlementResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Check entitlements expiring soon",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/admin/monitor-thresholds": {
      "post": {
        "operationId": "EntitlementsController_monitorUsageThresholds",
        "parameters": [
          {
            "name": "threshold",
            "required": false,
            "in": "query",
            "description": "Usage percentage threshold (default: 80)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usage threshold monitoring completed"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Monitor usage thresholds across all tenants (admin only)",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/entitlements/admin/cleanup-usage": {
      "post": {
        "operationId": "EntitlementsController_processUsageCleanup",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Usage cleanup completed"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Process usage cleanup (admin only)",
        "tags": [
          "Entitlements"
        ]
      }
    },
    "/events/process": {
      "post": {
        "description": "Process a specific event by ID, with optional force reprocessing",
        "operationId": "EventsController_processEvent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessEventDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProcessingResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Process a specific event",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/process-all": {
      "post": {
        "description": "Process all unprocessed events in the queue",
        "operationId": "EventsController_processAllUnprocessedEvents",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of events to process",
            "schema": {
              "example": 100,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch processing completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalProcessed": {
                      "type": "number",
                      "example": 50
                    },
                    "successCount": {
                      "type": "number",
                      "example": 45
                    },
                    "failureCount": {
                      "type": "number",
                      "example": 5
                    },
                    "results": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EventProcessingResponseDto"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Process all unprocessed events",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/retry": {
      "post": {
        "description": "Retry processing of a specific event with exponential backoff",
        "operationId": "EventsController_retryEvent",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RetryEventDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event retry completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventProcessingResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid retry parameters"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Retry a specific event",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/retry-all": {
      "post": {
        "description": "Retry all events that have failed but not exceeded max retry limit",
        "operationId": "EventsController_retryAllFailedEvents",
        "parameters": [
          {
            "name": "maxRetries",
            "required": false,
            "in": "query",
            "description": "Maximum retry attempts per event",
            "schema": {
              "example": 5,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of events to retry",
            "schema": {
              "example": 50,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch retry completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalRetried": {
                      "type": "number",
                      "example": 25
                    },
                    "successCount": {
                      "type": "number",
                      "example": 20
                    },
                    "failureCount": {
                      "type": "number",
                      "example": 3
                    },
                    "permanentlyFailedCount": {
                      "type": "number",
                      "example": 2
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Retry all failed events",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/stats": {
      "get": {
        "description": "Get comprehensive statistics about event processing",
        "operationId": "EventsController_getEventStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Event processing statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventAuditResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get event processing statistics",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/history": {
      "get": {
        "description": "Get paginated event history with optional filtering",
        "operationId": "EventsController_getEventHistory",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "eventType",
            "required": false,
            "in": "query",
            "description": "Filter by event type",
            "schema": {
              "enum": [
                "payment_intent.created",
                "payment_intent.succeeded",
                "payment_intent.payment_failed",
                "payment_intent.canceled",
                "payment_intent.requires_action",
                "invoice.created",
                "invoice.finalized",
                "invoice.payment_succeeded",
                "invoice.payment_failed",
                "invoice.voided",
                "customer.subscription.created",
                "customer.subscription.updated",
                "customer.subscription.deleted",
                "customer.subscription.trial_will_end",
                "customer.created",
                "customer.updated",
                "customer.deleted",
                "charge.succeeded",
                "charge.failed",
                "charge.refunded",
                "charge.dispute.created",
                "setup_intent.succeeded",
                "setup_intent.setup_failed"
              ],
              "type": "string"
            }
          },
          {
            "name": "processed",
            "required": false,
            "in": "query",
            "description": "Filter by processing status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Filter events from this date (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "Filter events to this date (ISO string)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event history with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedEventResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get event history",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/{eventId}": {
      "get": {
        "description": "Get detailed information about a specific event",
        "operationId": "EventsController_getEventById",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "description": "Event ID",
            "schema": {
              "example": "evt_1234567890",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Event not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get event by ID",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/meta/supported-types": {
      "get": {
        "description": "Get list of all supported Stripe event types",
        "operationId": "EventsController_getSupportedEventTypes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of supported event types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "supportedTypes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "payment_intent.succeeded",
                        "invoice.payment_succeeded"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get supported event types",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/metrics/performance": {
      "get": {
        "description": "Get detailed performance metrics for event processing",
        "operationId": "EventsController_getPerformanceMetrics",
        "parameters": [
          {
            "name": "hours",
            "required": false,
            "in": "query",
            "description": "Number of hours to look back",
            "schema": {
              "example": 24,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance metrics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "eventsPerHour": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "retryDistribution": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "errorPatterns": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "slowEvents": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get performance metrics",
        "tags": [
          "Events"
        ]
      }
    },
    "/events/metrics/anomalies": {
      "get": {
        "description": "Detect unusual patterns in event processing",
        "operationId": "EventsController_detectAnomalies",
        "parameters": [
          {
            "name": "hours",
            "required": false,
            "in": "query",
            "description": "Number of hours to analyze",
            "schema": {
              "example": 24,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Detected anomalies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "suspiciousEvents": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "highFailureRates": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "retrySpikes": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Detect processing anomalies",
        "tags": [
          "Events"
        ]
      }
    },
    "/notifications/email/send": {
      "post": {
        "description": "Send a single email notification using a template",
        "operationId": "NotificationsController_sendEmail",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email parameters"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send email notification",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/email/bulk": {
      "post": {
        "description": "Send multiple email notifications in batch",
        "operationId": "NotificationsController_sendBulkEmails",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkEmailDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk emails queued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid bulk email parameters"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send bulk email notifications",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/webhook/send": {
      "post": {
        "description": "Send a single webhook notification",
        "operationId": "NotificationsController_sendWebhook",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendWebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid webhook parameters"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send webhook notification",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/webhook/bulk": {
      "post": {
        "description": "Send multiple webhook notifications in batch",
        "operationId": "NotificationsController_sendBulkWebhooks",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkWebhookDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk webhooks queued successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationOperationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid bulk webhook parameters"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Send bulk webhook notifications",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/email/{notificationId}": {
      "get": {
        "description": "Get detailed information about a specific email notification",
        "operationId": "NotificationsController_getEmailNotification",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "description": "Email notification ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email notification details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailNotificationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Email notification not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get email notification by ID",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/webhook/{notificationId}": {
      "get": {
        "description": "Get detailed information about a specific webhook notification",
        "operationId": "NotificationsController_getWebhookNotification",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "description": "Webhook notification ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook notification details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookNotificationResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Webhook notification not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get webhook notification by ID",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/webhook/{notificationId}/retry": {
      "post": {
        "description": "Retry a failed webhook notification",
        "operationId": "NotificationsController_retryWebhook",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "description": "Webhook notification ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook retry result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationOperationResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Retry webhook notification",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/stats": {
      "get": {
        "description": "Get comprehensive notification statistics for the tenant",
        "operationId": "NotificationsController_getNotificationStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Notification statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationStatsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get notification statistics",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/templates/email": {
      "get": {
        "description": "Get list of all available email templates",
        "operationId": "NotificationsController_getEmailTemplates",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Available email templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "templates": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": [
                              "invoice_paid",
                              "invoice_payment_failed",
                              "invoice_finalized",
                              "subscription_created",
                              "subscription_updated",
                              "subscription_canceled",
                              "subscription_reactivated",
                              "trial_will_end",
                              "payment_succeeded",
                              "payment_failed",
                              "payment_action_required",
                              "customer_created"
                            ]
                          },
                          "variables": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "description": {
                                  "type": "string"
                                },
                                "required": {
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get available email templates",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/templates/email/{templateType}/preview": {
      "post": {
        "description": "Preview an email template with sample or custom data",
        "operationId": "NotificationsController_previewEmailTemplate",
        "parameters": [
          {
            "name": "templateType",
            "required": true,
            "in": "path",
            "description": "Email template type",
            "schema": {
              "enum": [
                "invoice_paid",
                "invoice_payment_failed",
                "invoice_finalized",
                "subscription_created",
                "subscription_updated",
                "subscription_canceled",
                "subscription_reactivated",
                "trial_will_end",
                "payment_succeeded",
                "payment_failed",
                "payment_action_required",
                "customer_created"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template preview",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subject": {
                      "type": "string"
                    },
                    "html": {
                      "type": "string"
                    },
                    "text": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Preview email template",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/notifications/process-queue": {
      "post": {
        "description": "Process pending email and webhook notifications",
        "operationId": "NotificationsController_processQueue",
        "parameters": [
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Notification type to process",
            "schema": {
              "enum": [
                "email",
                "webhook",
                "all"
              ],
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Maximum number of notifications to process",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Queue processing results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "object",
                      "properties": {
                        "processed": {
                          "type": "number"
                        },
                        "successful": {
                          "type": "number"
                        },
                        "failed": {
                          "type": "number"
                        }
                      }
                    },
                    "webhook": {
                      "type": "object",
                      "properties": {
                        "processed": {
                          "type": "number"
                        },
                        "successful": {
                          "type": "number"
                        },
                        "failed": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Process queued notifications",
        "tags": [
          "Notifications"
        ]
      }
    },
    "/admin/payment-provider-configs": {
      "get": {
        "operationId": "AdminController_getPaymentProviderConfigs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Payment provider configurations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentProviderConfigResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all payment provider configurations",
        "tags": [
          "Admin"
        ]
      },
      "post": {
        "operationId": "AdminController_createPaymentProviderConfig",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentProviderConfigDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment provider configuration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentProviderConfigResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create payment provider configuration",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/payment-provider-configs/{id}": {
      "get": {
        "operationId": "AdminController_getPaymentProviderConfig",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payment provider configuration retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentProviderConfigResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get payment provider configuration by ID",
        "tags": [
          "Admin"
        ]
      },
      "put": {
        "operationId": "AdminController_updatePaymentProviderConfig",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentProviderConfigDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment provider configuration updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentProviderConfigResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update payment provider configuration",
        "tags": [
          "Admin"
        ]
      },
      "delete": {
        "operationId": "AdminController_deletePaymentProviderConfig",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Payment provider configuration deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete payment provider configuration",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/plans": {
      "get": {
        "operationId": "AdminController_getPlans",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "example": "Professional",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plans retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all plans",
        "tags": [
          "Admin"
        ]
      },
      "post": {
        "operationId": "AdminController_createPlan",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePlanDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create plan",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/plans/{id}": {
      "get": {
        "operationId": "AdminController_getPlan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plan retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get plan by ID",
        "tags": [
          "Admin"
        ]
      },
      "put": {
        "operationId": "AdminController_updatePlan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePlanDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Plan updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update plan",
        "tags": [
          "Admin"
        ]
      },
      "delete": {
        "operationId": "AdminController_deletePlan",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Plan deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete plan",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/prices": {
      "get": {
        "operationId": "AdminController_getPrices",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "plan_id",
            "required": false,
            "in": "query",
            "description": "Plan ID filter",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PriceResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all prices",
        "tags": [
          "Admin"
        ]
      },
      "post": {
        "operationId": "AdminController_createPrice",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePriceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Price created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Create price",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/prices/{id}": {
      "get": {
        "operationId": "AdminController_getPrice",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Price retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get price by ID",
        "tags": [
          "Admin"
        ]
      },
      "put": {
        "operationId": "AdminController_updatePrice",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePriceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Price updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Update price",
        "tags": [
          "Admin"
        ]
      },
      "delete": {
        "operationId": "AdminController_deletePrice",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Price deleted successfully"
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Delete price",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/orders": {
      "get": {
        "operationId": "AdminController_getAllOrders",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Order status filter",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "REQUIRES_ACTION",
                "SUCCEEDED",
                "CANCELED",
                "REFUNDED"
              ]
            }
          },
          {
            "name": "provider",
            "required": false,
            "in": "query",
            "description": "Payment provider filter",
            "schema": {
              "type": "string",
              "enum": [
                "STRIPE",
                "PAYPAL",
                "FUSIONPAY"
              ]
            }
          },
          {
            "name": "tenant_id",
            "required": false,
            "in": "query",
            "description": "Tenant ID filter",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all orders (bypass RLS)",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/orders/{id}": {
      "get": {
        "operationId": "AdminController_getOrder",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get order by ID (bypass RLS)",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/subscriptions": {
      "get": {
        "operationId": "AdminController_getAllSubscriptions",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Subscription status filter",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "ACTIVE",
                "PAST_DUE",
                "CANCELED"
              ]
            }
          },
          {
            "name": "tenant_id",
            "required": false,
            "in": "query",
            "description": "Tenant ID filter",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriptions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all subscriptions (bypass RLS)",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/subscriptions/{id}": {
      "get": {
        "operationId": "AdminController_getSubscription",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get subscription by ID (bypass RLS)",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/invoices": {
      "get": {
        "operationId": "AdminController_getAllInvoices",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Invoice status filter",
            "schema": {
              "type": "string",
              "enum": [
                "DRAFT",
                "OPEN",
                "PAID",
                "VOID"
              ]
            }
          },
          {
            "name": "tenant_id",
            "required": false,
            "in": "query",
            "description": "Tenant ID filter",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all invoices (bypass RLS)",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/invoices/{id}": {
      "get": {
        "operationId": "AdminController_getInvoice",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get invoice by ID (bypass RLS)",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/entitlements": {
      "get": {
        "operationId": "AdminController_getAllEntitlements",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "tenant_id",
            "required": false,
            "in": "query",
            "description": "Tenant ID filter",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          },
          {
            "name": "feature_key",
            "required": false,
            "in": "query",
            "description": "Feature key filter",
            "schema": {
              "example": "hr",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entitlements retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntitlementResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all entitlements (bypass RLS)",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/entitlements/{id}": {
      "get": {
        "operationId": "AdminController_getEntitlement",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entitlement retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get entitlement by ID (bypass RLS)",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/stripe-events": {
      "get": {
        "operationId": "AdminController_getAllStripeEvents",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 20,
              "example": 20,
              "type": "number"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Event type filter",
            "schema": {
              "example": "invoice.payment_succeeded",
              "type": "string"
            }
          },
          {
            "name": "processed",
            "required": false,
            "in": "query",
            "description": "Processed status filter",
            "schema": {
              "example": "true",
              "type": "boolean"
            }
          },
          {
            "name": "tenant_id",
            "required": false,
            "in": "query",
            "description": "Tenant ID filter",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stripe events retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StripeEventResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get all stripe events (bypass RLS)",
        "tags": [
          "Admin"
        ]
      }
    },
    "/admin/stripe-events/{id}": {
      "get": {
        "operationId": "AdminController_getStripeEvent",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stripe event retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripeEventResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "admin-token": []
          }
        ],
        "summary": "(Admin) Get stripe event by ID (bypass RLS)",
        "tags": [
          "Admin"
        ]
      }
    }
  },
  "info": {
    "title": "PrimeForge Billing API",
    "description": "Enterprise billing and subscription management system",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "CreatePaymentIntentDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Payment amount in smallest currency unit (e.g., cents for USD)",
            "example": 2000,
            "minimum": 1
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code",
            "example": "usd",
            "enum": [
              "usd",
              "eur",
              "gbp",
              "cad",
              "aud"
            ]
          },
          "customerId": {
            "type": "string",
            "description": "ID of existing customer",
            "example": "cus_1234567890"
          },
          "description": {
            "type": "string",
            "description": "Description of the payment",
            "example": "Monthly subscription payment for Pro plan"
          },
          "automaticPaymentMethods": {
            "type": "boolean",
            "description": "Enable automatic payment methods",
            "example": true,
            "default": true
          },
          "metadata": {
            "type": "object",
            "description": "Metadata as key-value pairs",
            "example": {
              "orderId": "order_123",
              "planId": "plan_pro"
            }
          }
        },
        "required": [
          "amount",
          "currency"
        ]
      },
      "PaymentIntentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment intent ID",
            "example": "pi_1234567890"
          },
          "amount": {
            "type": "number",
            "description": "Payment amount in smallest currency unit",
            "example": 2000
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "usd"
          },
          "status": {
            "type": "string",
            "description": "Payment intent status",
            "enum": [
              "requires_payment_method",
              "requires_confirmation",
              "requires_action",
              "processing",
              "requires_capture",
              "canceled",
              "succeeded"
            ],
            "example": "requires_payment_method"
          },
          "clientSecret": {
            "type": "string",
            "description": "Client secret for frontend payment confirmation",
            "example": "pi_1234567890_secret_abcdef"
          },
          "customerId": {
            "type": "string",
            "description": "Associated customer ID",
            "example": "cus_1234567890"
          },
          "description": {
            "type": "string",
            "description": "Payment description",
            "example": "Monthly subscription payment"
          },
          "metadata": {
            "type": "object",
            "description": "Payment metadata",
            "example": {
              "orderId": "order_123"
            }
          },
          "provider": {
            "type": "string",
            "description": "Payment provider",
            "enum": [
              "stripe",
              "paypal"
            ],
            "example": "stripe"
          },
          "created": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-07-30T10:00:00Z"
          },
          "updated": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-07-30T11:00:00Z"
          }
        },
        "required": [
          "id",
          "amount",
          "currency",
          "status",
          "provider",
          "created",
          "updated"
        ]
      },
      "PaymentCustomerResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Customer ID",
            "example": "cus_1234567890"
          },
          "email": {
            "type": "string",
            "description": "Customer email",
            "example": "customer@example.com"
          },
          "name": {
            "type": "string",
            "description": "Customer name",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "description": "Customer phone",
            "example": "+1234567890"
          },
          "metadata": {
            "type": "object",
            "description": "Customer metadata",
            "example": {
              "tenantId": "tenant_123"
            }
          },
          "created": {
            "format": "date-time",
            "type": "string",
            "description": "Customer creation timestamp",
            "example": "2025-07-30T10:00:00Z"
          }
        },
        "required": [
          "id",
          "created"
        ]
      },
      "PaymentOperationResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          },
          "paymentIntent": {
            "description": "Payment intent data (if applicable)",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentIntentResponseDto"
              }
            ]
          },
          "customer": {
            "description": "Customer data (if applicable)",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentCustomerResponseDto"
              }
            ]
          },
          "error": {
            "type": "object",
            "description": "Error details (if operation failed)",
            "example": {
              "code": "card_declined",
              "message": "Your card was declined.",
              "type": "card_error"
            }
          },
          "provider": {
            "type": "string",
            "description": "Payment provider used",
            "enum": [
              "stripe",
              "paypal"
            ],
            "example": "stripe"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Operation timestamp",
            "example": "2025-07-30T12:00:00Z"
          }
        },
        "required": [
          "success",
          "provider",
          "timestamp"
        ]
      },
      "UpdatePaymentIntentDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Updated payment amount",
            "example": 2500,
            "minimum": 1
          },
          "currency": {
            "type": "string",
            "description": "Updated currency code",
            "example": "usd"
          },
          "description": {
            "type": "string",
            "description": "Updated description",
            "example": "Updated payment description"
          },
          "metadata": {
            "type": "object",
            "description": "Updated metadata",
            "example": {
              "updated": "true"
            }
          }
        }
      },
      "ConfirmPaymentIntentDto": {
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "description": "Payment method ID to confirm with",
            "example": "pm_1234567890"
          },
          "returnUrl": {
            "type": "string",
            "description": "Return URL for redirect-based payment methods",
            "example": "https://example.com/return"
          }
        }
      },
      "CreateCustomerDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Customer email address",
            "example": "customer@example.com"
          },
          "name": {
            "type": "string",
            "description": "Customer full name",
            "example": "John Doe"
          },
          "phone": {
            "type": "string",
            "description": "Customer phone number",
            "example": "+1234567890"
          },
          "metadata": {
            "type": "object",
            "description": "Customer metadata",
            "example": {
              "tenantId": "tenant_123",
              "userId": "user_456"
            }
          }
        }
      },
      "WebhookProcessingResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Processing success status",
            "example": true
          },
          "eventId": {
            "type": "string",
            "description": "Event ID that was processed",
            "example": "evt_1234567890"
          },
          "eventType": {
            "type": "string",
            "description": "Event type that was processed",
            "example": "payment_intent.succeeded"
          },
          "processed": {
            "type": "boolean",
            "description": "Whether the event was processed successfully",
            "example": true
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Processing timestamp",
            "example": "2025-07-30T12:00:00Z"
          },
          "error": {
            "type": "string",
            "description": "Error message if processing failed",
            "example": "Invalid event signature"
          },
          "shouldRetry": {
            "type": "boolean",
            "description": "Whether the event should be retried",
            "example": false
          }
        },
        "required": [
          "success",
          "eventId",
          "eventType",
          "processed",
          "timestamp",
          "shouldRetry"
        ]
      },
      "CreateOrderDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Order amount in smallest currency unit (e.g., cents for USD)",
            "example": 2000,
            "minimum": 1
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code",
            "example": "usd",
            "enum": [
              "usd",
              "eur",
              "gbp",
              "cad",
              "aud"
            ]
          },
          "provider": {
            "type": "string",
            "description": "Payment provider to use",
            "example": "STRIPE",
            "enum": [
              "STRIPE",
              "PAYPAL",
              "FUSIONPAY"
            ]
          },
          "payerUserId": {
            "type": "string",
            "description": "User ID of the person making the payment",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "description": {
            "type": "string",
            "description": "Order description",
            "example": "Monthly subscription payment for Pro plan"
          },
          "metadata": {
            "type": "object",
            "description": "Order metadata as key-value pairs",
            "example": {
              "planId": "plan_pro",
              "subscriptionId": "sub_123"
            }
          },
          "customerId": {
            "type": "string",
            "description": "Existing customer ID from payment provider",
            "example": "cus_1234567890"
          },
          "automaticPaymentMethods": {
            "type": "boolean",
            "description": "Enable automatic payment methods",
            "example": true,
            "default": true
          }
        },
        "required": [
          "amount",
          "currency",
          "provider"
        ]
      },
      "OrderResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Order ID"
          },
          "tenant_id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "description": "Tenant ID"
          },
          "payer_user_id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174002",
            "description": "Payer user ID"
          },
          "provider": {
            "type": "string",
            "enum": [
              "STRIPE",
              "PAYPAL",
              "FUSIONPAY"
            ],
            "example": "STRIPE",
            "description": "Payment provider"
          },
          "provider_intent_id": {
            "type": "object",
            "example": "pi_1234567890abcdef",
            "description": "Provider intent ID",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "REQUIRES_ACTION",
              "SUCCEEDED",
              "CANCELED",
              "REFUNDED"
            ],
            "example": "SUCCEEDED",
            "description": "Order status"
          },
          "amount": {
            "type": "number",
            "example": 2999,
            "description": "Amount in smallest currency unit (cents)"
          },
          "currency": {
            "type": "string",
            "example": "usd",
            "description": "Currency code"
          },
          "description": {
            "type": "object",
            "example": "Pro plan subscription",
            "description": "Order description",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "example": {
              "plan": "pro",
              "seats": 5
            },
            "description": "Additional metadata",
            "nullable": true
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01T00:00:00.000Z",
            "description": "Created timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01T00:00:00.000Z",
            "description": "Updated timestamp"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "payer_user_id",
          "provider",
          "provider_intent_id",
          "status",
          "amount",
          "currency",
          "description",
          "metadata",
          "created_at",
          "updated_at"
        ]
      },
      "OrderOperationResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          },
          "order": {
            "description": "Order data (if successful)",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrderResponseDto"
              }
            ]
          },
          "error": {
            "type": "string",
            "description": "Error message (if failed)",
            "example": "Order not found"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Operation timestamp",
            "example": "2025-07-30T12:00:00Z"
          }
        },
        "required": [
          "success",
          "timestamp"
        ]
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "number",
            "description": "Current page number",
            "example": 1
          },
          "itemsPerPage": {
            "type": "number",
            "description": "Number of items per page",
            "example": 20
          },
          "totalItems": {
            "type": "number",
            "description": "Total number of items",
            "example": 150
          },
          "totalPages": {
            "type": "number",
            "description": "Total number of pages",
            "example": 8
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Whether there is a next page",
            "example": true
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Whether there is a previous page",
            "example": false
          }
        },
        "required": [
          "currentPage",
          "itemsPerPage",
          "totalItems",
          "totalPages",
          "hasNextPage",
          "hasPreviousPage"
        ]
      },
      "PaginatedOrderResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Order list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderResponseDto"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMeta"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateOrderDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Updated order amount",
            "example": 2500,
            "minimum": 1
          },
          "description": {
            "type": "string",
            "description": "Updated order description",
            "example": "Updated subscription payment for Pro plan"
          },
          "metadata": {
            "type": "object",
            "description": "Updated order metadata",
            "example": {
              "updated": "true",
              "planId": "plan_enterprise"
            }
          }
        }
      },
      "ProcessOrderPaymentDto": {
        "type": "object",
        "properties": {
          "paymentMethodId": {
            "type": "string",
            "description": "Payment method ID for payment confirmation",
            "example": "pm_1234567890"
          },
          "returnUrl": {
            "type": "string",
            "description": "Return URL for redirect-based payment methods",
            "example": "https://example.com/payment/return"
          }
        }
      },
      "RefundOrderDto": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Refund amount (if partial refund). If not provided, full refund will be processed",
            "example": 1000,
            "minimum": 1
          },
          "reason": {
            "type": "string",
            "description": "Reason for the refund",
            "example": "Customer requested cancellation"
          },
          "metadata": {
            "type": "object",
            "description": "Refund metadata",
            "example": {
              "refundType": "customer_request",
              "processedBy": "admin"
            }
          }
        }
      },
      "PriceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Price ID"
          },
          "plan_id": {
            "type": "string",
            "description": "Plan ID this price belongs to"
          },
          "currency": {
            "type": "string",
            "description": "Currency code"
          },
          "unit_amount": {
            "type": "number",
            "description": "Unit amount as decimal"
          },
          "interval": {
            "type": "string",
            "enum": [
              "ONE_TIME",
              "MONTH",
              "YEAR"
            ],
            "description": "Billing interval"
          },
          "seat_included": {
            "type": "number",
            "description": "Number of seats included"
          },
          "external_id": {
            "type": "string",
            "description": "External provider ID"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the price is active"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          },
          "plan": {
            "type": "object",
            "description": "Associated plan"
          }
        },
        "required": [
          "id",
          "plan_id",
          "currency",
          "unit_amount",
          "interval",
          "seat_included",
          "active",
          "created_at",
          "updated_at"
        ]
      },
      "PlanResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Plan ID"
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the plan"
          },
          "description": {
            "type": "string",
            "description": "Description of the plan"
          },
          "tier": {
            "type": "string",
            "description": "Plan tier"
          },
          "features": {
            "type": "object",
            "description": "Plan features"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          },
          "prices": {
            "description": "Associated prices",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_count": {
            "type": "object",
            "description": "Subscription count"
          }
        },
        "required": [
          "id",
          "display_name",
          "tier",
          "created_at",
          "updated_at"
        ]
      },
      "PaginatedPlanResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Plans list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanResponseDto"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMeta"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "CreateSubscriptionDto": {
        "type": "object",
        "properties": {
          "payerUserId": {
            "type": "string",
            "description": "User ID of the person creating the subscription",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "planId": {
            "type": "string",
            "description": "Plan ID to subscribe to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "provider": {
            "type": "string",
            "description": "Payment provider to use",
            "example": "STRIPE",
            "enum": [
              "STRIPE",
              "PAYPAL",
              "FUSIONPAY"
            ]
          },
          "seatCount": {
            "type": "number",
            "description": "Number of seats/users for this subscription",
            "example": 5,
            "minimum": 1,
            "default": 1
          },
          "providerSubId": {
            "type": "string",
            "description": "External payment provider subscription ID (if already created)",
            "example": "sub_1234567890"
          },
          "trialEnd": {
            "type": "string",
            "description": "Trial period end date (ISO string)",
            "example": "2025-02-28T23:59:59Z"
          }
        },
        "required": [
          "payerUserId",
          "planId",
          "provider",
          "seatCount"
        ]
      },
      "SubscriptionResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Subscription ID"
          },
          "tenant_id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "description": "Tenant ID"
          },
          "payer_user_id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174002",
            "description": "Payer user ID"
          },
          "plan_id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174003",
            "description": "Plan ID"
          },
          "plan": {
            "description": "Associated plan details",
            "allOf": [
              {
                "$ref": "#/components/schemas/PlanResponseDto"
              }
            ]
          },
          "provider": {
            "type": "string",
            "enum": [
              "STRIPE",
              "PAYPAL",
              "FUSIONPAY"
            ],
            "example": "STRIPE",
            "description": "Payment provider"
          },
          "provider_sub_id": {
            "type": "string",
            "example": "sub_1234567890abcdef",
            "description": "Provider subscription ID"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "ACTIVE",
              "PAST_DUE",
              "CANCELED"
            ],
            "example": "ACTIVE",
            "description": "Subscription status"
          },
          "seatCount": {
            "type": "number",
            "example": 5,
            "description": "Number of seats in the subscription"
          },
          "current_period_start": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01T00:00:00.000Z",
            "description": "Current period start date"
          },
          "current_period_end": {
            "format": "date-time",
            "type": "string",
            "example": "2024-02-01T00:00:00.000Z",
            "description": "Current period end date"
          },
          "cancel_at_period_end": {
            "type": "boolean",
            "example": false,
            "description": "Whether to cancel at period end"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01T00:00:00.000Z",
            "description": "Created timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01T00:00:00.000Z",
            "description": "Updated timestamp"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "payer_user_id",
          "plan_id",
          "provider",
          "provider_sub_id",
          "status",
          "seatCount",
          "current_period_start",
          "current_period_end",
          "cancel_at_period_end",
          "created_at",
          "updated_at"
        ]
      },
      "SubscriptionOperationResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          },
          "subscription": {
            "description": "Subscription data if operation succeeded",
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionResponseDto"
              }
            ]
          },
          "error": {
            "type": "string",
            "description": "Error message if operation failed",
            "example": "Subscription not found"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Operation timestamp",
            "example": "2025-01-30T23:48:56.000Z"
          }
        },
        "required": [
          "success",
          "timestamp"
        ]
      },
      "PaginatedSubscriptionResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Subscriptions list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionResponseDto"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMeta"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UpdateSubscriptionDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "New plan ID to upgrade/downgrade to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "seatCount": {
            "type": "number",
            "description": "New number of seats/users for this subscription",
            "example": 10,
            "minimum": 1
          },
          "cancelAtPeriodEnd": {
            "type": "boolean",
            "description": "Whether to cancel the subscription at the end of the current period",
            "example": false
          }
        }
      },
      "CancelSubscriptionDto": {
        "type": "object",
        "properties": {
          "immediately": {
            "type": "boolean",
            "description": "Whether to cancel immediately or at period end",
            "example": false,
            "default": false
          },
          "reason": {
            "type": "string",
            "description": "Reason for cancellation",
            "example": "User requested cancellation"
          }
        }
      },
      "ReactivateSubscriptionDto": {
        "type": "object",
        "properties": {
          "planId": {
            "type": "string",
            "description": "New plan to reactivate with (if different from original)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "seatCount": {
            "type": "number",
            "description": "Number of seats for reactivated subscription",
            "example": 5,
            "minimum": 1
          }
        }
      },
      "CreateInvoiceDto": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "provider": {
            "type": "string",
            "description": "Payment provider",
            "enum": [
              "STRIPE",
              "PAYPAL",
              "FUSIONPAY"
            ],
            "example": "STRIPE"
          },
          "providerInvoiceId": {
            "type": "string",
            "description": "Provider invoice ID",
            "example": "in_1234567890"
          },
          "total": {
            "type": "number",
            "description": "Invoice total amount in smallest currency unit",
            "example": 2000,
            "minimum": 0
          },
          "status": {
            "type": "string",
            "description": "Invoice status",
            "enum": [
              "DRAFT",
              "OPEN",
              "PAID",
              "VOID"
            ],
            "example": "OPEN"
          },
          "dueDate": {
            "type": "string",
            "description": "Invoice due date",
            "example": "2025-08-30T00:00:00Z"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID (will be set from context if not provided)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "subscriptionId",
          "provider",
          "providerInvoiceId",
          "total",
          "status",
          "dueDate"
        ]
      },
      "InvoiceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Invoice ID"
          },
          "tenant_id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "description": "Tenant ID"
          },
          "subscription_id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174002",
            "description": "Subscription ID"
          },
          "subscription": {
            "description": "Associated subscription details",
            "allOf": [
              {
                "$ref": "#/components/schemas/SubscriptionResponseDto"
              }
            ]
          },
          "provider": {
            "type": "string",
            "enum": [
              "STRIPE",
              "PAYPAL",
              "FUSIONPAY"
            ],
            "example": "STRIPE",
            "description": "Payment provider"
          },
          "provider_invoice_id": {
            "type": "string",
            "example": "in_1234567890abcdef",
            "description": "Provider invoice ID"
          },
          "total": {
            "type": "number",
            "example": 2999,
            "description": "Total amount in smallest currency unit (cents)"
          },
          "status": {
            "type": "string",
            "enum": [
              "DRAFT",
              "OPEN",
              "PAID",
              "VOID"
            ],
            "example": "PAID",
            "description": "Invoice status"
          },
          "due_date": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-31T23:59:59.000Z",
            "description": "Invoice due date"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01T00:00:00.000Z",
            "description": "Created timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01T00:00:00.000Z",
            "description": "Updated timestamp"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "subscription_id",
          "provider",
          "provider_invoice_id",
          "total",
          "status",
          "due_date",
          "created_at",
          "updated_at"
        ]
      },
      "InvoiceOperationResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          },
          "invoice": {
            "description": "Invoice data (if successful)",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceResponseDto"
              }
            ]
          },
          "error": {
            "type": "string",
            "description": "Error message (if failed)",
            "example": "Invoice not found"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Operation timestamp",
            "example": "2025-07-30T12:00:00Z"
          }
        },
        "required": [
          "success",
          "timestamp"
        ]
      },
      "PaginatedInvoiceResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Invoice list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceResponseDto"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMeta"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "CreateEntitlementDto": {
        "type": "object",
        "properties": {
          "featureKey": {
            "type": "string",
            "description": "Feature key/identifier",
            "example": "hr_management"
          },
          "validFrom": {
            "type": "string",
            "description": "Entitlement valid from date",
            "example": "2025-01-01T00:00:00Z"
          },
          "validTo": {
            "type": "string",
            "description": "Entitlement valid to date",
            "example": "2025-12-31T23:59:59Z"
          },
          "seatLimit": {
            "type": "number",
            "description": "Seat limit for this entitlement",
            "example": 10,
            "minimum": 1
          },
          "usageCount": {
            "type": "number",
            "description": "Initial usage count",
            "example": 0,
            "minimum": 0
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID (will be set from context if not provided)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": [
          "featureKey",
          "validFrom",
          "validTo",
          "seatLimit"
        ]
      },
      "EntitlementResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174000",
            "description": "Entitlement ID"
          },
          "tenant_id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "description": "Tenant ID"
          },
          "feature_key": {
            "type": "string",
            "example": "analytics",
            "description": "Feature key that this entitlement grants access to"
          },
          "valid_from": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01T00:00:00.000Z",
            "description": "Start date of entitlement validity"
          },
          "valid_to": {
            "format": "date-time",
            "type": "string",
            "example": "2024-12-31T23:59:59.000Z",
            "description": "End date of entitlement validity"
          },
          "seat_limit": {
            "type": "number",
            "example": 10,
            "description": "Maximum number of seats allowed"
          },
          "usage_count": {
            "type": "number",
            "example": 5,
            "description": "Current usage count"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "feature_key",
          "valid_from",
          "valid_to",
          "seat_limit",
          "usage_count"
        ]
      },
      "EntitlementOperationResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          },
          "entitlement": {
            "description": "Entitlement data (if successful)",
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementResponseDto"
              }
            ]
          },
          "error": {
            "type": "string",
            "description": "Error message (if failed)",
            "example": "Entitlement not found"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Operation timestamp",
            "example": "2025-07-30T12:00:00Z"
          }
        },
        "required": [
          "success",
          "timestamp"
        ]
      },
      "PaginatedEntitlementResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Entitlement list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntitlementResponseDto"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMeta"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "UsageUpdateResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          },
          "previousUsage": {
            "type": "number",
            "description": "Previous usage count",
            "example": 5
          },
          "newUsage": {
            "type": "number",
            "description": "New usage count",
            "example": 6
          },
          "remainingSeats": {
            "type": "number",
            "description": "Remaining seats after update",
            "example": 4
          },
          "warning": {
            "type": "string",
            "description": "Warning message if approaching limit",
            "example": "Usage is at 80% of limit"
          },
          "error": {
            "type": "string",
            "description": "Error message (if failed)",
            "example": "Usage would exceed seat limit"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Operation timestamp",
            "example": "2025-07-30T12:00:00Z"
          }
        },
        "required": [
          "success",
          "previousUsage",
          "newUsage",
          "remainingSeats",
          "timestamp"
        ]
      },
      "ProcessEventDto": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "Event ID to process",
            "example": "evt_1234567890"
          },
          "forceReprocess": {
            "type": "boolean",
            "description": "Force reprocessing even if already processed",
            "example": false,
            "default": false
          }
        },
        "required": [
          "eventId"
        ]
      },
      "EventProcessingResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the event processing was successful",
            "example": true
          },
          "eventId": {
            "type": "string",
            "description": "Event ID that was processed",
            "example": "evt_1234567890"
          },
          "eventType": {
            "type": "string",
            "description": "Event type",
            "enum": [
              "payment_intent.created",
              "payment_intent.succeeded",
              "payment_intent.payment_failed",
              "payment_intent.canceled",
              "payment_intent.requires_action",
              "invoice.created",
              "invoice.finalized",
              "invoice.payment_succeeded",
              "invoice.payment_failed",
              "invoice.voided",
              "customer.subscription.created",
              "customer.subscription.updated",
              "customer.subscription.deleted",
              "customer.subscription.trial_will_end",
              "customer.created",
              "customer.updated",
              "customer.deleted",
              "charge.succeeded",
              "charge.failed",
              "charge.refunded",
              "charge.dispute.created",
              "setup_intent.succeeded",
              "setup_intent.setup_failed"
            ],
            "example": "payment_intent.succeeded"
          },
          "processed": {
            "type": "boolean",
            "description": "Whether the event was processed",
            "example": true
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Processing timestamp",
            "example": "2025-07-30T10:00:00Z"
          },
          "error": {
            "type": "string",
            "description": "Error message if processing failed",
            "example": "Invalid event payload format"
          },
          "shouldRetry": {
            "type": "boolean",
            "description": "Whether the event should be retried if failed",
            "example": true
          },
          "retryCount": {
            "type": "number",
            "description": "Current retry count",
            "example": 1
          },
          "actions": {
            "description": "Actions taken during processing",
            "example": [
              "order_updated",
              "notification_sent"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "success",
          "eventId",
          "eventType",
          "processed",
          "timestamp"
        ]
      },
      "RetryEventDto": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "description": "Event ID to retry",
            "example": "evt_1234567890"
          },
          "maxRetries": {
            "type": "number",
            "description": "Maximum number of retry attempts",
            "example": 3,
            "minimum": 1,
            "maximum": 10,
            "default": 3
          }
        },
        "required": [
          "eventId"
        ]
      },
      "EventAuditResponseDto": {
        "type": "object",
        "properties": {
          "totalProcessed": {
            "type": "number",
            "description": "Total events processed",
            "example": 1250
          },
          "totalFailed": {
            "type": "number",
            "description": "Total events failed",
            "example": 25
          },
          "totalPending": {
            "type": "number",
            "description": "Total events pending",
            "example": 5
          },
          "last24Hours": {
            "type": "number",
            "description": "Events processed in the last 24 hours",
            "example": 150
          },
          "averageProcessingTime": {
            "type": "number",
            "description": "Average processing time in milliseconds",
            "example": 245
          },
          "commonEventTypes": {
            "description": "Most common event types",
            "example": [
              {
                "type": "payment_intent.succeeded",
                "count": 500
              },
              {
                "type": "invoice.payment_succeeded",
                "count": 300
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "totalProcessed",
          "totalFailed",
          "totalPending",
          "last24Hours",
          "averageProcessingTime",
          "commonEventTypes"
        ]
      },
      "EventResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Event ID",
            "example": "evt_1234567890"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID (organization)",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "type": {
            "type": "string",
            "description": "Event type",
            "enum": [
              "payment_intent.created",
              "payment_intent.succeeded",
              "payment_intent.payment_failed",
              "payment_intent.canceled",
              "payment_intent.requires_action",
              "invoice.created",
              "invoice.finalized",
              "invoice.payment_succeeded",
              "invoice.payment_failed",
              "invoice.voided",
              "customer.subscription.created",
              "customer.subscription.updated",
              "customer.subscription.deleted",
              "customer.subscription.trial_will_end",
              "customer.created",
              "customer.updated",
              "customer.deleted",
              "charge.succeeded",
              "charge.failed",
              "charge.refunded",
              "charge.dispute.created",
              "setup_intent.succeeded",
              "setup_intent.setup_failed"
            ],
            "example": "payment_intent.succeeded"
          },
          "apiVersion": {
            "type": "string",
            "description": "API version used by Stripe",
            "example": "2023-10-16"
          },
          "payload": {
            "type": "object",
            "description": "Event payload data",
            "example": {
              "object": {
                "id": "pi_1234567890",
                "amount": 2000,
                "currency": "usd",
                "status": "succeeded"
              }
            }
          },
          "context": {
            "type": "string",
            "description": "Event context information",
            "example": "Authentication context or related object details"
          },
          "processed": {
            "type": "boolean",
            "description": "Whether the event has been processed",
            "example": true
          },
          "retries": {
            "type": "number",
            "description": "Number of retry attempts",
            "example": 0
          },
          "created": {
            "type": "number",
            "description": "Event creation timestamp (Unix timestamp)",
            "example": 1677721200
          },
          "processedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Event processing timestamp",
            "example": "2025-07-30T10:00:00Z"
          },
          "receivedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Event received timestamp",
            "example": "2025-07-30T10:00:00Z"
          }
        },
        "required": [
          "id",
          "tenantId",
          "type",
          "payload",
          "processed",
          "retries",
          "created",
          "receivedAt"
        ]
      },
      "PaginatedEventResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Event list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventResponseDto"
            }
          },
          "meta": {
            "description": "Pagination information",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMeta"
              }
            ]
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "EmailRecipientDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Recipient email address",
            "example": "user@example.com"
          },
          "name": {
            "type": "string",
            "description": "Recipient name",
            "example": "John Doe"
          },
          "type": {
            "type": "string",
            "description": "Recipient type (to, cc, bcc)",
            "example": "to",
            "enum": [
              "to",
              "cc",
              "bcc"
            ],
            "default": "to"
          }
        },
        "required": [
          "email"
        ]
      },
      "EmailAttachmentDto": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "Attachment filename",
            "example": "invoice.pdf"
          },
          "contentType": {
            "type": "string",
            "description": "Attachment content type",
            "example": "application/pdf"
          },
          "content": {
            "type": "string",
            "description": "Attachment content (base64 encoded)",
            "example": "JVBERi0xLjQKJeLjz9MK..."
          },
          "cid": {
            "type": "string",
            "description": "Content ID for inline attachments",
            "example": "logo"
          }
        },
        "required": [
          "filename",
          "contentType",
          "content"
        ]
      },
      "SendEmailDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Tenant ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "templateType": {
            "type": "string",
            "description": "Email template type",
            "enum": [
              "invoice_paid",
              "invoice_payment_failed",
              "invoice_finalized",
              "subscription_created",
              "subscription_updated",
              "subscription_canceled",
              "subscription_reactivated",
              "trial_will_end",
              "payment_succeeded",
              "payment_failed",
              "payment_action_required",
              "customer_created"
            ],
            "example": "invoice_paid"
          },
          "recipients": {
            "description": "Email recipients",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailRecipientDto"
            }
          },
          "templateVariables": {
            "type": "object",
            "description": "Template variables for personalization",
            "example": {
              "customerName": "John Doe",
              "invoiceNumber": "INV-001",
              "amount": "$29.99",
              "dueDate": "2025-08-30"
            }
          },
          "priority": {
            "type": "string",
            "description": "Email priority",
            "enum": [
              "low",
              "normal",
              "high",
              "urgent"
            ],
            "example": "normal",
            "default": "normal"
          },
          "attachments": {
            "description": "Email attachments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAttachmentDto"
            }
          },
          "customSubject": {
            "type": "string",
            "description": "Custom email subject (overrides template default)",
            "example": "Your invoice has been paid successfully"
          },
          "sendImmediate": {
            "type": "boolean",
            "description": "Send immediately (bypass queue)",
            "example": false,
            "default": false
          },
          "scheduledAt": {
            "type": "string",
            "description": "Schedule sending for later (ISO date string)",
            "example": "2025-08-01T10:00:00Z"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata",
            "example": {
              "orderId": "order_123",
              "campaignId": "campaign_456"
            }
          }
        },
        "required": [
          "tenantId",
          "templateType",
          "recipients",
          "templateVariables"
        ]
      },
      "NotificationOperationResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Whether the operation was successful",
            "example": true
          },
          "operation": {
            "type": "string",
            "description": "Operation type",
            "example": "email_sent"
          },
          "count": {
            "type": "number",
            "description": "Number of notifications processed",
            "example": 1
          },
          "notificationIds": {
            "description": "List of notification IDs",
            "example": [
              "123e4567-e89b-12d3-a456-426614174000"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "error": {
            "type": "string",
            "description": "Error message if operation failed",
            "example": "SMTP server unavailable"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "Operation timestamp",
            "example": "2025-07-30T10:00:00Z"
          },
          "details": {
            "type": "object",
            "description": "Additional operation details",
            "example": {
              "provider": "sendgrid",
              "batchId": "batch_123"
            }
          }
        },
        "required": [
          "success",
          "operation",
          "count",
          "timestamp"
        ]
      },
      "BulkEmailDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Tenant ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "templateType": {
            "type": "string",
            "description": "Email template type",
            "enum": [
              "invoice_paid",
              "invoice_payment_failed",
              "invoice_finalized",
              "subscription_created",
              "subscription_updated",
              "subscription_canceled",
              "subscription_reactivated",
              "trial_will_end",
              "payment_succeeded",
              "payment_failed",
              "payment_action_required",
              "customer_created"
            ],
            "example": "trial_will_end"
          },
          "recipientData": {
            "type": "array",
            "description": "List of recipients with personalized data",
            "items": {
              "type": "object",
              "properties": {
                "recipient": {
                  "$ref": "#/components/schemas/EmailRecipientDto"
                },
                "templateVariables": {
                  "type": "object"
                }
              }
            }
          },
          "priority": {
            "type": "string",
            "description": "Email priority",
            "enum": [
              "low",
              "normal",
              "high",
              "urgent"
            ],
            "example": "normal",
            "default": "normal"
          },
          "batchSize": {
            "type": "number",
            "description": "Batch size for processing",
            "example": 100,
            "minimum": 1,
            "maximum": 1000,
            "default": 100
          }
        },
        "required": [
          "tenantId",
          "templateType",
          "recipientData"
        ]
      },
      "WebhookHeaderDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Header name",
            "example": "Authorization"
          },
          "value": {
            "type": "string",
            "description": "Header value",
            "example": "Bearer token123"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "SendWebhookDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Tenant ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "url": {
            "type": "string",
            "description": "Webhook endpoint URL",
            "example": "https://api.example.com/webhooks/billing"
          },
          "eventType": {
            "type": "string",
            "description": "Webhook event type",
            "enum": [
              "payment.succeeded",
              "payment.failed",
              "invoice.paid",
              "invoice.payment_failed",
              "subscription.created",
              "subscription.updated",
              "subscription.canceled",
              "customer.created",
              "customer.updated",
              "entitlement.granted",
              "entitlement.revoked",
              "order.completed",
              "order.refunded"
            ],
            "example": "payment.succeeded"
          },
          "payload": {
            "type": "object",
            "description": "Webhook payload data",
            "example": {
              "id": "payment_123",
              "amount": 2000,
              "currency": "usd",
              "status": "succeeded",
              "customer": {
                "id": "cus_123",
                "email": "user@example.com"
              }
            }
          },
          "httpMethod": {
            "type": "string",
            "description": "HTTP method to use",
            "enum": [
              "POST",
              "PUT",
              "PATCH"
            ],
            "example": "POST",
            "default": "POST"
          },
          "headers": {
            "description": "Additional HTTP headers",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookHeaderDto"
            }
          },
          "secret": {
            "type": "string",
            "description": "Webhook signature secret for HMAC validation",
            "example": "whsec_1234567890abcdef"
          },
          "timeout": {
            "type": "number",
            "description": "Request timeout in milliseconds",
            "example": 30000,
            "minimum": 1000,
            "maximum": 120000,
            "default": 30000
          },
          "maxRetries": {
            "type": "number",
            "description": "Maximum number of retry attempts",
            "example": 3,
            "minimum": 0,
            "maximum": 10,
            "default": 3
          },
          "sendImmediate": {
            "type": "boolean",
            "description": "Send immediately (bypass queue)",
            "example": false,
            "default": false
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata",
            "example": {
              "source": "billing_system",
              "version": "1.0"
            }
          }
        },
        "required": [
          "tenantId",
          "url",
          "eventType",
          "payload"
        ]
      },
      "BulkWebhookDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "string",
            "description": "Tenant ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "eventType": {
            "type": "string",
            "description": "Webhook event type",
            "enum": [
              "payment.succeeded",
              "payment.failed",
              "invoice.paid",
              "invoice.payment_failed",
              "subscription.created",
              "subscription.updated",
              "subscription.canceled",
              "customer.created",
              "customer.updated",
              "entitlement.granted",
              "entitlement.revoked",
              "order.completed",
              "order.refunded"
            ],
            "example": "subscription.updated"
          },
          "deliveries": {
            "type": "array",
            "description": "List of webhook deliveries",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri"
                },
                "payload": {
                  "type": "object"
                },
                "headers": {
                  "type": "array"
                }
              }
            }
          },
          "batchSize": {
            "type": "number",
            "description": "Batch size for processing",
            "example": 50,
            "minimum": 1,
            "maximum": 100,
            "default": 50
          }
        },
        "required": [
          "tenantId",
          "eventType",
          "deliveries"
        ]
      },
      "EmailNotificationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Notification ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "templateType": {
            "type": "string",
            "description": "Email template type",
            "enum": [
              "invoice_paid",
              "invoice_payment_failed",
              "invoice_finalized",
              "subscription_created",
              "subscription_updated",
              "subscription_canceled",
              "subscription_reactivated",
              "trial_will_end",
              "payment_succeeded",
              "payment_failed",
              "payment_action_required",
              "customer_created"
            ],
            "example": "invoice_paid"
          },
          "recipientEmail": {
            "type": "string",
            "description": "Recipient email address",
            "example": "user@example.com"
          },
          "recipientName": {
            "type": "string",
            "description": "Recipient name",
            "example": "John Doe"
          },
          "subject": {
            "type": "string",
            "description": "Email subject",
            "example": "Your invoice has been paid successfully"
          },
          "status": {
            "type": "string",
            "description": "Email status",
            "enum": [
              "queued",
              "sending",
              "sent",
              "failed",
              "bounced",
              "opened",
              "clicked"
            ],
            "example": "sent"
          },
          "priority": {
            "type": "string",
            "description": "Email priority",
            "enum": [
              "low",
              "normal",
              "high",
              "urgent"
            ],
            "example": "normal"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message if sending failed",
            "example": "SMTP connection timeout"
          },
          "retryCount": {
            "type": "number",
            "description": "Number of retry attempts",
            "example": 1
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Notification creation timestamp",
            "example": "2025-07-30T10:00:00Z"
          },
          "sentAt": {
            "format": "date-time",
            "type": "string",
            "description": "Email sent timestamp",
            "example": "2025-07-30T10:05:00Z"
          },
          "deliveredAt": {
            "format": "date-time",
            "type": "string",
            "description": "Email delivered timestamp",
            "example": "2025-07-30T10:06:00Z"
          },
          "openedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Email opened timestamp",
            "example": "2025-07-30T11:00:00Z"
          },
          "clickedAt": {
            "format": "date-time",
            "type": "string",
            "description": "First link clicked timestamp",
            "example": "2025-07-30T11:30:00Z"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata",
            "example": {
              "campaignId": "campaign_123",
              "templateVersion": "1.2"
            }
          }
        },
        "required": [
          "id",
          "tenantId",
          "templateType",
          "recipientEmail",
          "subject",
          "status",
          "priority",
          "createdAt"
        ]
      },
      "WebhookNotificationResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Notification ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "eventType": {
            "type": "string",
            "description": "Webhook event type",
            "enum": [
              "payment.succeeded",
              "payment.failed",
              "invoice.paid",
              "invoice.payment_failed",
              "subscription.created",
              "subscription.updated",
              "subscription.canceled",
              "customer.created",
              "customer.updated",
              "entitlement.granted",
              "entitlement.revoked",
              "order.completed",
              "order.refunded"
            ],
            "example": "payment.succeeded"
          },
          "url": {
            "type": "string",
            "description": "Webhook endpoint URL",
            "example": "https://api.example.com/webhooks/billing"
          },
          "status": {
            "type": "string",
            "description": "Webhook status",
            "enum": [
              "queued",
              "sending",
              "sent",
              "failed",
              "disabled"
            ],
            "example": "sent"
          },
          "responseStatus": {
            "type": "number",
            "description": "HTTP response status code",
            "example": 200
          },
          "responseBody": {
            "type": "string",
            "description": "HTTP response body",
            "example": "{\"status\": \"received\"}"
          },
          "errorMessage": {
            "type": "string",
            "description": "Error message if sending failed",
            "example": "Connection timeout after 30 seconds"
          },
          "retryCount": {
            "type": "number",
            "description": "Number of retry attempts",
            "example": 0
          },
          "duration": {
            "type": "number",
            "description": "Request duration in milliseconds",
            "example": 1250
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Notification creation timestamp",
            "example": "2025-07-30T10:00:00Z"
          },
          "sentAt": {
            "format": "date-time",
            "type": "string",
            "description": "Webhook sent timestamp",
            "example": "2025-07-30T10:00:05Z"
          },
          "nextRetryAt": {
            "format": "date-time",
            "type": "string",
            "description": "Next retry timestamp (if applicable)",
            "example": "2025-07-30T10:01:00Z"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata",
            "example": {
              "source": "event_processor",
              "attemptId": "attempt_123"
            }
          }
        },
        "required": [
          "id",
          "tenantId",
          "eventType",
          "url",
          "status",
          "responseStatus",
          "retryCount",
          "duration",
          "createdAt"
        ]
      },
      "NotificationStatsDto": {
        "type": "object",
        "properties": {
          "totalSent": {
            "type": "number",
            "description": "Total notifications sent",
            "example": 1500
          },
          "totalFailed": {
            "type": "number",
            "description": "Total notifications failed",
            "example": 25
          },
          "totalPending": {
            "type": "number",
            "description": "Total notifications pending",
            "example": 10
          },
          "emailStats": {
            "type": "object",
            "description": "Email-specific statistics",
            "properties": {
              "delivered": {
                "type": "number",
                "example": 1200
              },
              "opened": {
                "type": "number",
                "example": 800
              },
              "clicked": {
                "type": "number",
                "example": 150
              },
              "bounced": {
                "type": "number",
                "example": 15
              },
              "openRate": {
                "type": "number",
                "example": 66.7
              },
              "clickRate": {
                "type": "number",
                "example": 12.5
              }
            }
          },
          "webhookStats": {
            "type": "object",
            "description": "Webhook-specific statistics",
            "properties": {
              "successful": {
                "type": "number",
                "example": 280
              },
              "failed": {
                "type": "number",
                "example": 8
              },
              "averageResponseTime": {
                "type": "number",
                "example": 450
              },
              "successRate": {
                "type": "number",
                "example": 97.2
              }
            }
          },
          "byTemplateType": {
            "description": "Statistics by template type",
            "example": [
              {
                "templateType": "invoice_paid",
                "count": 500,
                "successRate": 98.5
              },
              {
                "templateType": "payment_failed",
                "count": 50,
                "successRate": 95
              }
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last24Hours": {
            "type": "object",
            "description": "Statistics for the last 24 hours",
            "example": {
              "sent": 150,
              "failed": 3,
              "hourlyBreakdown": [
                {
                  "hour": "2025-07-30T09:00:00Z",
                  "count": 12
                },
                {
                  "hour": "2025-07-30T10:00:00Z",
                  "count": 18
                }
              ]
            }
          }
        },
        "required": [
          "totalSent",
          "totalFailed",
          "totalPending",
          "emailStats",
          "webhookStats",
          "byTemplateType",
          "last24Hours"
        ]
      },
      "PaymentProviderConfigResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Configuration ID"
          },
          "provider": {
            "type": "string",
            "enum": [
              "STRIPE",
              "PAYPAL",
              "FUSIONPAY"
            ],
            "description": "Payment provider type"
          },
          "mode": {
            "type": "string",
            "enum": [
              "SANDBOX",
              "LIVE"
            ],
            "description": "Environment mode"
          },
          "public_key": {
            "type": "string",
            "description": "Public key for the provider"
          },
          "secret_key": {
            "type": "string",
            "description": "Secret key for the provider (masked)"
          },
          "webhook_secret": {
            "type": "string",
            "description": "Webhook secret for the provider (masked)"
          },
          "extra": {
            "type": "object",
            "description": "Additional configuration data"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the configuration is active"
          },
          "created_at": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updated_at": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "provider",
          "mode",
          "active",
          "created_at",
          "updated_at"
        ]
      },
      "CreatePaymentProviderConfigDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "STRIPE",
              "PAYPAL",
              "FUSIONPAY"
            ],
            "description": "Payment provider type",
            "example": "STRIPE"
          },
          "mode": {
            "type": "string",
            "enum": [
              "SANDBOX",
              "LIVE"
            ],
            "description": "Environment mode",
            "example": "SANDBOX"
          },
          "public_key": {
            "type": "object",
            "description": "Public key for the provider",
            "example": "pk_test_..."
          },
          "secret_key": {
            "type": "object",
            "description": "Secret key for the provider",
            "example": "sk_test_..."
          },
          "webhook_secret": {
            "type": "object",
            "description": "Webhook secret for the provider",
            "example": "whsec_..."
          },
          "extra": {
            "type": "object",
            "description": "Additional configuration data",
            "example": {
              "endpoint": "https://api.stripe.com",
              "region": "us"
            }
          },
          "active": {
            "type": "boolean",
            "description": "Whether the configuration is active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "provider",
          "mode"
        ]
      },
      "UpdatePaymentProviderConfigDto": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "STRIPE",
              "PAYPAL",
              "FUSIONPAY"
            ],
            "description": "Payment provider type",
            "example": "STRIPE"
          },
          "mode": {
            "type": "string",
            "enum": [
              "SANDBOX",
              "LIVE"
            ],
            "description": "Environment mode",
            "example": "SANDBOX"
          },
          "public_key": {
            "type": "object",
            "description": "Public key for the provider",
            "example": "pk_test_..."
          },
          "secret_key": {
            "type": "object",
            "description": "Secret key for the provider",
            "example": "sk_test_..."
          },
          "webhook_secret": {
            "type": "object",
            "description": "Webhook secret for the provider",
            "example": "whsec_..."
          },
          "extra": {
            "type": "object",
            "description": "Additional configuration data",
            "example": {
              "endpoint": "https://api.stripe.com",
              "region": "us"
            }
          },
          "active": {
            "type": "boolean",
            "description": "Whether the configuration is active",
            "example": true,
            "default": true
          }
        }
      },
      "CreatePlanDto": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Display name of the plan",
            "example": "Professional Plan"
          },
          "description": {
            "type": "object",
            "description": "Description of the plan",
            "example": "Advanced features for growing teams"
          },
          "tier": {
            "type": "string",
            "description": "Plan tier",
            "example": "PRO"
          },
          "features": {
            "description": "Plan features",
            "example": [
              "hr",
              "analytics",
              "crm"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "display_name",
          "tier"
        ]
      },
      "UpdatePlanDto": {
        "type": "object",
        "properties": {
          "display_name": {
            "type": "string",
            "description": "Display name of the plan",
            "example": "Professional Plan"
          },
          "description": {
            "type": "object",
            "description": "Description of the plan",
            "example": "Advanced features for growing teams"
          },
          "tier": {
            "type": "string",
            "description": "Plan tier",
            "example": "PRO"
          },
          "features": {
            "description": "Plan features",
            "example": [
              "hr",
              "analytics",
              "crm"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreatePriceDto": {
        "type": "object",
        "properties": {
          "plan_id": {
            "type": "string",
            "description": "Plan ID this price belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "usd"
          },
          "unit_amount": {
            "type": "number",
            "description": "Unit amount as decimal (e.g., 29.99)",
            "example": 29.99
          },
          "interval": {
            "type": "string",
            "enum": [
              "ONE_TIME",
              "MONTH",
              "YEAR"
            ],
            "description": "Billing interval",
            "example": "MONTH"
          },
          "seat_included": {
            "type": "number",
            "description": "Number of seats included in this price",
            "example": 5,
            "default": 1
          },
          "external_id": {
            "type": "string",
            "description": "External provider ID",
            "example": "price_1234567890"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the price is active",
            "example": true,
            "default": true
          }
        },
        "required": [
          "plan_id",
          "currency",
          "unit_amount",
          "interval"
        ]
      },
      "UpdatePriceDto": {
        "type": "object",
        "properties": {
          "plan_id": {
            "type": "string",
            "description": "Plan ID this price belongs to",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "usd"
          },
          "unit_amount": {
            "type": "number",
            "description": "Unit amount as decimal (e.g., 29.99)",
            "example": 29.99
          },
          "interval": {
            "type": "string",
            "enum": [
              "ONE_TIME",
              "MONTH",
              "YEAR"
            ],
            "description": "Billing interval",
            "example": "MONTH"
          },
          "seat_included": {
            "type": "number",
            "description": "Number of seats included in this price",
            "example": 5,
            "default": 1
          },
          "external_id": {
            "type": "string",
            "description": "External provider ID",
            "example": "price_1234567890"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the price is active",
            "example": true,
            "default": true
          }
        }
      },
      "StripeEventResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "evt_1234567890abcdef",
            "description": "Stripe event ID"
          },
          "tenant_id": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426614174001",
            "description": "Tenant ID"
          },
          "type": {
            "type": "string",
            "example": "customer.subscription.created",
            "description": "Stripe event type"
          },
          "api_version": {
            "type": "object",
            "example": "2020-08-27",
            "description": "Stripe API version",
            "nullable": true
          },
          "payload": {
            "type": "object",
            "example": {
              "object": "subscription",
              "id": "sub_1234567890abcdef",
              "status": "active"
            },
            "description": "Event payload data"
          },
          "context": {
            "type": "object",
            "example": "Authentication context for the event",
            "description": "Event context information",
            "nullable": true
          },
          "processed": {
            "type": "boolean",
            "example": true,
            "description": "Whether the event has been processed"
          },
          "retries": {
            "type": "number",
            "example": 0,
            "description": "Number of processing retries"
          },
          "created": {
            "type": "number",
            "example": 1640995200,
            "description": "Stripe event creation timestamp"
          },
          "processed_at": {
            "type": "object",
            "example": "2024-01-01T00:00:00.000Z",
            "description": "When the event was processed",
            "nullable": true
          },
          "received_at": {
            "format": "date-time",
            "type": "string",
            "example": "2024-01-01T00:00:00.000Z",
            "description": "When the event was received by our system"
          }
        },
        "required": [
          "id",
          "tenant_id",
          "type",
          "api_version",
          "payload",
          "context",
          "processed",
          "retries",
          "created",
          "processed_at",
          "received_at"
        ]
      }
    }
  }
}
